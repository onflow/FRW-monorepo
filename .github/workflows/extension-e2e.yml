name: Extension E2E

on:
  schedule:
    - cron: "0 0,12 * * *"
  workflow_dispatch:
    inputs:
      build_target:
        description: "Build target to test"
        required: false
        default: "pro"
        type: choice
        options:
          - dev
          - pro
      notify_on_success:
        description: "Send Discord notification when the run succeeds"
        required: false
        default: "false"
        type: choice
        options:
          - "false"
          - "true"

jobs:
  e2e:
    runs-on: ubuntu-latest
    concurrency:
      group: extension-e2e
      cancel-in-progress: false
    environment: ${{ (inputs.build_target || 'pro') == 'pro' && 'production' || 'development' }}
    strategy:
      matrix:
        node-version: [22.x]
    env:
      BUILD_TARGET: ${{ inputs.build_target || 'pro' }}
      NOTIFY_ON_SUCCESS: ${{ inputs.notify_on_success || 'false' }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Create environment files
        run: |
          DEPLOYMENT_ENV_VALUE=$([ "${BUILD_TARGET}" = "pro" ] && echo "production" || echo "development")
          LATEST_TAG_VALUE=$(git tag --sort=-committerdate | head -n 1 || echo 'v0.0.0')

          create_env_file() {
            local file_name=$1
            cat << EOF > $file_name
          # Git info
          COMMIT_SHA="${{ github.sha }}"
          BRANCH_NAME="${{ github.ref_name }}"
          PR_TITLE="${{ github.event_name == 'pull_request' && github.event.pull_request.title || '' }}"
          PR_NUMBER="${{ github.event_name == 'pull_request' && github.event.pull_request.number || '' }}"
          DEPLOYMENT_ENV="$DEPLOYMENT_ENV_VALUE"
          LATEST_TAG="$LATEST_TAG_VALUE"
          REPO_URL="https://github.com/${{ github.repository }}"
          IS_BETA="false"
          BETA_VERSION=""

          # Google drive
          GD_BACKUP_NAME="${{ vars.GD_BACKUP_NAME }}"
          GD_FOLDER="${{ vars.GD_FOLDER }}"
          GD_AES_KEY="${{ secrets.GD_AES_KEY }}"
          GD_IV="${{ secrets.GD_IV }}"
          GOOGLE_API="${{ secrets.GOOGLE_API }}"
          FB_TOKEN="${{ secrets.FB_TOKEN }}"
          # firebase
          FB_API_KEY="${{ secrets.FB_API_KEY }}"
          FB_AUTH_DOMAIN="${{ secrets.FB_AUTH_DOMAIN }}"
          FB_DATABASE_URL="${{ secrets.FB_DATABASE_URL }}"
          FB_PROJECTID="${{ secrets.FB_PROJECTID }}"
          FB_STORAGE_BUCKET="${{ secrets.FB_STORAGE_BUCKET }}"
          FB_MESSAGING_SENDER_ID="${{ secrets.FB_MESSAGING_SENDER_ID }}"
          FB_APP_ID="${{ secrets.FB_APP_ID }}"
          FB_MEASUREMENT_ID="${{ secrets.FB_MEASUREMENT_ID }}"
          FB_FUNCTIONS="${{ secrets.FB_FUNCTIONS }}"
          API_NEWS_PATH="${{ vars.API_NEWS_PATH }}"
          API_CONFIG_PATH="${{ vars.API_CONFIG_PATH }}"
          API_BASE_URL="${{ vars.API_BASE_URL }}"
          API_GO_SERVER_URL="${{ vars.API_GO_SERVER_URL }}"
          # manifest
          MANIFEST_KEY="${{ secrets.MANIFEST_KEY }}"
          OAUTH2_CLIENT_ID="${{ secrets.OAUTH2_CLIENT_ID }}"
          OAUTH2_SCOPES="${{ vars.OAUTH2_SCOPES }}"
          WC_PROJECTID="${{ secrets.WC_PROJECTID }}"
          MIXPANEL_TOKEN="${{ secrets.MIXPANEL_TOKEN }}"
          SCRIPTS_PUBLIC_KEY="${{ vars.SCRIPTS_PUBLIC_KEY }}"
          BETA_MANIFEST_KEY="${{ secrets.BETA_MANIFEST_KEY }}"
          BETA_OAUTH2_CLIENT_ID="${{ secrets.BETA_OAUTH2_CLIENT_ID }}"
          EOF
          }

          create_env_file "apps/extension/.env.pro"
          create_env_file "apps/extension/.env.dev"

          cat << EOF > apps/extension/.env.test
          # Test secrets
          TEST_PASSWORD="${{ secrets.TEST_PASSWORD }}"
          TEST_SEED_PHRASE_RECEIVER="${{ secrets.TEST_SEED_PHRASE_RECEIVER }}"
          TEST_SEED_PHRASE_SENDER="${{ secrets.TEST_SEED_PHRASE_SENDER }}"
          TEST_SENDER_ADDR="${{ vars.TEST_SENDER_ADDR }}"
          TEST_SENDER_NICKNAME="${{ vars.TEST_SENDER_NICKNAME }}"
          TEST_RECEIVER_ADDR="${{ vars.TEST_RECEIVER_ADDR }}"
          TEST_RECEIVER_NICKNAME="${{ vars.TEST_RECEIVER_NICKNAME }}"
          TEST_SENDER_EVM_ADDR="${{ vars.TEST_SENDER_EVM_ADDR }}"
          TEST_RECEIVER_EVM_ADDR="${{ vars.TEST_RECEIVER_EVM_ADDR }}"
          TEST_RECEIVER_METAMASK_EVM_ADDR="${{ secrets.TEST_RECEIVER_METAMASK_EVM_ADDR }}"
          TEST_SENDER_CHILD_ADDR="${{ vars.TEST_SENDER_CHILD_ADDR }}"
          TEST_SENDER_CHILD_ADDR2="${{ vars.TEST_SENDER_CHILD_ADDR2 }}"
          TEST_MULTI_ACCOUNT_TESTER_ADDR2="${{ secrets.TEST_MULTI_ACCOUNT_TESTER_ADDR2 }}"
          TEST_MULTI_ACCOUNT_TESTER_EVM_ADDR2="${{ secrets.TEST_MULTI_ACCOUNT_TESTER_EVM_ADDR2 }}"
          TEST_EXTENSION_ID="${{ vars.TEST_EXTENSION_ID || 'cfiagdgiikmjgfjnlballglniejjgegi' }}"
          EOF

      - name: Derive extension ID from manifest key
        env:
          MANIFEST_KEY: ${{ secrets.MANIFEST_KEY }}
          BETA_MANIFEST_KEY: ${{ secrets.BETA_MANIFEST_KEY }}
          IS_BETA: "false"
        run: |
          node <<'NODE'
          'use strict';
          const fs = require('fs');
          const crypto = require('crypto');

          const { MANIFEST_KEY, BETA_MANIFEST_KEY, IS_BETA, GITHUB_ENV } = process.env;
          const manifestKey =
            IS_BETA === 'true' && BETA_MANIFEST_KEY ? BETA_MANIFEST_KEY : MANIFEST_KEY;

          if (!manifestKey) {
            console.log('No manifest key provided; skipping derived extension ID export.');
            return;
          }

          try {
            const keyBytes = Buffer.from(manifestKey, 'base64');
            const hashHex = crypto.createHash('sha256').update(keyBytes).digest('hex').slice(0, 32);
            const alphabet = 'abcdefghijklmnop';
            let extensionId = '';
            for (const char of hashHex) {
              extensionId += alphabet[parseInt(char, 16)];
            }
            console.log(`Derived extension ID from manifest key: ${extensionId}`);
            fs.appendFileSync(GITHUB_ENV, `TEST_EXTENSION_ID=${extensionId}\n`);
          } catch (error) {
            console.error(`Failed to derive extension ID: ${error.message}`);
          }
          NODE

      - name: Build packages
        run: pnpm build:packages

      - name: Build extension (${{ env.BUILD_TARGET }})
        run: |
          if [ "${BUILD_TARGET}" = "pro" ]; then
            pnpm -F frw-extension build:ci
          else
            pnpm -F frw-extension build:dev-ci
          fi
        env:
          CI: true

      - name: Install Playwright Browsers
        run: pnpm -F frw-extension exec playwright install --with-deps chromium

      - name: Run Playwright E2E tests
        run: xvfb-run -a --server-args="-screen 0 1280x720x24 -nolisten tcp -nolisten unix" pnpm -F frw-extension test:e2e
        env:
          CI: true
          HEADLESS: true

      - name: Sanitize Playwright Report
        if: always()
        run: cd apps/extension && pnpm tsx build/sanitize-playwright.ts

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: apps/extension/playwright-report/
          retention-days: 14

      - name: Notify Discord on failure
        if: failure()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          if [ -z "$DISCORD_WEBHOOK_URL" ]; then
            echo "DISCORD_WEBHOOK_URL not set; skipping Discord notification."
            exit 0
          fi
          payload=$(jq -n \
            --arg content "ðŸš¨ Extension E2E failed in run ${{ github.run_number }} (<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}>)" \
            '{content: $content}')
          curl -X POST -H "Content-Type: application/json" -d "$payload" "$DISCORD_WEBHOOK_URL"

      - name: Notify Discord on success (optional)
        if: success() && env.NOTIFY_ON_SUCCESS == 'true'
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          if [ -z "$DISCORD_WEBHOOK_URL" ]; then
            echo "DISCORD_WEBHOOK_URL not set; skipping Discord notification."
            exit 0
          fi
          payload=$(jq -n \
            --arg content "âœ… Extension E2E succeeded in run ${{ github.run_number }} (<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}>)" \
            '{content: $content}')
          curl -X POST -H "Content-Type: application/json" -d "$payload" "$DISCORD_WEBHOOK_URL"
