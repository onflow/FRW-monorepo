import * as fcl from '@onflow/fcl';
import { Buffer } from 'buffer';

/** Utility function to decode Base64 Cadence code */
const decodeCadence = (code: string): string => Buffer.from(code, 'base64').toString('utf8');

/** Generated from Cadence files */
/** Flow Signer interface for transaction signing */
export interface FlowSigner {
  address: string;
  keyIndex: number;
  sign(signableData: Uint8Array): Promise<Uint8Array>;
  authzFunc: (account: any) => Promise<any>;
}

export interface CompositeSignature {
  addr: string;
  keyId: number;
  signature: string;
}

export interface AuthorizationAccount extends Record<string, any> {
  tempId: string;
  addr: string;
  keyId: number;
  signingFunction: (signable: { message: string }) => Promise<CompositeSignature>;
}

export type AuthorizationFunction = (account: any) => Promise<AuthorizationAccount>;

/** Network addresses for contract imports */
export const addresses = {
  mainnet: {
    '0xCapabilityDelegator': '0xd8a7e05a7ac670c0',
    '0xCapabilityFactory': '0xd8a7e05a7ac670c0',
    '0xCapabilityFilter': '0xd8a7e05a7ac670c0',
    '0xCrossVMMetadataViews': '0x1d7e57aa55817448',
    '0xDomains': '0x233eb012d34b0070',
    '0xEVM': '0xe467b9dd11fa00df',
    '0xEVMUtils': '0x1e4aa0b87d10b141',
    '0xFLOAT': '0x2d4c3caffbeab845',
    '0xFiatToken': '0xb19436aae4d94622',
    '0xFind': '0x097bafa4e0b48eef',
    '0xFlowEVMBridge': '0x1e4aa0b87d10b141',
    '0xFlowEVMBridgeConfig': '0x1e4aa0b87d10b141',
    '0xFlowEVMBridgeUtils': '0x1e4aa0b87d10b141',
    '0xFlowEpoch': '0x8624b52f9ddcd04a',
    '0xFlowFees': '0xf919ee77447b7497',
    '0xFlowIDTableStaking': '0x8624b52f9ddcd04a',
    '0xFlowStakingCollection': '0x8d0e87b65159ae63',
    '0xFlowTableStaking': '0x8624b52f9ddcd04a',
    '0xFlowToken': '0x1654653399040a61',
    '0xFlowns': '0x233eb012d34b0070',
    '0xFungibleToken': '0xf233dcee88fe0abe',
    '0xFungibleTokenMetadataViews': '0xf233dcee88fe0abe',
    '0xHybridCustody': '0xd8a7e05a7ac670c0',
    '0xLockedTokens': '0x8d0e87b65159ae63',
    '0xLostAndFound': '0x473d6a2c37eab5be',
    '0xMetadataViews': '0x1d7e57aa55817448',
    '0xNonFungibleToken': '0x1d7e57aa55817448',
    '0xScopedFTProviders': '0x1e4aa0b87d10b141',
    '0xStakingCollection': '0x8d0e87b65159ae63',
    '0xStakingProxy': '0x62430cf28c26d095',
    '0xStorageRent': '0x707adbad1428c624',
    '0xSwapError': '0xb78ef7afa52ff906',
    '0xSwapRouter': '0xa6850776a94e6551',
    '0xUSDCFlow': '0xf1ab99c82dee3526',
    '0xViewResolver': '0x1d7e57aa55817448',
    '0xstFlowToken': '0xd6f80565193ad727',
  },
  testnet: {
    '0xCapabilityDelegator': '0x294e44e1ec6993c6',
    '0xCapabilityFactory': '0x294e44e1ec6993c6',
    '0xCapabilityFilter': '0x294e44e1ec6993c6',
    '0xCrossVMMetadataViews': '0x631e88ae7f1d7c20',
    '0xDomains': '0xb05b2abb42335e88',
    '0xEVM': '0x8c5303eaa26202d6',
    '0xEVMUtils': '0xdfc20aee650fcbdf',
    '0xFLOAT': '0x0afe396ebc8eee65',
    '0xFiatToken': '0xa983fecbed621163',
    '0xFind': '0xa16ab1d0abde3625',
    '0xFlowEVMBridge': '0xdfc20aee650fcbdf',
    '0xFlowEVMBridgeConfig': '0xdfc20aee650fcbdf',
    '0xFlowEVMBridgeUtils': '0xdfc20aee650fcbdf',
    '0xFlowEpoch': '0x9eca2b38b18b5dfe',
    '0xFlowFees': '0x912d5440f7e3769e',
    '0xFlowIDTableStaking': '0x9eca2b38b18b5dfe',
    '0xFlowStakingCollection': '0x95e019a17d0e23d7',
    '0xFlowTableStaking': '0x9eca2b38b18b5dfe',
    '0xFlowToken': '0x7e60df042a9c0868',
    '0xFlowns': '0xb05b2abb42335e88',
    '0xFungibleToken': '0x9a0766d93b6608b7',
    '0xFungibleTokenMetadataViews': '0x9a0766d93b6608b7',
    '0xHybridCustody': '0x294e44e1ec6993c6',
    '0xLockedTokens': '0x95e019a17d0e23d7',
    '0xLostAndFound': '0xbe4635353f55bbd4',
    '0xMetadataViews': '0x631e88ae7f1d7c20',
    '0xNonFungibleToken': '0x631e88ae7f1d7c20',
    '0xScopedFTProviders': '0xdfc20aee650fcbdf',
    '0xStakingCollection': '0x95e019a17d0e23d7',
    '0xStakingProxy': '0x7aad92e5a0715d21',
    '0xStorageRent': '0xd50084a1a43b1507',
    '0xSwapError': '0xddb929038d45d4b3',
    '0xSwapRouter': '0x2f8af5ed05bbde0d',
    '0xUSDCFlow': '0x64adf39cbc354fcb',
    '0xViewResolver': '0x631e88ae7f1d7c20',
    '0xstFlowToken': '0xe45c64ecfe31e465',
  },
};

/** Generated Cadence interface */
export interface Result {
  address: string;
  balance: string;
  availableBalance: string;
  storageUsed: number;
  storageCapacity: number;
  storageFlow: string;
}

/** Generated Cadence interface */
export interface StorageInfo {
  capacity: number;
  used: number;
  available: number;
}

/** Generated Cadence interface */
export interface TokenInfo {
  id: string;
  balance: string;
}

/** Generated Cadence interface */

/** Generated Cadence interface */
export interface DelegatorInfo {
  id: number;
  nodeID: string;
  tokensCommitted: string;
  tokensStaked: string;
  tokensUnstaking: string;
  tokensRewarded: string;
  tokensUnstaked: string;
  tokensRequestedToUnstake: string;
}

type RequestInterceptor = (config: any) => any | Promise<any>;
type ResponseInterceptor = (response: any) => any | Promise<any>;

export class CadenceService {
  private requestInterceptors: RequestInterceptor[] = [];
  private responseInterceptors: ResponseInterceptor[] = [];

  constructor() {}

  useRequestInterceptor(interceptor: RequestInterceptor) {
    this.requestInterceptors.push(interceptor);
  }

  useResponseInterceptor(interceptor: ResponseInterceptor) {
    this.responseInterceptors.push(interceptor);
  }

  private async runRequestInterceptors(config: any) {
    let c = config;
    for (const interceptor of this.requestInterceptors) {
      c = await interceptor(c);
    }
    return c;
  }

  private async runResponseInterceptors(response: any) {
    let r = response;
    for (const interceptor of this.responseInterceptors) {
      r = await interceptor(r);
    }
    return r;
  }

  public async getAddr(flowAddress: string): Promise<string | undefined> {
    const code = decodeCadence(
      'aW1wb3J0IEVWTSBmcm9tIDB4RVZNCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihmbG93QWRkcmVzczogQWRkcmVzcyk6IFN0cmluZz8gewogICAgaWYgbGV0IGFkZHJlc3M6IEVWTS5FVk1BZGRyZXNzID0gZ2V0QXV0aEFjY291bnQ8YXV0aChCb3Jyb3dWYWx1ZSkgJkFjY291bnQ+KGZsb3dBZGRyZXNzKQogICAgICAgIC5zdG9yYWdlLmJvcnJvdzwmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSk/LmFkZHJlc3MoKSB7CiAgICAgICAgbGV0IGJ5dGVzOiBbVUludDhdID0gW10KICAgICAgICBmb3IgYnl0ZSBpbiBhZGRyZXNzLmJ5dGVzIHsKICAgICAgICAgICAgYnl0ZXMuYXBwZW5kKGJ5dGUpCiAgICAgICAgfQogICAgICAgIHJldHVybiBTdHJpbmcuZW5jb2RlSGV4KGJ5dGVzKQogICAgfQogICAgcmV0dXJuIG5pbAp9'
    );
    let config = {
      cadence: code,
      name: 'getAddr',
      type: 'script',
      args: (arg: any, t: any) => [arg(flowAddress, t.Address)],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let result = await fcl.query(config);
    result = await this.runResponseInterceptors(result);
    return result;
  }

  public async batchBridgeNftToEvmAddressWithPayer(
    nftIdentifier: string,
    ids: number[],
    recipient: string
  ) {
    const code = decodeCadence(
      ''
    );
    let config = {
      cadence: code,
      name: 'batchBridgeNftToEvmAddressWithPayer',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(nftIdentifier, t.String),
        arg(ids, t.Array(t.UInt64)),
        arg(recipient, t.String),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async bridgeNftFromEvmV2(nftIdentifier: string, id: string) {
    const code = decodeCadence(
      ''
    );
    let config = {
      cadence: code,
      name: 'bridgeNftFromEvmV2',
      type: 'transaction',
      args: (arg: any, t: any) => [arg(nftIdentifier, t.String), arg(id, t.UInt256)],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async batchBridgeNftFromEvmWithPayer(nftIdentifier: string, ids: string[]) {
    const code = decodeCadence(
      ''
    );
    let config = {
      cadence: code,
      name: 'batchBridgeNftFromEvmWithPayer',
      type: 'transaction',
      args: (arg: any, t: any) => [arg(nftIdentifier, t.String), arg(ids, t.Array(t.UInt256))],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async bridgeNftFromEvmToFlowV3(nftIdentifier: string, id: string, recipient: string) {
    const code = decodeCadence(
      'aW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KaW1wb3J0IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBTY29wZWRGVFByb3ZpZGVycyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRVZNIGZyb20gMHhFVk0KaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgU3RvcmFnZVJlbnQgZnJvbSAweFN0b3JhZ2VSZW50CmltcG9ydCBDcm9zc1ZNTWV0YWRhdGFWaWV3cyBmcm9tIDB4Q3Jvc3NWTU1ldGFkYXRhVmlld3MKCi8vLyBUaGlzIHRyYW5zYWN0aW9uIGJyaWRnZXMgYW4gTkZUIGZyb20gRVZNIHRvIENhZGVuY2UgYXNzdW1pbmcgaXQgaGFzIGFscmVhZHkgYmVlbiBvbmJvYXJkZWQgdG8gdGhlIEZsb3dFVk1CcmlkZ2UuCi8vLyBBbHNvIGtub3cgdGhhdCB0aGUgcmVjaXBpZW50IEZsb3cgYWNjb3VudCBtdXN0IGhhdmUgYSBSZWNlaXZlciBjYXBhYmxlIG9mIHJlY2VpdmluZyB0aGUgdGhpcyBicmlkZ2VkIE5GVCBhY2Nlc3NpYmxlCi8vLyB2aWEgcHVibGlzaGVkIENhcGFiaWxpdHkgYXQgdGhlIHRva2VuJ3Mgc3RhbmRhcmQgcGF0aC4KLy8vIE5PVEU6IFRoZSBFUkM3MjEgbXVzdCBoYXZlIGZpcnN0IGJlZW4gb25ib2FyZGVkIHRvIHRoZSBicmlkZ2UuIFRoaXMgY2FuIGJlIGNoZWNrZWQgdmlhIHRoZSBtZXRob2QKLy8vICAgICBGbG93RVZNQnJpZGdlLmV2bUFkZHJlc3NSZXF1aXJlc09uYm9hcmRpbmcoYWRkcmVzczogc2VsZi5ldm1Db250cmFjdEFkZHJlc3MpCi8vLwovLy8gQHBhcmFtIG5mdElkZW50aWZpZXI6IFRoZSBDYWRlbmNlIHR5cGUgaWRlbnRpZmllciBvZiB0aGUgTkZUIHRvIGJyaWRnZSAtIGUuZy4gbmZ0LmdldFR5cGUoKS5pZGVudGlmaWVyCi8vLyBAcGFyYW0gaWQ6IFRoZSBFUkM3MjEgaWQgb2YgdGhlIE5GVCB0byBicmlkZ2UgdG8gQ2FkZW5jZSBmcm9tIEVWTQovLy8gQHBhcmFtIHJlY2lwaWVudDogVGhlIEZsb3cgYWNjb3VudCBhZGRyZXNzIHRvIHJlY2VpdmUgdGhlIGJyaWRnZWQgTkZUCi8vLwp0cmFuc2FjdGlvbihuZnRJZGVudGlmaWVyOiBTdHJpbmcsIGlkOiBVSW50MjU2LCByZWNpcGllbnQ6IEFkZHJlc3MpIHsKICAgIGxldCBuZnRUeXBlOiBUeXBlCiAgICBsZXQgcmVjZWl2ZXI6ICZ7Tm9uRnVuZ2libGVUb2tlbi5SZWNlaXZlcn0KICAgIGxldCBzY29wZWRQcm92aWRlcjogQFNjb3BlZEZUUHJvdmlkZXJzLlNjb3BlZEZUUHJvdmlkZXIKICAgIGxldCBjb2E6IGF1dGgoRVZNLkNhbGwsIEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudAogICAgbGV0IHZpZXdSZXNvbHZlcjogJntWaWV3UmVzb2x2ZXJ9CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUsIENvcHlWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUsIFVucHVibGlzaENhcGFiaWxpdHkpICZBY2NvdW50KSB7CiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgQ2FkZW5jZU93bmVkQWNjb3VudCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgQ09BCiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQ2FsbCwgRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihmcm9tOiAvc3RvcmFnZS9ldm0pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IENPQSBmcm9tIHByb3ZpZGVkIGdhdGV3YXkgYWRkcmVzcyIpCgogICAgICAgIC8qIC0tLSBDb25zdHJ1Y3QgdGhlIE5GVCB0eXBlIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQ29uc3RydWN0IHRoZSBORlQgdHlwZSBmcm9tIHRoZSBwcm92aWRlZCBpZGVudGlmaWVyCiAgICAgICAgc2VsZi5uZnRUeXBlID0gQ29tcG9zaXRlVHlwZShuZnRJZGVudGlmaWVyKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGNvbnN0cnVjdCBORlQgdHlwZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQogICAgICAgIC8vIFBhcnNlIHRoZSBORlQgaWRlbnRpZmllciBpbnRvIGl0cyBjb21wb25lbnRzCiAgICAgICAgbGV0IG5mdENvbnRyYWN0QWRkcmVzcyA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdEFkZHJlc3MoZnJvbVR5cGU6IHNlbGYubmZ0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgYWRkcmVzcyBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQogICAgICAgIGxldCBuZnRDb250cmFjdE5hbWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3ROYW1lKGZyb21UeXBlOiBzZWxmLm5mdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IG5hbWUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKCiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgcmVjaXBpZW50J3MgTkZUIFJlY2VpdmVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBORlQgY29sbGVjdGlvbiwgY29uZmlndXJpbmcgaWYgbmVjZXNzYXJ5CiAgICAgICAgc2VsZi52aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KG5mdENvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5mdENvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gTkZUIGNvbnRyYWN0IikKICAgICAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSBzZWxmLnZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBzZWxmLm5mdFR5cGUsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpCiAgICAgICAgICAgICkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBORlRDb2xsZWN0aW9uRGF0YSB2aWV3IikKICAgICAgICAvLyBDb25maWd1cmUgdGhlIHNpZ25lcidzIGFjY291bnQgZm9yIHRoaXMgTkZUCiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oZnJvbTogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUoPC1jb2xsZWN0aW9uRGF0YS5jcmVhdGVFbXB0eUNvbGxlY3Rpb24oKSwgdG86IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnVucHVibGlzaChjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKQogICAgICAgICAgICBsZXQgY29sbGVjdGlvbkNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnB1Ymxpc2goY29sbGVjdGlvbkNhcCwgYXQ6IGNvbGxlY3Rpb25EYXRhLnB1YmxpY1BhdGgpCiAgICAgICAgfQogICAgICAgIHNlbGYucmVjZWl2ZXIgPSBnZXRBY2NvdW50KHJlY2lwaWVudCkuY2FwYWJpbGl0aWVzLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9Pihjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBSZWNlaXZlciBmcm9tIHJlY2lwaWVudCdzIHB1YmxpYyBjYXBhYmlsaXR5IHBhdGgiKQoKICAgICAgICAvKiAtLS0gQ29uZmlndXJlIGEgU2NvcGVkRlRQcm92aWRlciAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgYnJpZGdlIGZlZSAtIGJyaWRnaW5nIGZyb20gRVZNIGNvbnN1bWVzIG5vIHN0b3JhZ2UsIHNvIGZsYXQgZmVlCiAgICAgICAgbGV0IGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoYnl0ZXM6IDQwMF8wMDApCiAgICAgICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKQogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgICAgICAgICAgZnJvbTogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihhcHByb3hGZWUpCiAgICAgICAgc2VsZi5zY29wZWRQcm92aWRlciA8LSBTY29wZWRGVFByb3ZpZGVycy5jcmVhdGVTY29wZWRGVFByb3ZpZGVyKAogICAgICAgICAgICAgICAgcHJvdmlkZXI6IHByb3ZpZGVyQ2FwQ29weSwKICAgICAgICAgICAgICAgIGZpbHRlcnM6IFsgcHJvdmlkZXJGaWx0ZXIgXSwKICAgICAgICAgICAgICAgIGV4cGlyYXRpb246IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCArIDEuMAogICAgICAgICAgICApCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgLy8gVW53cmFwIE5GVHMgZnJvbSBwcm9qZWN0LWRlZmluZWQgRVJDNzIxIHdyYXBwZXIgY29udHJhY3QgaWYgYXBwbGljYWJsZQogICAgICAgIHVud3JhcE5GVHNJZkFwcGxpY2FibGUoc2VsZi5jb2EsIG5mdElEczogW2lkXSwgbmZ0VHlwZTogc2VsZi5uZnRUeXBlLCB2aWV3UmVzb2x2ZXI6IHNlbGYudmlld1Jlc29sdmVyKQoKICAgICAgICAvLyBFeGVjdXRlIHRoZSBicmlkZ2UKICAgICAgICBsZXQgbmZ0OiBAe05vbkZ1bmdpYmxlVG9rZW4uTkZUfSA8LSBzZWxmLmNvYS53aXRoZHJhd05GVCgKICAgICAgICAgICAgdHlwZTogc2VsZi5uZnRUeXBlLAogICAgICAgICAgICBpZDogaWQsCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCiAgICAgICAgLy8gRW5zdXJlIHRoZSBicmlkZ2VkIG5mdCBpcyB0aGUgY29ycmVjdCB0eXBlCiAgICAgICAgYXNzZXJ0KAogICAgICAgICAgICBuZnQuZ2V0VHlwZSgpID09IHNlbGYubmZ0VHlwZSwKICAgICAgICAgICAgbWVzc2FnZTogIkJyaWRnZWQgbmZ0IHR5cGUgbWlzbWF0Y2ggLSByZXF1ZXN3dGVkOiAiLmNvbmNhdChzZWxmLm5mdFR5cGUuaWRlbnRpZmllcikKICAgICAgICAgICAgICAgIC5jb25jYXQoIiwgcmVjZWl2ZWQ6ICIpLmNvbmNhdChuZnQuZ2V0VHlwZSgpLmlkZW50aWZpZXIpCiAgICAgICAgKQogICAgICAgIC8vIERlcG9zaXQgdGhlIGJyaWRnZWQgTkZUIGludG8gdGhlIHNpZ25lcidzIGNvbGxlY3Rpb24KICAgICAgICBzZWxmLnJlY2VpdmVyLmRlcG9zaXQodG9rZW46IDwtbmZ0KQogICAgICAgIC8vIERlc3Ryb3kgdGhlIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBkZXN0cm95IHNlbGYuc2NvcGVkUHJvdmlkZXIKICAgICAgICBTdG9yYWdlUmVudC50cnlSZWZpbGwocmVjaXBpZW50KQoKICAgIH0KfQoKLy8vIFVud3JhcHMgTkZUcyBmcm9tIGEgcHJvamVjdCdzIGN1c3RvbSBFUkM3MjEgd3JhcHBlciBjb250cmFjdCB0byBicmlkZ2VkIE5GVHMgb24gRVZNLCBpZiBhcHBsaWNhYmxlLgovLy8gRW5hYmxlcyBwcm9qZWN0cyB0byB1c2UgdGhlaXIgb3duIEVSQzcyMSBjb250cmFjdCB3aGlsZSBsZXZlcmFnaW5nIHRoZSBicmlkZ2UncyB1bmRlcmx5aW5nIGNvbnRyYWN0LAovLy8gdW50aWwgZGlyZWN0IGN1c3RvbSBjb250cmFjdCBzdXBwb3J0IGlzIGFkZGVkIHRvIHRoZSBicmlkZ2UuCi8vLwovLy8gQHBhcmFtIGNvYTogVGhlIENPQSBvZiB0aGUgc2lnbmVyCi8vLyBAcGFyYW0gbmZ0SURzOiBUaGUgSURzIG9mIHRoZSBORlRzIHRvIHdyYXAKLy8vIEBwYXJhbSBuZnRUeXBlOiBUaGUgdHlwZSBvZiB0aGUgTkZUcyB0byB3cmFwCi8vLyBAcGFyYW0gdmlld1Jlc29sdmVyOiBUaGUgVmlld1Jlc29sdmVyIG9mIHRoZSBORlQgY29udHJhY3QKLy8vCmFjY2VzcyhhbGwpIGZ1biB1bndyYXBORlRzSWZBcHBsaWNhYmxlKAogICAgXyBjb2E6IGF1dGgoRVZNLkNhbGwpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudCwKICAgIG5mdElEczogW1VJbnQyNTZdLAogICAgbmZ0VHlwZTogVHlwZSwKICAgIHZpZXdSZXNvbHZlcjogJntWaWV3UmVzb2x2ZXJ9CikgewogICAgLy8gR2V0IHRoZSBwcm9qZWN0LWRlZmluZWQgRVJDNzIxIGFkZHJlc3MgaWYgaXQgZXhpc3RzCiAgICBpZiBsZXQgY3Jvc3NWTVBvaW50ZXIgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuZnRUeXBlLAogICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxDcm9zc1ZNTWV0YWRhdGFWaWV3cy5FVk1Qb2ludGVyPigpCiAgICApIGFzISBDcm9zc1ZNTWV0YWRhdGFWaWV3cy5FVk1Qb2ludGVyPyB7CiAgICAgICAgLy8gR2V0IHRoZSB1bmRlcmx5aW5nIEVSQzcyMSBhZGRyZXNzIGlmIGl0IGV4aXN0cwogICAgICAgIGlmIGxldCB1bmRlcmx5aW5nQWRkcmVzcyA9IGdldFVuZGVybHlpbmdFUkM3MjFBZGRyZXNzKGNvYSwgY3Jvc3NWTVBvaW50ZXIuZXZtQ29udHJhY3RBZGRyZXNzKSB7CiAgICAgICAgICAgIGZvciBpZCBpbiBuZnRJRHMgewogICAgICAgICAgICAgICAgLy8gVW53cmFwIE5GVCBpZiBpdCBpcyB3cmFwcGVkCiAgICAgICAgICAgICAgICBpZiBpc05GVFdyYXBwZWQoY29hLAogICAgICAgICAgICAgICAgICAgIG5mdElEOiBpZCwKICAgICAgICAgICAgICAgICAgICB1bmRlcmx5aW5nOiB1bmRlcmx5aW5nQWRkcmVzcywKICAgICAgICAgICAgICAgICAgICB3cmFwcGVyOiBjcm9zc1ZNUG9pbnRlci5ldm1Db250cmFjdEFkZHJlc3MKICAgICAgICAgICAgICAgICkgewogICAgICAgICAgICAgICAgICAgIGxldCByZXMgPSBtdXN0Q2FsbChjb2EsIGNyb3NzVk1Qb2ludGVyLmV2bUNvbnRyYWN0QWRkcmVzcywKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25TaWc6ICJ3aXRoZHJhd1RvKGFkZHJlc3MsdWludDI1NltdKSIsCiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtjb2EuYWRkcmVzcygpLCBbaWRdXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBsZXQgZGVjb2RlZFJlcyA9IEVWTS5kZWNvZGVBQkkodHlwZXM6IFtUeXBlPEJvb2w+KCldLCBkYXRhOiByZXMuZGF0YSkKICAgICAgICAgICAgICAgICAgICBhc3NlcnQoZGVjb2RlZFJlcy5sZW5ndGggPT0gMSwgbWVzc2FnZTogIkludmFsaWQgcmVzcG9uc2UgbGVuZ3RoIikKICAgICAgICAgICAgICAgICAgICBhc3NlcnQoZGVjb2RlZFJlc1swXSBhcyEgQm9vbCwgbWVzc2FnZTogIkZhaWxlZCB0byB1bndyYXAgTkZUIikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKLy8vIEdldHMgdGhlIHVuZGVybHlpbmcgRVJDNzIxIGFkZHJlc3MgaWYgaXQgZXhpc3RzIChpLmUuIGlmIHRoZSBFUkM3MjEgaXMgYSB3cmFwcGVyKQovLy8KYWNjZXNzKGFsbCkgZnVuIGdldFVuZGVybHlpbmdFUkM3MjFBZGRyZXNzKAogICAgXyBjb2E6IGF1dGgoRVZNLkNhbGwpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudCwKICAgIF8gd3JhcHBlckFkZHJlc3M6IEVWTS5FVk1BZGRyZXNzCik6IEVWTS5FVk1BZGRyZXNzPyB7CiAgICBsZXQgcmVzID0gY29hLmNhbGwoCiAgICAgICAgdG86IHdyYXBwZXJBZGRyZXNzLAogICAgICAgIGRhdGE6IEVWTS5lbmNvZGVBQklXaXRoU2lnbmF0dXJlKCJ1bmRlcmx5aW5nKCkiLCBbXSksCiAgICAgICAgZ2FzTGltaXQ6IDEwMF8wMDAsCiAgICAgICAgdmFsdWU6IEVWTS5CYWxhbmNlKGF0dG9mbG93OiAwKQogICAgKQoKICAgIC8vIElmIHRoZSBjYWxsIGZhaWxzLCByZXR1cm4gbmlsCiAgICBpZiByZXMuc3RhdHVzICE9IEVWTS5TdGF0dXMuc3VjY2Vzc2Z1bCB8fCByZXMuZGF0YS5sZW5ndGggPT0gMCB7CiAgICAgICAgcmV0dXJuIG5pbAogICAgfQoKICAgIC8vIERlY29kZSBhbmQgcmV0dXJuIHRoZSB1bmRlcmx5aW5nIEVSQzcyMSBhZGRyZXNzCiAgICBsZXQgZGVjb2RlZFJlc3VsdCA9IEVWTS5kZWNvZGVBQkkoCiAgICAgICAgdHlwZXM6IFtUeXBlPEVWTS5FVk1BZGRyZXNzPigpXSwKICAgICAgICBkYXRhOiByZXMuZGF0YQogICAgKQogICAgYXNzZXJ0KGRlY29kZWRSZXN1bHQubGVuZ3RoID09IDEsIG1lc3NhZ2U6ICJJbnZhbGlkIHJlc3BvbnNlIGxlbmd0aCIpCiAgICByZXR1cm4gZGVjb2RlZFJlc3VsdFswXSBhcyEgRVZNLkVWTUFkZHJlc3MKfQoKLy8vIENoZWNrcyBpZiB0aGUgcHJvdmlkZWQgTkZUIGlzIHdyYXBwZWQgaW4gdGhlIHVuZGVybHlpbmcgRVJDNzIxIGNvbnRyYWN0Ci8vLwphY2Nlc3MoYWxsKSBmdW4gaXNORlRXcmFwcGVkKAogICAgXyBjb2E6IGF1dGgoRVZNLkNhbGwpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudCwKICAgIG5mdElEOiBVSW50MjU2LAogICAgdW5kZXJseWluZzogRVZNLkVWTUFkZHJlc3MsCiAgICB3cmFwcGVyOiBFVk0uRVZNQWRkcmVzcwopOiBCb29sIHsKICAgIGxldCByZXMgPSBjb2EuY2FsbCgKICAgICAgICB0bzogdW5kZXJseWluZywKICAgICAgICBkYXRhOiBFVk0uZW5jb2RlQUJJV2l0aFNpZ25hdHVyZSgib3duZXJPZih1aW50MjU2KSIsIFtuZnRJRF0pLAogICAgICAgIGdhc0xpbWl0OiAxMDBfMDAwLAogICAgICAgIHZhbHVlOiBFVk0uQmFsYW5jZShhdHRvZmxvdzogMCkKICAgICkKCiAgICAvLyBJZiB0aGUgY2FsbCBmYWlscywgcmV0dXJuIGZhbHNlCiAgICBpZiByZXMuc3RhdHVzICE9IEVWTS5TdGF0dXMuc3VjY2Vzc2Z1bCB8fCByZXMuZGF0YS5sZW5ndGggPT0gMHsKICAgICAgICByZXR1cm4gZmFsc2UKICAgIH0KCiAgICAvLyBEZWNvZGUgYW5kIGNvbXBhcmUgdGhlIGFkZHJlc3NlcwogICAgbGV0IGRlY29kZWRSZXN1bHQgPSBFVk0uZGVjb2RlQUJJKAogICAgICAgIHR5cGVzOiBbVHlwZTxFVk0uRVZNQWRkcmVzcz4oKV0sCiAgICAgICAgZGF0YTogcmVzLmRhdGEKICAgICkKICAgIGFzc2VydChkZWNvZGVkUmVzdWx0Lmxlbmd0aCA9PSAxLCBtZXNzYWdlOiAiSW52YWxpZCByZXNwb25zZSBsZW5ndGgiKQoKICAgIGxldCBvd25lciA9IGRlY29kZWRSZXN1bHRbMF0gYXMhIEVWTS5FVk1BZGRyZXNzCiAgICByZXR1cm4gb3duZXIudG9TdHJpbmcoKSA9PSB3cmFwcGVyLnRvU3RyaW5nKCkKfQoKLy8vIENhbGxzIGEgZnVuY3Rpb24gb24gYW4gRVZNIGNvbnRyYWN0IGZyb20gcHJvdmlkZWQgY29hCi8vLwphY2Nlc3MoYWxsKSBmdW4gbXVzdENhbGwoCiAgICBfIGNvYTogYXV0aChFVk0uQ2FsbCkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50LAogICAgXyBjb250cmFjdEFkZHI6IEVWTS5FVk1BZGRyZXNzLAogICAgZnVuY3Rpb25TaWc6IFN0cmluZywKICAgIGFyZ3M6IFtBbnlTdHJ1Y3RdCik6IEVWTS5SZXN1bHQgewogICAgbGV0IHJlcyA9IGNvYS5jYWxsKAogICAgICAgIHRvOiBjb250cmFjdEFkZHIsCiAgICAgICAgZGF0YTogRVZNLmVuY29kZUFCSVdpdGhTaWduYXR1cmUoZnVuY3Rpb25TaWcsIGFyZ3MpLAogICAgICAgIGdhc0xpbWl0OiA0XzAwMF8wMDAsCiAgICAgICAgdmFsdWU6IEVWTS5CYWxhbmNlKGF0dG9mbG93OiAwKQogICAgKQoKICAgIGFzc2VydChyZXMuc3RhdHVzID09IEVWTS5TdGF0dXMuc3VjY2Vzc2Z1bCwKICAgICAgICBtZXNzYWdlOiAiRmFpbGVkIHRvIGNhbGwgJyIuY29uY2F0KGZ1bmN0aW9uU2lnKQogICAgICAgICAgICAuY29uY2F0KCJcblx0IGVycm9yIGNvZGU6ICIpLmNvbmNhdChyZXMuZXJyb3JDb2RlLnRvU3RyaW5nKCkpCiAgICAgICAgICAgIC5jb25jYXQoIlxuXHQgZXJyb3IgbWVzc2FnZTogIikuY29uY2F0KHJlcy5lcnJvck1lc3NhZ2UpCiAgICAgICAgICAgIC5jb25jYXQoIlxuXHQgZ2FzIHVzZWQ6ICIpLmNvbmNhdChyZXMuZ2FzVXNlZC50b1N0cmluZygpKQogICAgICAgICAgICAuY29uY2F0KCJcblx0IGNhbGxlciBhZGRyZXNzOiAweCIpLmNvbmNhdChjb2EuYWRkcmVzcygpLnRvU3RyaW5nKCkpCiAgICAgICAgICAgIC5jb25jYXQoIlxuXHQgY29udHJhY3QgYWRkcmVzczogMHgiKS5jb25jYXQoY29udHJhY3RBZGRyLnRvU3RyaW5nKCkpCiAgICApCgogICAgcmV0dXJuIHJlcwp9Cg=='
    );
    let config = {
      cadence: code,
      name: 'bridgeNftFromEvmToFlowV3',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(nftIdentifier, t.String),
        arg(id, t.UInt256),
        arg(recipient, t.Address),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async bridgeTokensFromEvmV2(vaultIdentifier: string, amount: string) {
    const code = decodeCadence(
      ''
    );
    let config = {
      cadence: code,
      name: 'bridgeTokensFromEvmV2',
      type: 'transaction',
      args: (arg: any, t: any) => [arg(vaultIdentifier, t.String), arg(amount, t.UInt256)],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async bridgeTokensToEvmV2(vaultIdentifier: string, amount: string) {
    const code = decodeCadence(
      ''
    );
    let config = {
      cadence: code,
      name: 'bridgeTokensToEvmV2',
      type: 'transaction',
      args: (arg: any, t: any) => [arg(vaultIdentifier, t.String), arg(amount, t.UFix64)],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async batchBridgeNftToEvmAddress(nftIdentifier: string, ids: number[], recipient: string) {
    const code = decodeCadence(
      ''
    );
    let config = {
      cadence: code,
      name: 'batchBridgeNftToEvmAddress',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(nftIdentifier, t.String),
        arg(ids, t.Array(t.UInt64)),
        arg(recipient, t.String),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async batchBridgeNftToEvmWithPayer(nftIdentifier: string, ids: number[]) {
    const code = decodeCadence(
      ''
    );
    let config = {
      cadence: code,
      name: 'batchBridgeNftToEvmWithPayer',
      type: 'transaction',
      args: (arg: any, t: any) => [arg(nftIdentifier, t.String), arg(ids, t.Array(t.UInt64))],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async batchBridgeNftFromEvmV2(nftIdentifier: string, ids: string[]) {
    const code = decodeCadence(
      ''
    );
    let config = {
      cadence: code,
      name: 'batchBridgeNftFromEvmV2',
      type: 'transaction',
      args: (arg: any, t: any) => [arg(nftIdentifier, t.String), arg(ids, t.Array(t.UInt256))],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async batchBridgeNftFromEvmToFlow(
    nftIdentifier: string,
    ids: string[],
    recipient: string
  ) {
    const code = decodeCadence(
      ''
    );
    let config = {
      cadence: code,
      name: 'batchBridgeNftFromEvmToFlow',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(nftIdentifier, t.String),
        arg(ids, t.Array(t.UInt256)),
        arg(recipient, t.Address),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async bridgeNftToEvmWithPayer(nftIdentifier: string, id: number) {
    const code = decodeCadence(
      ''
    );
    let config = {
      cadence: code,
      name: 'bridgeNftToEvmWithPayer',
      type: 'transaction',
      args: (arg: any, t: any) => [arg(nftIdentifier, t.String), arg(id, t.UInt64)],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async bridgeNftToEvmAddressWithPayer(
    nftIdentifier: string,
    id: number,
    recipient: string
  ) {
    const code = decodeCadence(
      ''
    );
    let config = {
      cadence: code,
      name: 'bridgeNftToEvmAddressWithPayer',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(nftIdentifier, t.String),
        arg(id, t.UInt64),
        arg(recipient, t.String),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async batchBridgeNftToEvmV2(nftIdentifier: string, ids: number[]) {
    const code = decodeCadence(
      ''
    );
    let config = {
      cadence: code,
      name: 'batchBridgeNftToEvmV2',
      type: 'transaction',
      args: (arg: any, t: any) => [arg(nftIdentifier, t.String), arg(ids, t.Array(t.UInt64))],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async bridgeNftFromEvmToFlowV2(nftIdentifier: string, id: string, recipient: string) {
    const code = decodeCadence(
      ''
    );
    let config = {
      cadence: code,
      name: 'bridgeNftFromEvmToFlowV2',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(nftIdentifier, t.String),
        arg(id, t.UInt256),
        arg(recipient, t.Address),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async bridgeNftFromEvmToFlowWithPayer(
    nftIdentifier: string,
    id: string,
    recipient: string
  ) {
    const code = decodeCadence(
      ''
    );
    let config = {
      cadence: code,
      name: 'bridgeNftFromEvmToFlowWithPayer',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(nftIdentifier, t.String),
        arg(id, t.UInt256),
        arg(recipient, t.Address),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async bridgeNftFromEvmWithPayer(nftIdentifier: string, id: string) {
    const code = decodeCadence(
      ''
    );
    let config = {
      cadence: code,
      name: 'bridgeNftFromEvmWithPayer',
      type: 'transaction',
      args: (arg: any, t: any) => [arg(nftIdentifier, t.String), arg(id, t.UInt256)],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async bridgeNftToEvmV2(nftIdentifier: string, id: number) {
    const code = decodeCadence(
      ''
    );
    let config = {
      cadence: code,
      name: 'bridgeNftToEvmV2',
      type: 'transaction',
      args: (arg: any, t: any) => [arg(nftIdentifier, t.String), arg(id, t.UInt64)],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async bridgeTokensFromEvmToFlowV3(
    vaultIdentifier: string,
    amount: string,
    recipient: string
  ) {
    const code = decodeCadence(
      ''
    );
    let config = {
      cadence: code,
      name: 'bridgeTokensFromEvmToFlowV3',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(vaultIdentifier, t.String),
        arg(amount, t.UInt256),
        arg(recipient, t.Address),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async bridgeNftToEvmAddressV2(nftIdentifier: string, id: number, recipient: string) {
    const code = decodeCadence(
      ''
    );
    let config = {
      cadence: code,
      name: 'bridgeNftToEvmAddressV2',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(nftIdentifier, t.String),
        arg(id, t.UInt64),
        arg(recipient, t.String),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async bridgeTokensFromEvmToFlowV2(
    vaultIdentifier: string,
    amount: string,
    recipient: string
  ) {
    const code = decodeCadence(
      ''
    );
    let config = {
      cadence: code,
      name: 'bridgeTokensFromEvmToFlowV2',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(vaultIdentifier, t.String),
        arg(amount, t.UInt256),
        arg(recipient, t.Address),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async bridgeTokensToEvmAddressV2(
    vaultIdentifier: string,
    amount: string,
    recipient: string
  ) {
    const code = decodeCadence(
      'aW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4RnVuZ2libGVUb2tlbgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhGbG93RVZNQnJpZGdlCgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCgp0cmFuc2FjdGlvbih2YXVsdElkZW50aWZpZXI6IFN0cmluZywgYW1vdW50OiBVRml4NjQsIHJlY2lwaWVudDogU3RyaW5nKSB7CiAgICBsZXQgc2VudFZhdWx0OiBAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9CiAgICBsZXQgcmVxdWlyZXNPbmJvYXJkaW5nOiBCb29sCiAgICBsZXQgc2NvcGVkUHJvdmlkZXI6IEBTY29wZWRGVFByb3ZpZGVycy5TY29wZWRGVFByb3ZpZGVyCgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQ29weVZhbHVlLCBCb3Jyb3dWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgLyogLS0tIENvbnN0cnVjdCB0aGUgVmF1bHQgdHlwZSAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIENvbnN0cnVjdCB0aGUgVmF1bHQgdHlwZSBmcm9tIHRoZSBwcm92aWRlZCBpZGVudGlmaWVyCiAgICAgICAgbGV0IHZhdWx0VHlwZSA9IENvbXBvc2l0ZVR5cGUodmF1bHRJZGVudGlmaWVyKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGNvbnN0cnVjdCBWYXVsdCB0eXBlIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQodmF1bHRJZGVudGlmaWVyKSkKICAgICAgICAvLyBQYXJzZSB0aGUgVmF1bHQgaWRlbnRpZmllciBpbnRvIGl0cyBjb21wb25lbnRzCiAgICAgICAgbGV0IHRva2VuQ29udHJhY3RBZGRyZXNzID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0QWRkcmVzcyhmcm9tVHlwZTogdmF1bHRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBhZGRyZXNzIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQodmF1bHRJZGVudGlmaWVyKSkKICAgICAgICBsZXQgdG9rZW5Db250cmFjdE5hbWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3ROYW1lKGZyb21UeXBlOiB2YXVsdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IG5hbWUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpKQogICAgICAgIAogICAgICAgIC8qIC0tLSBSZXRyaWV2ZSB0aGUgZnVuZHMgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIEZ1bmdpYmxlVG9rZW4gVmF1bHQKICAgICAgICBsZXQgdmlld1Jlc29sdmVyID0gZ2V0QWNjb3VudCh0b2tlbkNvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IHRva2VuQ29udHJhY3ROYW1lKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBGdW5naWJsZVRva2VuIGNvbnRyYWN0IikKICAgICAgICBsZXQgdmF1bHREYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgICAgICAgICAgICByZXNvdXJjZVR5cGU6IG5pbCwKICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPigpCiAgICAgICAgICAgICkgYXMhIEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgRlRWYXVsdERhdGEgdmlldyIpCiAgICAgICAgbGV0IHZhdWx0ID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlZhdWx0fT4oCiAgICAgICAgICAgICAgICBmcm9tOiB2YXVsdERhdGEuc3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGFjY2VzcyBzaWduZXIncyBGdW5naWJsZVRva2VuIFZhdWx0IikKCiAgICAgICAgLy8gV2l0aGRyYXcgdGhlIHJlcXVlc3RlZCBiYWxhbmNlICYgY2FsY3VsYXRlIHRoZSBhcHByb3hpbWF0ZSBicmlkZ2UgZmVlIGJhc2VkIG9uIHN0b3JhZ2UgdXNhZ2UKICAgICAgICBsZXQgY3VycmVudFN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgICAgICBzZWxmLnNlbnRWYXVsdCA8LSB2YXVsdC53aXRoZHJhdyhhbW91bnQ6IGFtb3VudCkKICAgICAgICBsZXQgd2l0aGRyYXduU3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgICAgIC8vIEFwcHJveGltYXRlIHRoZSBicmlkZ2UgZmVlIGJhc2VkIG9uIHRoZSBkaWZmZXJlbmNlIGluIHN0b3JhZ2UgdXNhZ2Ugd2l0aCBzb21lIGJ1ZmZlcgogICAgICAgIHZhciBhcHByb3hGZWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuY2FsY3VsYXRlQnJpZGdlRmVlKAogICAgICAgICAgICAgICAgYnl0ZXM6IGN1cnJlbnRTdG9yYWdlVXNhZ2UgLSB3aXRoZHJhd25TdG9yYWdlVXNhZ2UKICAgICAgICAgICAgKSAqIDEuMTAKICAgICAgICAvLyBEZXRlcm1pbmUgaWYgdGhlIFZhdWx0IHJlcXVpcmVzIG9uYm9hcmRpbmcgLSB0aGlzIGltcGFjdHMgdGhlIGZlZSByZXF1aXJlZAogICAgICAgIHNlbGYucmVxdWlyZXNPbmJvYXJkaW5nID0gRmxvd0VWTUJyaWRnZS50eXBlUmVxdWlyZXNPbmJvYXJkaW5nKHNlbGYuc2VudFZhdWx0LmdldFR5cGUoKSkKICAgICAgICAgICAgPz8gcGFuaWMoIkJyaWRnZSBkb2VzIG5vdCBzdXBwb3J0IHRoaXMgYXNzZXQgdHlwZSIpCiAgICAgICAgaWYgc2VsZi5yZXF1aXJlc09uYm9hcmRpbmcgewogICAgICAgICAgICBhcHByb3hGZWUgPSBhcHByb3hGZWUgKyBGbG93RVZNQnJpZGdlQ29uZmlnLm9uYm9hcmRGZWUKICAgICAgICB9CgogICAgICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKQogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgICAgICAgICAgZnJvbTogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihhcHByb3hGZWUpCiAgICAgICAgc2VsZi5zY29wZWRQcm92aWRlciA8LSBTY29wZWRGVFByb3ZpZGVycy5jcmVhdGVTY29wZWRGVFByb3ZpZGVyKAogICAgICAgICAgICAgICAgcHJvdmlkZXI6IHByb3ZpZGVyQ2FwQ29weSwKICAgICAgICAgICAgICAgIGZpbHRlcnM6IFsgcHJvdmlkZXJGaWx0ZXIgXSwKICAgICAgICAgICAgICAgIGV4cGlyYXRpb246IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCArIDEuMAogICAgICAgICAgICApCiAgICB9CgogICAgcHJlIHsKICAgICAgICBzZWxmLnNlbnRWYXVsdC5nZXRUeXBlKCkuaWRlbnRpZmllciA9PSB2YXVsdElkZW50aWZpZXI6CiAgICAgICAgICAgICJBdHRlbXB0aW5nIHRvIHNlbmQgaW52YWxpZCB2YXVsdCB0eXBlIC0gcmVxdWVzdGVkOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpCiAgICAgICAgICAgIC5jb25jYXQoIiwgc2VuZGluZzogIikuY29uY2F0KHNlbGYuc2VudFZhdWx0LmdldFR5cGUoKS5pZGVudGlmaWVyKQogICAgICAgIHNlbGYuc2VudFZhdWx0LmJhbGFuY2UgPT0gYW1vdW50OiAiQW1vdW50IHRvIGJlIHRyYW5zZmVycmVkIGRvZXMgbm90IG1hdGNoIHRoZSByZXF1ZXN0ZWQgYW1vdW50IgogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIGlmIHNlbGYucmVxdWlyZXNPbmJvYXJkaW5nIHsKICAgICAgICAgICAgLy8gT25ib2FyZCB0aGUgVmF1bHQgdG8gdGhlIGJyaWRnZQogICAgICAgICAgICBGbG93RVZNQnJpZGdlLm9uYm9hcmRCeVR5cGUoCiAgICAgICAgICAgICAgICBzZWxmLnNlbnRWYXVsdC5nZXRUeXBlKCksCiAgICAgICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgICAgICkKICAgICAgICB9CiAgICAgICAgLy8gRXhlY3V0ZSB0aGUgYnJpZGdlIHRyYW5zYWN0aW9uCiAgICAgICAgbGV0IHJlY2lwaWVudEVWTUFkZHJlc3MgPSBFVk0uYWRkcmVzc0Zyb21TdHJpbmcocmVjaXBpZW50KQogICAgICAgIEZsb3dFVk1CcmlkZ2UuYnJpZGdlVG9rZW5zVG9FVk0oCiAgICAgICAgICAgIHZhdWx0OiA8LXNlbGYuc2VudFZhdWx0LAogICAgICAgICAgICB0bzogcmVjaXBpZW50RVZNQWRkcmVzcywKICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzZWxmLnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICkKICAgICAgICAvLyBEZXN0cm95IHRoZSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0='
    );
    let config = {
      cadence: code,
      name: 'bridgeTokensToEvmAddressV2',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(vaultIdentifier, t.String),
        arg(amount, t.UFix64),
        arg(recipient, t.String),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async sendNbaNftV3(identifier: string, recipientAddr: string, withdrawID: number) {
    const code = decodeCadence(
      'aW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KaW1wb3J0IFN0b3JhZ2VSZW50IGZyb20gMHhTdG9yYWdlUmVudAppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCgoKCnRyYW5zYWN0aW9uKGlkZW50aWZpZXI6IFN0cmluZywgcmVjaXBpZW50QWRkcjogQWRkcmVzcywgd2l0aGRyYXdJRDogVUludDY0KSB7CiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChTdG9yYWdlLCBCb3Jyb3dWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICBsZXQgdHlwZSA9IENvbXBvc2l0ZVR5cGUoaWRlbnRpZmllcikKICAgICAgICBsZXQgaWRlbnRpZmllclNwbGl0ID0gaWRlbnRpZmllci5zcGxpdChzZXBhcmF0b3I6ICIuIikKICAgICAgICBsZXQgYWRkcmVzcyA9IEFkZHJlc3MuZnJvbVN0cmluZygiMHgiLmNvbmNhdChpZGVudGlmaWVyU3BsaXRbMV0pKSEKICAgICAgICBsZXQgbmFtZSA9IGlkZW50aWZpZXJTcGxpdFsyXSEKICAgICAgICBsZXQgdmlld1Jlc29sdmVyID0gZ2V0QWNjb3VudChhZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogbmFtZSkKICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBORlQgY29udHJhY3QiKQoKICAgICAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICByZXNvdXJjZVR5cGU6IG5pbCwKICAgICAgICB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpCiAgICAgICAgKSBhcyEgTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIE5GVENvbGxlY3Rpb25EYXRhIHZpZXciKQogICAgICAgIC8vIGdldCB0aGUgcmVjaXBpZW50cyBwdWJsaWMgYWNjb3VudCBvYmplY3QKICAgICAgICBsZXQgcmVjaXBpZW50ID0gZ2V0QWNjb3VudChyZWNpcGllbnRBZGRyKQogICAgICAgIC8vIGJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJydzIE5GVCBjb2xsZWN0aW9uCiAgICAgICAgbGV0IGNvbGxlY3Rpb25SZWYgPSBzaWduZXIuc3RvcmFnZQogICAgICAgIC5ib3Jyb3c8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGZyb206IC9zdG9yYWdlL01vbWVudENvbGxlY3Rpb24pCiAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIG93bmVyJydzIGNvbGxlY3Rpb24iKQogICAgICAgIGxldCBzZW5kZXJSZWYgPSBzaWduZXIKICAgICAgICAuY2FwYWJpbGl0aWVzCiAgICAgICAgLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KC9wdWJsaWMvTW9tZW50Q29sbGVjdGlvbikKICAgICAgICAvLyBib3Jyb3cgYSBwdWJsaWMgcmVmZXJlbmNlIHRvIHRoZSByZWNlaXZlcnMgY29sbGVjdGlvbgogICAgICAgIGxldCByZWNpcGllbnRSZWYgPSByZWNpcGllbnQKICAgICAgICAuY2FwYWJpbGl0aWVzCiAgICAgICAgLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KC9wdWJsaWMvTW9tZW50Q29sbGVjdGlvbikgPz8gcGFuaWMoIlVuYWJsZSB0byBib3Jyb3cgcmVjZWl2ZXIgcmVmZXJlbmNlIikKICAgICAgICAKICAgICAgICAvLyB3aXRoZHJhdyB0aGUgTkZUIGZyb20gdGhlIG93bmVyJydzIGNvbGxlY3Rpb24KICAgICAgICBsZXQgbmZ0IDwtIGNvbGxlY3Rpb25SZWYud2l0aGRyYXcod2l0aGRyYXdJRDogd2l0aGRyYXdJRCkKICAgICAgICAvLyBEZXBvc2l0IHRoZSBORlQgaW4gdGhlIHJlY2lwaWVudCcncyBjb2xsZWN0aW9uCiAgICAgICAgcmVjaXBpZW50UmVmIS5kZXBvc2l0KHRva2VuOiA8LW5mdCkKICAgICAgICBTdG9yYWdlUmVudC50cnlSZWZpbGwocmVjaXBpZW50QWRkcikKICAgIH0KfQ=='
    );
    let config = {
      cadence: code,
      name: 'sendNbaNftV3',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(identifier, t.String),
        arg(recipientAddr, t.Address),
        arg(withdrawID, t.UInt64),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async sendNft(identifier: string, recipientAddr: string, withdrawID: number) {
    const code = decodeCadence(
      'aW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwovLyBUaGlzIHRyYW5zYWN0aW9uIGlzIGZvciB0cmFuc2ZlcnJpbmcgYW5kIE5GVCBmcm9tCi8vIG9uZSBhY2NvdW50IHRvIGFub3RoZXIKCnRyYW5zYWN0aW9uKGlkZW50aWZpZXI6IFN0cmluZywgcmVjaXBpZW50QWRkcjogQWRkcmVzcywgd2l0aGRyYXdJRDogVUludDY0KSB7CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSwgQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IHR5cGUgPSBDb21wb3NpdGVUeXBlKGlkZW50aWZpZXIpCiAgICAgICAgbGV0IGlkZW50aWZpZXJTcGxpdCA9IGlkZW50aWZpZXIuc3BsaXQoc2VwYXJhdG9yOiAiLiIpCiAgICAgICAgbGV0IGFkZHJlc3MgPSBBZGRyZXNzLmZyb21TdHJpbmcoIjB4Ii5jb25jYXQoaWRlbnRpZmllclNwbGl0WzFdKSkhCiAgICAgICAgbGV0IG5hbWUgPSBpZGVudGlmaWVyU3BsaXRbMl0hCgogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KGFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiBuYW1lKQogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIE5GVCBjb250cmFjdCIpCiAgICAgICAgbGV0IGNvbGxlY3Rpb25EYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgICAgcmVzb3VyY2VUeXBlOiBuaWwsCiAgICAgICAgdmlld1R5cGU6IFR5cGU8TWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT4oKQogICAgICAgICkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBORlRDb2xsZWN0aW9uRGF0YSB2aWV3IikKICAgICAgICAvLyBnZXQgdGhlIHJlY2lwaWVudHMgcHVibGljIGFjY291bnQgb2JqZWN0CiAgICAgICAgbGV0IHJlY2lwaWVudCA9IGdldEFjY291bnQocmVjaXBpZW50QWRkcikKCiAgICAgICAgLy8gYm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBORlQgY29sbGVjdGlvbgogICAgICAgIGxldCBjb2xsZWN0aW9uUmVmID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oZnJvbTogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBvd25lcidzIGNvbGxlY3Rpb24iKQoKICAgICAgICAvLyBib3Jyb3cgYSBwdWJsaWMgcmVmZXJlbmNlIHRvIHRoZSByZWNlaXZlcnMgY29sbGVjdGlvbgogICAgICAgIGxldCBkZXBvc2l0UmVmID0gcmVjaXBpZW50CiAgICAgICAgICAgIC5jYXBhYmlsaXRpZXMKICAgICAgICAgICAgLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGNvbGxlY3Rpb25EYXRhLnB1YmxpY1BhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSByZWNlaXZlcidzIGNvbGxlY3Rpb24iKQoKICAgICAgICAvLyB3aXRoZHJhdyB0aGUgTkZUIGZyb20gdGhlIG93bmVyJ3MgY29sbGVjdGlvbgogICAgICAgIGxldCBuZnQgPC0gY29sbGVjdGlvblJlZi53aXRoZHJhdyh3aXRoZHJhd0lEOiB3aXRoZHJhd0lEKQoKICAgICAgICAvLyBEZXBvc2l0IHRoZSBORlQgaW4gdGhlIHJlY2lwaWVudCdzIGNvbGxlY3Rpb24KICAgICAgICBkZXBvc2l0UmVmLmRlcG9zaXQodG9rZW46IDwtbmZ0KQoKICAgIH0KfQ=='
    );
    let config = {
      cadence: code,
      name: 'sendNft',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(identifier, t.String),
        arg(recipientAddr, t.Address),
        arg(withdrawID, t.UInt64),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async createCoa(amount: string) {
    const code = decodeCadence(
      'aW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKCi8vLyBDcmVhdGVzIGEgQ09BIGFuZCBzYXZlcyBpdCBpbiB0aGUgc2lnbmVyJ3MgRmxvdyBhY2NvdW50ICYgcGFzc2luZyB0aGUgZ2l2ZW4gdmFsdWUgb2YgRmxvdyBpbnRvIEZsb3dFVk0KdHJhbnNhY3Rpb24oYW1vdW50OiBVRml4NjQpIHsKICAgIGxldCBzZW50VmF1bHQ6IEBGbG93VG9rZW4uVmF1bHQKICAgIGxldCBhdXRoOiBhdXRoKElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSwgVW5wdWJsaXNoQ2FwYWJpbGl0eSkgJkFjY291bnQKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUsIFVucHVibGlzaENhcGFiaWxpdHkpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IHZhdWx0UmVmID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkZsb3dUb2tlbi5WYXVsdD4oCiAgICAgICAgICAgICAgICBmcm9tOiAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgb3duZXIncyBWYXVsdCEiKQoKICAgICAgICBzZWxmLnNlbnRWYXVsdCA8LSB2YXVsdFJlZi53aXRoZHJhdyhhbW91bnQ6IGFtb3VudCkgYXMhIEBGbG93VG9rZW4uVmF1bHQKICAgICAgICBzZWxmLmF1dGggPSBzaWduZXIKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICBsZXQgY29hIDwtIEVWTS5jcmVhdGVDYWRlbmNlT3duZWRBY2NvdW50KCkKICAgICAgICBjb2EuZGVwb3NpdChmcm9tOiA8LXNlbGYuc2VudFZhdWx0KQoKICAgICAgICBsb2coY29hLmJhbGFuY2UoKS5pbkZMT1coKSkKICAgICAgICBsZXQgc3RvcmFnZVBhdGggPSBTdG9yYWdlUGF0aChpZGVudGlmaWVyOiAiZXZtIikhCiAgICAgICAgbGV0IHB1YmxpY1BhdGggPSBQdWJsaWNQYXRoKGlkZW50aWZpZXI6ICJldm0iKSEKICAgICAgICBzZWxmLmF1dGguc3RvcmFnZS5zYXZlPEBFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oPC1jb2EsIHRvOiBzdG9yYWdlUGF0aCkKICAgICAgICBsZXQgYWRkcmVzc2FibGVDYXAgPSBzZWxmLmF1dGguY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JkVWTS5DYWRlbmNlT3duZWRBY2NvdW50PihzdG9yYWdlUGF0aCkKICAgICAgICBzZWxmLmF1dGguY2FwYWJpbGl0aWVzLnVucHVibGlzaChwdWJsaWNQYXRoKQogICAgICAgIHNlbGYuYXV0aC5jYXBhYmlsaXRpZXMucHVibGlzaChhZGRyZXNzYWJsZUNhcCwgYXQ6IHB1YmxpY1BhdGgpCiAgICB9Cn0='
    );
    let config = {
      cadence: code,
      name: 'createCoa',
      type: 'transaction',
      args: (arg: any, t: any) => [arg(amount, t.UFix64)],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async transferFlowToEvmAddress(
    recipientEVMAddressHex: string,
    amount: string,
    gasLimit: number
  ) {
    const code = decodeCadence(
      'aW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKLy8vIFRyYW5zZmVycyAkRkxPVyBmcm9tIHRoZSBzaWduZXIncyBhY2NvdW50IENhZGVuY2UgRmxvdyBiYWxhbmNlIHRvIHRoZSByZWNpcGllbnQncyBoZXgtZW5jb2RlZCBFVk0gYWRkcmVzcy4KLy8vIE5vdGUgdGhhdCBhIENPQSBtdXN0IGhhdmUgYSAkRkxPVyBiYWxhbmNlIGluIEVWTSBiZWZvcmUgdHJhbnNmZXJyaW5nIHZhbHVlIHRvIGFub3RoZXIgRVZNIGFkZHJlc3MuCi8vLwp0cmFuc2FjdGlvbihyZWNpcGllbnRFVk1BZGRyZXNzSGV4OiBTdHJpbmcsIGFtb3VudDogVUZpeDY0LCBnYXNMaW1pdDogVUludDY0KSB7CgogICAgbGV0IGNvYTogYXV0aChFVk0uV2l0aGRyYXcsIEVWTS5DYWxsKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKICAgIGxldCByZWNpcGllbnRFVk1BZGRyZXNzOiBFVk0uRVZNQWRkcmVzcwogICAgdmFyIHNlbnRWYXVsdDogQEZsb3dUb2tlbi5WYXVsdAoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKEJvcnJvd1ZhbHVlLCBTYXZlVmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogL3N0b3JhZ2UvZXZtKSA9PSBuaWwgewogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKDwtRVZNLmNyZWF0ZUNhZGVuY2VPd25lZEFjY291bnQoKSwgdG86IC9zdG9yYWdlL2V2bSkKICAgICAgICB9CiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uV2l0aGRyYXcsIEVWTS5DYWxsKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBicmlkZ2VkIGFjY291bnQiKQoKICAgICAgICBsZXQgdmF1bHRSZWYgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmRmxvd1Rva2VuLlZhdWx0PigKICAgICAgICAgICAgICAgIGZyb206IC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVmZXJlbmNlIHRvIHRoZSBvd25lcidzIFZhdWx0ISIpCiAgICAgICAgc2VsZi5zZW50VmF1bHQgPC0gdmF1bHRSZWYud2l0aGRyYXcoYW1vdW50OiBhbW91bnQpIGFzISBARmxvd1Rva2VuLlZhdWx0CgogICAgICAgIHNlbGYucmVjaXBpZW50RVZNQWRkcmVzcyA9IEVWTS5hZGRyZXNzRnJvbVN0cmluZyhyZWNpcGllbnRFVk1BZGRyZXNzSGV4KQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIHNlbGYuY29hLmRlcG9zaXQoZnJvbTogPC1zZWxmLnNlbnRWYXVsdCkKICAgICAgICAKICAgICAgICBsZXQgdmFsdWVCYWxhbmNlID0gRVZNLkJhbGFuY2UoYXR0b2Zsb3c6IDApCiAgICAgICAgdmFsdWVCYWxhbmNlLnNldEZMT1coZmxvdzogYW1vdW50KQogICAgICAgIGxldCB0eFJlc3VsdCA9IHNlbGYuY29hLmNhbGwoCiAgICAgICAgICAgIHRvOiBzZWxmLnJlY2lwaWVudEVWTUFkZHJlc3MsCiAgICAgICAgICAgIGRhdGE6IFtdLAogICAgICAgICAgICBnYXNMaW1pdDogZ2FzTGltaXQsCiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZUJhbGFuY2UKICAgICAgICApCiAgICAgICAgYXNzZXJ0KAogICAgICAgICAgICB0eFJlc3VsdC5zdGF0dXMgPT0gRVZNLlN0YXR1cy5mYWlsZWQgfHwgdHhSZXN1bHQuc3RhdHVzID09IEVWTS5TdGF0dXMuc3VjY2Vzc2Z1bCwKICAgICAgICAgICAgbWVzc2FnZTogImV2bV9lcnJvcj0iLmNvbmNhdCh0eFJlc3VsdC5lcnJvck1lc3NhZ2UpLmNvbmNhdCgiXG4iKQogICAgICAgICkKCiAgICB9Cn0='
    );
    let config = {
      cadence: code,
      name: 'transferFlowToEvmAddress',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(recipientEVMAddressHex, t.String),
        arg(amount, t.UFix64),
        arg(gasLimit, t.UInt64),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async callContract(
    toEVMAddressHex: string,
    amount: string,
    data: number[],
    gasLimit: number
  ) {
    const code = decodeCadence(
      'aW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKLy8vIFRyYW5zZmVycyAkRkxPVyBmcm9tIHRoZSBzaWduZXIncyBhY2NvdW50IENhZGVuY2UgRmxvdyBiYWxhbmNlIHRvIHRoZSByZWNpcGllbnQncyBoZXgtZW5jb2RlZCBFVk0gYWRkcmVzcy4KLy8vIE5vdGUgdGhhdCBhIENPQSBtdXN0IGhhdmUgYSAkRkxPVyBiYWxhbmNlIGluIEVWTSBiZWZvcmUgdHJhbnNmZXJyaW5nIHZhbHVlIHRvIGFub3RoZXIgRVZNIGFkZHJlc3MuCi8vLwp0cmFuc2FjdGlvbih0b0VWTUFkZHJlc3NIZXg6IFN0cmluZywgYW1vdW50OiBVRml4NjQsIGRhdGE6IFtVSW50OF0sIGdhc0xpbWl0OiBVSW50NjQpIHsKCiAgICBsZXQgY29hOiBhdXRoKEVWTS5XaXRoZHJhdywgRVZNLkNhbGwpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudAogICAgbGV0IHJlY2lwaWVudEVWTUFkZHJlc3M6IEVWTS5FVk1BZGRyZXNzCgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUsIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiAvc3RvcmFnZS9ldm0pID09IG5pbCB7CiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUoPC1FVk0uY3JlYXRlQ2FkZW5jZU93bmVkQWNjb3VudCgpLCB0bzogL3N0b3JhZ2UvZXZtKQogICAgICAgIH0KICAgICAgICBzZWxmLmNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5XaXRoZHJhdywgRVZNLkNhbGwpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWZlcmVuY2UgdG8gdGhlIHNpZ25lcidzIGJyaWRnZWQgYWNjb3VudCIpCgogICAgICAgIHNlbGYucmVjaXBpZW50RVZNQWRkcmVzcyA9IEVWTS5hZGRyZXNzRnJvbVN0cmluZyh0b0VWTUFkZHJlc3NIZXgpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgaWYgc2VsZi5yZWNpcGllbnRFVk1BZGRyZXNzLmJ5dGVzID09IHNlbGYuY29hLmFkZHJlc3MoKS5ieXRlcyB7CiAgICAgICAgICAgIHJldHVybgogICAgICAgIH0KICAgICAgICBsZXQgdmFsdWVCYWxhbmNlID0gRVZNLkJhbGFuY2UoYXR0b2Zsb3c6IDApCiAgICAgICAgdmFsdWVCYWxhbmNlLnNldEZMT1coZmxvdzogYW1vdW50KQogICAgICAgIGxldCB0eFJlc3VsdCA9IHNlbGYuY29hLmNhbGwoCiAgICAgICAgICAgIHRvOiBzZWxmLnJlY2lwaWVudEVWTUFkZHJlc3MsCiAgICAgICAgICAgIGRhdGE6IGRhdGEsCiAgICAgICAgICAgIGdhc0xpbWl0OiBnYXNMaW1pdCwKICAgICAgICAgICAgdmFsdWU6IHZhbHVlQmFsYW5jZQogICAgICAgICkKICAgICAgICBhc3NlcnQoCiAgICAgICAgICAgIHR4UmVzdWx0LnN0YXR1cyA9PSBFVk0uU3RhdHVzLmZhaWxlZCB8fCB0eFJlc3VsdC5zdGF0dXMgPT0gRVZNLlN0YXR1cy5zdWNjZXNzZnVsLAogICAgICAgICAgICBtZXNzYWdlOiAiZXZtX2Vycm9yPSIuY29uY2F0KHR4UmVzdWx0LmVycm9yTWVzc2FnZSkuY29uY2F0KCJcbiIpCiAgICAgICAgKQogICAgfQp9'
    );
    let config = {
      cadence: code,
      name: 'callContract',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(toEVMAddressHex, t.String),
        arg(amount, t.UFix64),
        arg(data, t.Array(t.UInt8)),
        arg(gasLimit, t.UInt64),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async withdrawCoa(amount: string, address: string) {
    const code = decodeCadence(
      'aW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKdHJhbnNhY3Rpb24oYW1vdW50OiBVRml4NjQsIGFkZHJlc3M6IEFkZHJlc3MpIHsKICAgIGxldCBzZW50VmF1bHQ6IEBGbG93VG9rZW4uVmF1bHQKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChTdG9yYWdlLCBFVk0uV2l0aGRyYXcpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IGNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5XaXRoZHJhdykgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50PigKICAgICAgICAgICAgZnJvbTogL3N0b3JhZ2UvZXZtCiAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWZlcmVuY2UgdG8gdGhlIENPQSEiKQogICAgICAgIGxldCB3aXRoZHJhd0JhbGFuY2UgPSBFVk0uQmFsYW5jZShhdHRvZmxvdzogMCkKICAgICAgICB3aXRoZHJhd0JhbGFuY2Uuc2V0RkxPVyhmbG93OiBhbW91bnQpCiAgICAgICAgc2VsZi5zZW50VmF1bHQgPC0gY29hLndpdGhkcmF3KGJhbGFuY2U6IHdpdGhkcmF3QmFsYW5jZSkgYXMhIEBGbG93VG9rZW4uVmF1bHQKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgICAgICBsZXQgcmVjZWl2ZXIgPSBhY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4oL3B1YmxpYy9mbG93VG9rZW5SZWNlaXZlcikhCiAgICAgICAgcmVjZWl2ZXIuZGVwb3NpdChmcm9tOiA8LXNlbGYuc2VudFZhdWx0KQogICAgfQp9Cg=='
    );
    let config = {
      cadence: code,
      name: 'withdrawCoa',
      type: 'transaction',
      args: (arg: any, t: any) => [arg(amount, t.UFix64), arg(address, t.Address)],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async getAssociatedEvmAddress(identifier: string): Promise<string | undefined> {
    const code = decodeCadence(
      'aW1wb3J0IEVWTSBmcm9tIDB4RVZNCgppbXBvcnQgRVZNVXRpbHMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCi8vLyBSZXR1cm5zIHRoZSBFVk0gYWRkcmVzcyBhc3NvY2lhdGVkIHdpdGggdGhlIGdpdmVuIENhZGVuY2UgdHlwZSAoYXMgaXRzIGlkZW50aWZpZXIgU3RyaW5nKQovLy8KLy8vIEBwYXJhbSB0eXBlSWRlbnRpZmllciBUaGUgQ2FkZW5jZSB0eXBlIGlkZW50aWZpZXIgU3RyaW5nCi8vLwovLy8gQHJldHVybiBUaGUgRVZNIGFkZHJlc3MgYXMgYSBoZXggc3RyaW5nIGlmIHRoZSB0eXBlIGhhcyBhbiBhc3NvY2lhdGVkIEVWTUFkZHJlc3MsIG90aGVyd2lzZSBuaWwKLy8vCmFjY2VzcyhhbGwpCmZ1biBtYWluKGlkZW50aWZpZXI6IFN0cmluZyk6IFN0cmluZz8gewogICAgaWYgbGV0IHR5cGUgPSBDb21wb3NpdGVUeXBlKGlkZW50aWZpZXIpIHsKICAgICAgICBpZiBsZXQgYWRkcmVzcyA9IEZsb3dFVk1CcmlkZ2VDb25maWcuZ2V0RVZNQWRkcmVzc0Fzc29jaWF0ZWQod2l0aDogdHlwZSkgewogICAgICAgICAgICByZXR1cm4gRVZNVXRpbHMuZ2V0RVZNQWRkcmVzc0FzSGV4U3RyaW5nKGFkZHJlc3M6IGFkZHJlc3MpCiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIG5pbAp9'
    );
    let config = {
      cadence: code,
      name: 'getAssociatedEvmAddress',
      type: 'script',
      args: (arg: any, t: any) => [arg(identifier, t.String)],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let result = await fcl.query(config);
    result = await this.runResponseInterceptors(result);
    return result;
  }

  public async evmAddressRequiresOnboarding(evmAddressHex: string): Promise<boolean | undefined> {
    const code = decodeCadence(
      'aW1wb3J0IEVWTVV0aWxzIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhGbG93RVZNQnJpZGdlCgovLy8gUmV0dXJucyB3aGV0aGVyIGEgRVZNIGNvbnRyYWN0IG5lZWRzIHRvIGJlIG9uYm9hcmRlZCB0byB0aGUgRmxvd0VWTUJyaWRnZQovLy8KLy8vIEBwYXJhbSBldm1BZGRyZXNzSGV4OiBUaGUgaGV4LWVuY29kZWQgYWRkcmVzcyBvZiB0aGUgRVZNIGNvbnRyYWN0IGFzIGEgU3RyaW5nIHdpdGhvdXQgMHggcHJlZml4Ci8vLwovLy8gQHJldHVybiBXaGV0aGVyIHRoZSBjb250cmFjdCByZXF1aXJlcyBvbmJvYXJkaW5nIHRvIHRoZSBGbG93RVZNQnJpZGdlIGlmIHRoZSB0eXBlIGlzIGJyaWRnZWFibGUsIG90aGVyd2lzZSBuaWwKLy8vCmFjY2VzcyhhbGwpIGZ1biBtYWluKGV2bUFkZHJlc3NIZXg6IFN0cmluZyk6IEJvb2w/IHsKICAgIGlmIGxldCBhZGRyZXNzID0gRVZNVXRpbHMuZ2V0RVZNQWRkcmVzc0Zyb21IZXhTdHJpbmcoYWRkcmVzczogZXZtQWRkcmVzc0hleCkgewogICAgICAgIHJldHVybiBGbG93RVZNQnJpZGdlLmV2bUFkZHJlc3NSZXF1aXJlc09uYm9hcmRpbmcoYWRkcmVzcykKICAgIH0KICAgIHJldHVybiBuaWwKfQo='
    );
    let config = {
      cadence: code,
      name: 'evmAddressRequiresOnboarding',
      type: 'script',
      args: (arg: any, t: any) => [arg(evmAddressHex, t.String)],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let result = await fcl.query(config);
    result = await this.runResponseInterceptors(result);
    return result;
  }

  public async getAssociatedFlowIdentifier(address: string): Promise<string | undefined> {
    const code = decodeCadence(
      'aW1wb3J0IEVWTSBmcm9tIDB4RVZNCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHhGbG93RVZNQnJpZGdlCgphY2Nlc3MoYWxsKQpmdW4gbWFpbihhZGRyZXNzOiBTdHJpbmcpOiBTdHJpbmc/IHsKICAgIGlmIGxldCB0eXBlSW5mbyA9IEZsb3dFVk1CcmlkZ2VDb25maWcuZ2V0VHlwZUFzc29jaWF0ZWQod2l0aDogRVZNLmFkZHJlc3NGcm9tU3RyaW5nKGFkZHJlc3MpKSB7CiAgICAgICAgcmV0dXJuIHR5cGVJbmZvLmlkZW50aWZpZXIKICAgIH0KICAgIHJldHVybiBuaWwKfQ=='
    );
    let config = {
      cadence: code,
      name: 'getAssociatedFlowIdentifier',
      type: 'script',
      args: (arg: any, t: any) => [arg(address, t.String)],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let result = await fcl.query(config);
    result = await this.runResponseInterceptors(result);
    return result;
  }

  public async getAccountInfo(address: string): Promise<Result> {
    const code = decodeCadence(
      'YWNjZXNzKGFsbCkgc3RydWN0IFJlc3VsdCB7CiAgYWNjZXNzKGFsbCkgbGV0IGFkZHJlc3M6IEFkZHJlc3MKICBhY2Nlc3MoYWxsKSBsZXQgYmFsYW5jZTogVUZpeDY0CiAgYWNjZXNzKGFsbCkgbGV0IGF2YWlsYWJsZUJhbGFuY2U6IFVGaXg2NAogIGFjY2VzcyhhbGwpIGxldCBzdG9yYWdlVXNlZDogVUludDY0CiAgYWNjZXNzKGFsbCkgbGV0IHN0b3JhZ2VDYXBhY2l0eTogVUludDY0CiAgYWNjZXNzKGFsbCkgbGV0IHN0b3JhZ2VGbG93OiBVRml4NjQKCiAgaW5pdCgKICAgIGFkZHJlc3M6IEFkZHJlc3MsCiAgICBiYWxhbmNlOiBVRml4NjQsCiAgICBhdmFpbGFibGVCYWxhbmNlOiBVRml4NjQsCiAgICBzdG9yYWdlVXNlZDogVUludDY0LAogICAgc3RvcmFnZUNhcGFjaXR5OiBVSW50NjQsCiAgICBzdG9yYWdlRmxvdzogVUZpeDY0LAogICkgewogICAgc2VsZi5hZGRyZXNzID0gYWRkcmVzcwogICAgc2VsZi5iYWxhbmNlID0gYmFsYW5jZQogICAgc2VsZi5hdmFpbGFibGVCYWxhbmNlID0gYXZhaWxhYmxlQmFsYW5jZQogICAgc2VsZi5zdG9yYWdlVXNlZCA9IHN0b3JhZ2VVc2VkCiAgICBzZWxmLnN0b3JhZ2VDYXBhY2l0eSA9IHN0b3JhZ2VDYXBhY2l0eQogICAgc2VsZi5zdG9yYWdlRmxvdyA9IHN0b3JhZ2VGbG93CiAgfQp9CgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzKTogUmVzdWx0IHsKICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICByZXR1cm4gUmVzdWx0KAogICAgYWRkcmVzczogYWNjb3VudC5hZGRyZXNzLAogICAgYmFsYW5jZTogYWNjb3VudC5iYWxhbmNlLAogICAgYXZhaWxhYmxlQmFsYW5jZTogYWNjb3VudC5hdmFpbGFibGVCYWxhbmNlLAogICAgc3RvcmFnZVVzZWQ6IGFjY291bnQuc3RvcmFnZS51c2VkLAogICAgc3RvcmFnZUNhcGFjaXR5OiBhY2NvdW50LnN0b3JhZ2UuY2FwYWNpdHksCiAgICBzdG9yYWdlRmxvdzogYWNjb3VudC5iYWxhbmNlIC0gYWNjb3VudC5hdmFpbGFibGVCYWxhbmNlCiAgKQp9'
    );
    let config = {
      cadence: code,
      name: 'getAccountInfo',
      type: 'script',
      args: (arg: any, t: any) => [arg(address, t.Address)],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let result = await fcl.query(config);
    result = await this.runResponseInterceptors(result);
    return result;
  }

  public async getFlowBalanceForAnyAccounts(
    addresses: string[]
  ): Promise<Record<string, string | undefined>> {
    const code = decodeCadence(
      'aW1wb3J0IEVWTSBmcm9tIDB4RVZNCgovLyBHZXQgdGhlIGFjY291bnQgYmFsYW5jZSBmb3IgYSBDT0EgYWNjb3VudAphY2Nlc3MoYWxsKSBmdW4gZ2V0RVZNQmFsYW5jZShfIGFkZHJlc3M6IFN0cmluZyk6IFVGaXg2ND8gewogICAgcmV0dXJuIEVWTS5hZGRyZXNzRnJvbVN0cmluZyhhZGRyZXNzKS5iYWxhbmNlKCkuaW5GTE9XKCkKfQoKLy8gR2V0IHRoZSBhdmFpbGFibGUgYWNjb3VudCBiYWxhbmNlIGZvciBhIEZsb3cgYWNjb3VudAphY2Nlc3MoYWxsKSBmdW4gZ2V0Rmxvd0JhbGFuY2UoXyBhZGRyZXNzOiBTdHJpbmcpOiBVRml4NjQ/IHsKICAgIGlmIGxldCBhY2NvdW50ID0gQWRkcmVzcy5mcm9tU3RyaW5nKGFkZHJlc3MpIHsKICAgICAgICAvLyBVc2UgYXZhaWxhYmxlIGJhbGFuY2UgaW5zdGVhZCBvZiB0b3RhbCBiYWxhbmNlCiAgICAgICAgcmV0dXJuIGdldEFjY291bnQoYWNjb3VudCkuYXZhaWxhYmxlQmFsYW5jZQogICAgfQogICAgcmV0dXJuIDAuMAp9CgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzZXM6IFtTdHJpbmddKToge1N0cmluZzogVUZpeDY0P30gewogICAgbGV0IHJlczoge1N0cmluZzogVUZpeDY0P30gPSB7fQoKICAgIGZvciBhZGRyIGluIGFkZHJlc3NlcyB7CiAgICAgICAgbGV0IGhleCA9IGFkZHJbMV0gPT0gIngiID8gYWRkciA6ICIweCIuY29uY2F0KGFkZHIpCiAgICAgICAgaWYgbGV0IGZsb3dCYWxhbmNlID0gZ2V0Rmxvd0JhbGFuY2UoaGV4KSB7CiAgICAgICAgICAgIHJlc1toZXhdID0gZmxvd0JhbGFuY2UKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiBsZXQgZXZtQmFsYW5jZSA9IGdldEVWTUJhbGFuY2UoaGV4KSB7CiAgICAgICAgICAgICAgICByZXNbaGV4XSA9IGV2bUJhbGFuY2UKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiByZXMKfQ=='
    );
    let config = {
      cadence: code,
      name: 'getFlowBalanceForAnyAccounts',
      type: 'script',
      args: (arg: any, t: any) => [arg(addresses, t.Array(t.String))],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let result = await fcl.query(config);
    result = await this.runResponseInterceptors(result);
    return result;
  }

  public async accountStorage(addr: string): Promise<StorageInfo> {
    const code = decodeCadence(
      'YWNjZXNzKGFsbCkgCnN0cnVjdCBTdG9yYWdlSW5mbyB7CiAgICBhY2Nlc3MoYWxsKSBsZXQgY2FwYWNpdHk6IFVJbnQ2NAogICAgYWNjZXNzKGFsbCkgbGV0IHVzZWQ6IFVJbnQ2NAogICAgYWNjZXNzKGFsbCkgbGV0IGF2YWlsYWJsZTogVUludDY0CgogICAgaW5pdChjYXBhY2l0eTogVUludDY0LCB1c2VkOiBVSW50NjQsIGF2YWlsYWJsZTogVUludDY0KSB7CiAgICAgICAgc2VsZi5jYXBhY2l0eSA9IGNhcGFjaXR5CiAgICAgICAgc2VsZi51c2VkID0gdXNlZAogICAgICAgIHNlbGYuYXZhaWxhYmxlID0gYXZhaWxhYmxlCiAgICB9Cn0KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHI6IEFkZHJlc3MpOiBTdG9yYWdlSW5mbyB7CiAgICBsZXQgYWNjdDogJkFjY291bnQgPSBnZXRBY2NvdW50KGFkZHIpCiAgICByZXR1cm4gU3RvcmFnZUluZm8oY2FwYWNpdHk6IGFjY3Quc3RvcmFnZS5jYXBhY2l0eSwKICAgICAgICAgICAgICAgICAgICAgIHVzZWQ6IGFjY3Quc3RvcmFnZS51c2VkLAogICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlOiBhY2N0LnN0b3JhZ2UuY2FwYWNpdHkgLSBhY2N0LnN0b3JhZ2UudXNlZCkKfSA='
    );
    let config = {
      cadence: code,
      name: 'accountStorage',
      type: 'script',
      args: (arg: any, t: any) => [arg(addr, t.Address)],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let result = await fcl.query(config);
    result = await this.runResponseInterceptors(result);
    return result;
  }

  public async getAccountMinFlow(address: string): Promise<string> {
    const code = decodeCadence(
      'YWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6IFVGaXg2NCB7CiAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgcmV0dXJuIGFjY291bnQuYmFsYW5jZSAtIGFjY291bnQuYXZhaWxhYmxlQmFsYW5jZQp9'
    );
    let config = {
      cadence: code,
      name: 'getAccountMinFlow',
      type: 'script',
      args: (arg: any, t: any) => [arg(address, t.Address)],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let result = await fcl.query(config);
    result = await this.runResponseInterceptors(result);
    return result;
  }

  public async getTokenBalanceStorage(address: string): Promise<Record<string, string>> {
    const code = decodeCadence(
      'aW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KCi8vLyBRdWVyaWVzIGZvciBGVC5WYXVsdCBiYWxhbmNlIG9mIGFsbCBGVC5WYXVsdHMgaW4gdGhlIHNwZWNpZmllZCBhY2NvdW50LgovLy8KYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6IHtTdHJpbmc6IFVGaXg2NH0gewogICAgLy8gR2V0IHRoZSBhY2NvdW50CiAgICBsZXQgYWNjb3VudCA9IGdldEF1dGhBY2NvdW50PGF1dGgoQm9ycm93VmFsdWUpICZBY2NvdW50PihhZGRyZXNzKQogICAgLy8gSW5pdCBmb3IgcmV0dXJuIHZhbHVlCiAgICBsZXQgYmFsYW5jZXM6IHtTdHJpbmc6IFVGaXg2NH0gPSB7fQogICAgLy8gVHJhY2sgc2VlbiBUeXBlcyBpbiBhcnJheQogICAgbGV0IHNlZW46IFtTdHJpbmddID0gW10KICAgIC8vIEFzc2lnbiB0aGUgdHlwZSB3ZSdsbCBuZWVkCiAgICBsZXQgdmF1bHRUeXBlOiBUeXBlID0gVHlwZTxAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9PigpCiAgICAvLyBJdGVyYXRlIG92ZXIgYWxsIHN0b3JlZCBpdGVtcyAmIGdldCB0aGUgcGF0aCBpZiB0aGUgdHlwZSBpcyB3aGF0IHdlJ3JlIGxvb2tpbmcgZm9yCiAgICBhY2NvdW50LnN0b3JhZ2UuZm9yRWFjaFN0b3JlZChmdW4gKHBhdGg6IFN0b3JhZ2VQYXRoLCB0eXBlOiBUeXBlKTogQm9vbCB7CiAgICAgICAgaWYgIXR5cGUuaXNSZWNvdmVyZWQgJiYgKHR5cGUuaXNJbnN0YW5jZSh2YXVsdFR5cGUpIHx8IHR5cGUuaXNTdWJ0eXBlKG9mOiB2YXVsdFR5cGUpKSB7CiAgICAgICAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgcmVzb3VyY2UgJiBpdHMgYmFsYW5jZQogICAgICAgICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50LnN0b3JhZ2UuYm9ycm93PCZ7RnVuZ2libGVUb2tlbi5CYWxhbmNlfT4oZnJvbTogcGF0aCkhCiAgICAgICAgICAgIC8vIEluc2VydCBhIG5ldyB2YWx1ZXMgaWYgaXQncyB0aGUgZmlyc3QgdGltZSB3ZSd2ZSBzZWVuIHRoZSB0eXBlCiAgICAgICAgICAgIGlmICFzZWVuLmNvbnRhaW5zKHR5cGUuaWRlbnRpZmllcikgewogICAgICAgICAgICAgICAgYmFsYW5jZXMuaW5zZXJ0KGtleTogdHlwZS5pZGVudGlmaWVyLCB2YXVsdFJlZi5iYWxhbmNlKQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlIGp1c3QgdXBkYXRlIHRoZSBiYWxhbmNlIG9mIHRoZSB2YXVsdCAodW5saWtlbHkgd2UnbGwgc2VlIHRoZSBzYW1lIHR5cGUgdHdpY2UgaW4KICAgICAgICAgICAgICAgIC8vIHRoZSBzYW1lIGFjY291bnQsIGJ1dCB3ZSB3YW50IHRvIGNvdmVyIHRoZSBjYXNlKQogICAgICAgICAgICAgICAgYmFsYW5jZXNbdHlwZS5pZGVudGlmaWVyXSA9IGJhbGFuY2VzW3R5cGUuaWRlbnRpZmllcl0hICsgdmF1bHRSZWYuYmFsYW5jZQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiB0cnVlCiAgICB9KQoKICAgIC8vIEFkZCBhdmFpbGFibGUgRmxvdyBUb2tlbiBCYWxhbmNlCiAgICBiYWxhbmNlcy5pbnNlcnQoa2V5OiAiYXZhaWxhYmxlRmxvd1Rva2VuIiwgYWNjb3VudC5hdmFpbGFibGVCYWxhbmNlKQoKICAgIHJldHVybiBiYWxhbmNlcwp9'
    );
    let config = {
      cadence: code,
      name: 'getTokenBalanceStorage',
      type: 'script',
      args: (arg: any, t: any) => [arg(address, t.Address)],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let result = await fcl.query(config);
    result = await this.runResponseInterceptors(result);
    return result;
  }

  public async batchSendChildNft(
    identifier: string,
    childAddr: string,
    receiver: string,
    ids: number[]
  ) {
    const code = decodeCadence(
      'aW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwoKCgp0cmFuc2FjdGlvbihpZGVudGlmaWVyOiBTdHJpbmcsIGNoaWxkQWRkcjogQWRkcmVzcywgcmVjZWl2ZXI6IEFkZHJlc3MsIGlkczogW1VJbnQ2NF0pIHsKICBwcmVwYXJlKHNpZ25lcjogYXV0aChTdG9yYWdlKSAmQWNjb3VudCkgewogICAgbGV0IHR5cGUgPSBDb21wb3NpdGVUeXBlKGlkZW50aWZpZXIpCiAgICBsZXQgaWRlbnRpZmllclNwbGl0ID0gaWRlbnRpZmllci5zcGxpdChzZXBhcmF0b3I6ICIuIikKICAgIGxldCBhZGRyZXNzID0gQWRkcmVzcy5mcm9tU3RyaW5nKCIweCIuY29uY2F0KGlkZW50aWZpZXJTcGxpdFsxXSkpIQogICAgbGV0IG5hbWUgPSBpZGVudGlmaWVyU3BsaXRbMl0hCgogICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQoYWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5hbWUpCiAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBORlQgY29udHJhY3QiKQogICAgLy8gc2lnbmVyIGlzIHRoZSBwYXJlbnQgYWNjb3VudAogICAgLy8gZ2V0IHRoZSBtYW5hZ2VyIHJlc291cmNlIGFuZCBib3Jyb3cgY2hpbGRBY2NvdW50CiAgICBsZXQgbSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKICAgICAgICA/PyBwYW5pYygibWFuYWdlciBkb2VzIG5vdCBleGlzdCIpCiAgICBsZXQgY2hpbGRBY2N0ID0gbS5ib3Jyb3dBY2NvdW50KGFkZHI6IGNoaWxkQWRkcikgPz8gcGFuaWMoImNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKICAgIAogICAgbGV0IGNvbGxlY3Rpb25EYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkpIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPwogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IHRoZSB2YXVsdCBkYXRhIHZpZXcgZm9yIDxORlQ+ICIpCgogICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIAogICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+CiAgICBhc3NlcnQocHJvdmlkZXJDYXAuY2hlY2soKSwgbWVzc2FnZTogImludmFsaWQgcHJvdmlkZXIgY2FwYWJpbGl0eSIpCiAgICAKICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgY2hpbGQncyBzdG9yZWQgdmF1bHQKICAgIGxldCBjb2xsZWN0aW9uUmVmID0gcHJvdmlkZXJDYXAuYm9ycm93KCkhCgogICAKICAgIGxldCByZWNlaXZlckFjYyA9IGdldEFjY291bnQocmVjZWl2ZXIpCiAgICBsZXQgcmVjZWl2ZXJSZWYgPSAgcmVjZWl2ZXJBY2MuY2FwYWJpbGl0aWVzLmdldDwme05vbkZ1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9Pihjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKSEuYm9ycm93KCkKICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlY2VpdmVyIHJlZmVyZW5jZSB0byB0aGUgcmVjaXBpZW50J3MgVmF1bHQiKQogICAgCiAgICBmb3IgaWQgaW4gaWRzIHsKICAgICAgICAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICAgICAgbGV0IG5mdCA8LSBjb2xsZWN0aW9uUmVmLndpdGhkcmF3KHdpdGhkcmF3SUQ6IGlkKQogICAgICAgIHJlY2VpdmVyUmVmLmRlcG9zaXQodG9rZW46IDwtIG5mdCkKICAgIH0KICB9Cn0='
    );
    let config = {
      cadence: code,
      name: 'batchSendChildNft',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(identifier, t.String),
        arg(childAddr, t.Address),
        arg(receiver, t.Address),
        arg(ids, t.Array(t.UInt64)),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async sendChildFt(
    vaultIdentifier: string,
    sender: string,
    receiver: string,
    amount: string
  ) {
    const code = decodeCadence(
      'aW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKCi8vIEhDLW93bmVkIGltcG9ydHMKaW1wb3J0IENhcGFiaWxpdHlGYWN0b3J5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzIGZyb20gMHhGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cwoKCgp0cmFuc2FjdGlvbih2YXVsdElkZW50aWZpZXI6U3RyaW5nLCBzZW5kZXI6IEFkZHJlc3MsIHJlY2VpdmVyOiBBZGRyZXNzLCBhbW91bnQ6IFVGaXg2NCApIHsKCiAgbGV0IHBheW1lbnRWYXVsdDogQHtGdW5naWJsZVRva2VuLlZhdWx0fQogIGxldCB2YXVsdERhdGE6IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhCgogIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UpICZBY2NvdW50KSB7CiAgICBsZXQgdHlwZSA9IENvbXBvc2l0ZVR5cGUodmF1bHRJZGVudGlmaWVyKQogICAgbGV0IGlkZW50aWZpZXJTcGxpdCA9IHZhdWx0SWRlbnRpZmllci5zcGxpdChzZXBhcmF0b3I6ICIuIikKICAgIGxldCBhZGRyZXNzID0gQWRkcmVzcy5mcm9tU3RyaW5nKCIweCIuY29uY2F0KGlkZW50aWZpZXJTcGxpdFsxXSkpIQogICAgbGV0IG5hbWUgPSBpZGVudGlmaWVyU3BsaXRbMl0hCgogICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQoYWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5hbWUpCiAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gRnVuZ2libGVUb2tlbiBjb250cmFjdCIpCiAgICBsZXQgbSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBzZW5kZXIpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAKICAgIHNlbGYudmF1bHREYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPigpKSBhcyEgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE/CiAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IHRoZSB2YXVsdCBkYXRhIHZpZXcgZm9yIDxUb2tlbj4gIikKCiAgICAvL2dldCBGdCBjYXAgZnJvbSBjaGlsZCBhY2NvdW50CiAgICBsZXQgY2FwVHlwZSA9IFR5cGU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCiAgICBsZXQgY29udHJvbGxlcklEID0gY2hpbGRBY2N0LmdldENvbnRyb2xsZXJJREZvclR5cGUodHlwZTogY2FwVHlwZSwgZm9yUGF0aDogc2VsZi52YXVsdERhdGEuc3RvcmFnZVBhdGgpCiAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIAogICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+CiAgICBhc3NlcnQocHJvdmlkZXJDYXAuY2hlY2soKSwgbWVzc2FnZTogImludmFsaWQgcHJvdmlkZXIgY2FwYWJpbGl0eSIpCiAgICAKICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgY2hpbGQncyBzdG9yZWQgdmF1bHQKICAgIGxldCB2YXVsdFJlZiA9IHByb3ZpZGVyQ2FwLmJvcnJvdygpIQoKICAgIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgIHNlbGYucGF5bWVudFZhdWx0IDwtIHZhdWx0UmVmLndpdGhkcmF3KGFtb3VudDogYW1vdW50KQogIH0KCiAgZXhlY3V0ZSB7CgogICAgICAvLyBHZXQgdGhlIHJlY2lwaWVudCdzIHB1YmxpYyBhY2NvdW50IG9iamVjdAogICAgICBsZXQgcmVjaXBpZW50ID0gZ2V0QWNjb3VudChyZWNlaXZlcikKCiAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgcmVjaXBpZW50J3MgUmVjZWl2ZXIKICAgICAgbGV0IHJlY2VpdmVyUmVmID0gcmVjaXBpZW50LmNhcGFiaWxpdGllcy5nZXQ8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4oc2VsZi52YXVsdERhdGEucmVjZWl2ZXJQYXRoKSEuYm9ycm93KCkKICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlY2VpdmVyIHJlZmVyZW5jZSB0byB0aGUgcmVjaXBpZW50J3MgVmF1bHQiKQoKICAgICAgLy8gRGVwb3NpdCB0aGUgd2l0aGRyYXduIHRva2VucyBpbiB0aGUgcmVjaXBpZW50J3MgcmVjZWl2ZXIKICAgICAgcmVjZWl2ZXJSZWYuZGVwb3NpdChmcm9tOiA8LXNlbGYucGF5bWVudFZhdWx0KQogIH0KfQog'
    );
    let config = {
      cadence: code,
      name: 'sendChildFt',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(vaultIdentifier, t.String),
        arg(sender, t.Address),
        arg(receiver, t.Address),
        arg(amount, t.UFix64),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async batchTransferNftToChild(identifier: string, childAddr: string, ids: number[]) {
    const code = decodeCadence(
      'aW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwoKCnRyYW5zYWN0aW9uKGlkZW50aWZpZXI6IFN0cmluZywgY2hpbGRBZGRyOiBBZGRyZXNzLCBpZHM6IFtVSW50NjRdKSB7CiAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKICAgIGxldCB0eXBlID0gQ29tcG9zaXRlVHlwZShpZGVudGlmaWVyKQogICAgbGV0IGlkZW50aWZpZXJTcGxpdCA9IGlkZW50aWZpZXIuc3BsaXQoc2VwYXJhdG9yOiAiLiIpCiAgICBsZXQgYWRkcmVzcyA9IEFkZHJlc3MuZnJvbVN0cmluZygiMHgiLmNvbmNhdChpZGVudGlmaWVyU3BsaXRbMV0pKSEKICAgIGxldCBuYW1lID0gaWRlbnRpZmllclNwbGl0WzJdIQoKICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KGFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiBuYW1lKQogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIE5GVCBjb250cmFjdCIpCiAgICAvLyBzaWduZXIgaXMgdGhlIHBhcmVudCBhY2NvdW50CiAgICAvLyBnZXQgdGhlIG1hbmFnZXIgcmVzb3VyY2UgYW5kIGJvcnJvdyBjaGlsZEFjY291bnQKICAgIGxldCBtID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGRBZGRyKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgCiAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldyhyZXNvdXJjZVR5cGU6IG5pbCwgdmlld1R5cGU6IFR5cGU8TWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT4oKSkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/CiAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgdGhlIHZhdWx0IGRhdGEgdmlldyBmb3IgPE5GVD4gIikKCiAgICAvL2dldCBGdCBjYXAgZnJvbSBjaGlsZCBhY2NvdW50CiAgICBsZXQgY2FwVHlwZSA9IFR5cGU8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCiAgICBsZXQgY29udHJvbGxlcklEID0gY2hpbGRBY2N0LmdldENvbnRyb2xsZXJJREZvclR5cGUodHlwZTogY2FwVHlwZSwgZm9yUGF0aDogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm5vIGNvbnRyb2xsZXIgZm91bmQgZm9yIGNhcFR5cGUiKQogICAgCiAgICBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjb250cm9sbGVySUQsIHR5cGU6IGNhcFR5cGUpID8/IHBhbmljKCJubyBjYXAgZm91bmQiKQogICAgbGV0IGNoaWxkQ2FwID0gY2FwIGFzISBDYXBhYmlsaXR5PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4KICAgIGFzc2VydChjaGlsZENhcC5jaGVjaygpLCBtZXNzYWdlOiAiaW52YWxpZCBwcm92aWRlciBjYXBhYmlsaXR5IikKICAgIAogICAgbGV0IHBhcmVudFJlZiA9ICBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pihmcm9tIDogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpIQogICAgbGV0IGNoaWxkUmVmID0gY2hpbGRDYXAuYm9ycm93KCkhCgogICAgZm9yIGlkIGluIGlkcyB7ICAgICAKICAgICAgICAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICAgICAgbGV0IG5mdCA8LSBwYXJlbnRSZWYhLndpdGhkcmF3KHdpdGhkcmF3SUQ6IGlkKSEKICAgICAgICBjaGlsZFJlZi5kZXBvc2l0KHRva2VuOiA8LSBuZnQpCiAgICB9CiAgfQp9'
    );
    let config = {
      cadence: code,
      name: 'batchTransferNftToChild',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(identifier, t.String),
        arg(childAddr, t.Address),
        arg(ids, t.Array(t.UInt64)),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async bridgeChildFtToEvm(vaultIdentifier: string, child: string, amount: string) {
    const code = decodeCadence(
      'aW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4RnVuZ2libGVUb2tlbgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhGbG93RVZNQnJpZGdlCgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhDYXBhYmlsaXR5RmlsdGVyCgoKdHJhbnNhY3Rpb24odmF1bHRJZGVudGlmaWVyOiBTdHJpbmcsIGNoaWxkOiBBZGRyZXNzLCBhbW91bnQ6IFVGaXg2NCkgewoKICAvLyBUaGUgVmF1bHQgcmVzb3VyY2UgdGhhdCBob2xkcyB0aGUgdG9rZW5zIHRoYXQgYXJlIGJlaW5nIHRyYW5zZmVycmVkCiAgbGV0IHBheW1lbnRWYXVsdDogQHtGdW5naWJsZVRva2VuLlZhdWx0fQogIGxldCBjb2E6IGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50CiAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgoKICBwcmVwYXJlKHNpZ25lcjogYXV0aChTdG9yYWdlLCBDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKICAgIC8qIC0tLSBSZWZlcmVuY2UgdGhlIHNpZ25lcidzIENhZGVuY2VPd25lZEFjY291bnQgLS0tICovCiAgICAvLwogICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EKICAgIHNlbGYuY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihmcm9tOiAvc3RvcmFnZS9ldm0pCiAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IENPQSBmcm9tIHByb3ZpZGVkIGdhdGV3YXkgYWRkcmVzcyIpCgogICAgLyogLS0tIFJldHJpZXZlIHRoZSBmdW5kcyAtLS0gKi8KICAgIC8vCiAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIEZ1bmdpYmxlVG9rZW4gVmF1bHQKICAgIGxldCB2YXVsdFR5cGUgPSBDb21wb3NpdGVUeXBlKHZhdWx0SWRlbnRpZmllcikKICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBjb25zdHJ1Y3QgVmF1bHQgdHlwZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KHZhdWx0SWRlbnRpZmllcikpCiAgICAvLyBQYXJzZSB0aGUgVmF1bHQgaWRlbnRpZmllciBpbnRvIGl0cyBjb21wb25lbnRzCiAgICBsZXQgdG9rZW5Db250cmFjdEFkZHJlc3MgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3RBZGRyZXNzKGZyb21UeXBlOiB2YXVsdFR5cGUpCiAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IGFkZHJlc3MgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpKQogICAgbGV0IHRva2VuQ29udHJhY3ROYW1lID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0TmFtZShmcm9tVHlwZTogdmF1bHRUeXBlKQogICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBuYW1lIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQodmF1bHRJZGVudGlmaWVyKSkKCiAgICBsZXQgdmlld1Jlc29sdmVyID0gZ2V0QWNjb3VudCh0b2tlbkNvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IHRva2VuQ29udHJhY3ROYW1lKQogICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBGdW5naWJsZVRva2VuIGNvbnRyYWN0IikKICAgIGxldCB2YXVsdERhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgcmVzb3VyY2VUeXBlOiBuaWwsCiAgICAgIHZpZXdUeXBlOiBUeXBlPEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPigpCiAgICApIGFzISBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIEZUVmF1bHREYXRhIHZpZXciKQogICAgbGV0IHZhdWx0ID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlZhdWx0fT4oCiAgICAgIGZyb206IHZhdWx0RGF0YS5zdG9yYWdlUGF0aAogICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGFjY2VzcyBzaWduZXIncyBGdW5naWJsZVRva2VuIFZhdWx0IikKCiAgICAvLyBzaWduZXIgaXMgdGhlIHBhcmVudCBhY2NvdW50CiAgICAvLyBnZXQgdGhlIG1hbmFnZXIgcmVzb3VyY2UgYW5kIGJvcnJvdyBjaGlsZEFjY291bnQKICAgIGxldCBtID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICA/PyBwYW5pYygibWFuYWdlciBkb2VzIG5vdCBleGlzdCIpCiAgICBsZXQgY2hpbGRBY2N0ID0gbS5ib3Jyb3dBY2NvdW50KGFkZHI6IGNoaWxkKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgCiAgICAvL2dldCBGdCBjYXAgZnJvbSBjaGlsZCBhY2NvdW50CiAgICBsZXQgY2FwVHlwZSA9IFR5cGU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCiAgICBsZXQgY29udHJvbGxlcklEID0gY2hpbGRBY2N0LmdldENvbnRyb2xsZXJJREZvclR5cGUodHlwZTogY2FwVHlwZSwgZm9yUGF0aDogdmF1bHREYXRhLnN0b3JhZ2VQYXRoKQogICAgICA/PyBwYW5pYygibm8gY29udHJvbGxlciBmb3VuZCBmb3IgY2FwVHlwZSIpCiAgICAKICAgIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGNvbnRyb2xsZXJJRCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpCiAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PgogICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgCiAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIGNoaWxkJ3Mgc3RvcmVkIHZhdWx0CiAgICBsZXQgdmF1bHRSZWYgPSBwcm92aWRlckNhcC5ib3Jyb3coKSEKCiAgICAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICB2YXVsdC5kZXBvc2l0KGZyb206IDwtIHZhdWx0UmVmLndpdGhkcmF3KGFtb3VudDogYW1vdW50KSkKICAgIC8vIFdpdGhkcmF3IHRoZSByZXF1ZXN0ZWQgYmFsYW5jZSAmIGNhbGN1bGF0ZSB0aGUgYXBwcm94aW1hdGUgYnJpZGdlIGZlZSBiYXNlZCBvbiBzdG9yYWdlIHVzYWdlCiAgICBsZXQgY3VycmVudFN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgIHNlbGYucGF5bWVudFZhdWx0IDwtIHZhdWx0LndpdGhkcmF3KGFtb3VudDogYW1vdW50KQogICAgbGV0IHdpdGhkcmF3blN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgIC8vIEFwcHJveGltYXRlIHRoZSBicmlkZ2UgZmVlIGJhc2VkIG9uIHRoZSBkaWZmZXJlbmNlIGluIHN0b3JhZ2UgdXNhZ2Ugd2l0aCBzb21lIGJ1ZmZlcgogICAgbGV0IGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoCiAgICAgIGJ5dGVzOiA0MDBfMDAwCiAgICApCgogICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAvLwogICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgKQogICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgIH0KICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgcHJvdmlkZXI6IHByb3ZpZGVyQ2FwQ29weSwKICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICkKICB9CgogIGV4ZWN1dGUgewogICAgc2VsZi5jb2EuZGVwb3NpdFRva2VucygKICAgICAgdmF1bHQ6IDwtc2VsZi5wYXltZW50VmF1bHQsCiAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICkKICAgIC8vIERlc3Ryb3kgdGhlIFNjb3BlZEZUUHJvdmlkZXIKICAgIGRlc3Ryb3kgc2VsZi5zY29wZWRQcm92aWRlcgogIH0KfQo='
    );
    let config = {
      cadence: code,
      name: 'bridgeChildFtToEvm',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(vaultIdentifier, t.String),
        arg(child, t.Address),
        arg(amount, t.UFix64),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async bridgeChildFtToEvmAddress(
    vaultIdentifier: string,
    child: string,
    amount: string,
    recipient: string
  ) {
    const code = decodeCadence(
      'aW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4RnVuZ2libGVUb2tlbgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhGbG93RVZNQnJpZGdlCgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhDYXBhYmlsaXR5RmlsdGVyCgoKdHJhbnNhY3Rpb24odmF1bHRJZGVudGlmaWVyOiBTdHJpbmcsIGNoaWxkOiBBZGRyZXNzLCBhbW91bnQ6IFVGaXg2NCwgcmVjaXBpZW50OlN0cmluZykgewogIC8vIFRoZSBWYXVsdCByZXNvdXJjZSB0aGF0IGhvbGRzIHRoZSB0b2tlbnMgdGhhdCBhcmUgYmVpbmcgdHJhbnNmZXJyZWQKICBsZXQgcGF5bWVudFZhdWx0OiBAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9CiAgLy8gbGV0IGNvYTogYXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKICBsZXQgc2NvcGVkUHJvdmlkZXI6IEBTY29wZWRGVFByb3ZpZGVycy5TY29wZWRGVFByb3ZpZGVyCgogIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UsIENvcHlWYWx1ZSwgQm9ycm93VmFsdWUsIElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBQdWJsaXNoQ2FwYWJpbGl0eSwgU2F2ZVZhbHVlKSAmQWNjb3VudCkgewogICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgQ2FkZW5jZU93bmVkQWNjb3VudCAtLS0gKi8KICAgIC8vCiAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIHNpZ25lcidzIENPQQogICAgLy8gc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgIC8vICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBDT0EgZnJvbSBwcm92aWRlZCBnYXRld2F5IGFkZHJlc3MiKQoKICAgIC8qIC0tLSBSZXRyaWV2ZSB0aGUgZnVuZHMgLS0tICovCiAgICAvLwogICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBGdW5naWJsZVRva2VuIFZhdWx0CiAgICBsZXQgdmF1bHRUeXBlID0gQ29tcG9zaXRlVHlwZSh2YXVsdElkZW50aWZpZXIpCiAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IFZhdWx0IHR5cGUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpKQogICAgLy8gUGFyc2UgdGhlIFZhdWx0IGlkZW50aWZpZXIgaW50byBpdHMgY29tcG9uZW50cwogICAgbGV0IHRva2VuQ29udHJhY3RBZGRyZXNzID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0QWRkcmVzcyhmcm9tVHlwZTogdmF1bHRUeXBlKQogICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBhZGRyZXNzIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQodmF1bHRJZGVudGlmaWVyKSkKICAgIGxldCB0b2tlbkNvbnRyYWN0TmFtZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdE5hbWUoZnJvbVR5cGU6IHZhdWx0VHlwZSkKICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgbmFtZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KHZhdWx0SWRlbnRpZmllcikpCgogICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQodG9rZW5Db250cmFjdEFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiB0b2tlbkNvbnRyYWN0TmFtZSkKICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gRnVuZ2libGVUb2tlbiBjb250cmFjdCIpCiAgICBsZXQgdmF1bHREYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICB2aWV3VHlwZTogVHlwZTxGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT4oKQogICAgKSBhcyEgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBGVFZhdWx0RGF0YSB2aWV3IikKICAgIGxldCB2YXVsdCA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5WYXVsdH0+KAogICAgICBmcm9tOiB2YXVsdERhdGEuc3RvcmFnZVBhdGgKICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBhY2Nlc3Mgc2lnbmVyJ3MgRnVuZ2libGVUb2tlbiBWYXVsdCIpCgogICAgLy8gc2lnbmVyIGlzIHRoZSBwYXJlbnQgYWNjb3VudAogICAgLy8gZ2V0IHRoZSBtYW5hZ2VyIHJlc291cmNlIGFuZCBib3Jyb3cgY2hpbGRBY2NvdW50CiAgICBsZXQgbSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZCkgPz8gcGFuaWMoImNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKICAgIAogICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IHZhdWx0RGF0YS5zdG9yYWdlUGF0aCkKICAgICAgPz8gcGFuaWMoIm5vIGNvbnRyb2xsZXIgZm91bmQgZm9yIGNhcFR5cGUiKQogICAgCiAgICBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjb250cm9sbGVySUQsIHR5cGU6IGNhcFR5cGUpID8/IHBhbmljKCJubyBjYXAgZm91bmQiKQogICAgbGV0IHByb3ZpZGVyQ2FwID0gY2FwIGFzISBDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4KICAgIGFzc2VydChwcm92aWRlckNhcC5jaGVjaygpLCBtZXNzYWdlOiAiaW52YWxpZCBwcm92aWRlciBjYXBhYmlsaXR5IikKICAgIAogICAgLy8gR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSBjaGlsZCdzIHN0b3JlZCB2YXVsdAogICAgbGV0IHZhdWx0UmVmID0gcHJvdmlkZXJDYXAuYm9ycm93KCkhCgogICAgLy8gV2l0aGRyYXcgdG9rZW5zIGZyb20gdGhlIHNpZ25lcidzIHN0b3JlZCB2YXVsdAogICAgdmF1bHQuZGVwb3NpdChmcm9tOiA8LSB2YXVsdFJlZi53aXRoZHJhdyhhbW91bnQ6IGFtb3VudCkpCiAgICAvLyBXaXRoZHJhdyB0aGUgcmVxdWVzdGVkIGJhbGFuY2UgJiBjYWxjdWxhdGUgdGhlIGFwcHJveGltYXRlIGJyaWRnZSBmZWUgYmFzZWQgb24gc3RvcmFnZSB1c2FnZQogICAgbGV0IGN1cnJlbnRTdG9yYWdlVXNhZ2UgPSBzaWduZXIuc3RvcmFnZS51c2VkCiAgICBzZWxmLnBheW1lbnRWYXVsdCA8LSB2YXVsdC53aXRoZHJhdyhhbW91bnQ6IGFtb3VudCkKICAgIGxldCB3aXRoZHJhd25TdG9yYWdlVXNhZ2UgPSBzaWduZXIuc3RvcmFnZS51c2VkCiAgICAvLyBBcHByb3hpbWF0ZSB0aGUgYnJpZGdlIGZlZSBiYXNlZCBvbiB0aGUgZGlmZmVyZW5jZSBpbiBzdG9yYWdlIHVzYWdlIHdpdGggc29tZSBidWZmZXIKICAgIGxldCBhcHByb3hGZWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuY2FsY3VsYXRlQnJpZGdlRmVlKAogICAgICBieXRlczogNDAwXzAwMAogICAgKQoKICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgLy8KICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICkKICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICB9CiAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+Pihmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihhcHByb3hGZWUpCiAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgIGZpbHRlcnM6IFsgcHJvdmlkZXJGaWx0ZXIgXSwKICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICApCiAgfQoKICBleGVjdXRlIHsKICAgIGxldCByZWNpcGllbnRFVk1BZGRyZXNzID0gRVZNLmFkZHJlc3NGcm9tU3RyaW5nKHJlY2lwaWVudCkKICAgIEZsb3dFVk1CcmlkZ2UuYnJpZGdlVG9rZW5zVG9FVk0oCiAgICAgIHZhdWx0OiA8LXNlbGYucGF5bWVudFZhdWx0LAogICAgICB0bzogcmVjaXBpZW50RVZNQWRkcmVzcywKICAgICAgZmVlUHJvdmlkZXI6ICZzZWxmLnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgKQogICAgLy8gRGVzdHJveSB0aGUgU2NvcGVkRlRQcm92aWRlcgogICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgfQp9CiA='
    );
    let config = {
      cadence: code,
      name: 'bridgeChildFtToEvmAddress',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(vaultIdentifier, t.String),
        arg(child, t.Address),
        arg(amount, t.UFix64),
        arg(recipient, t.String),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async sendChildFtWithParent(
    vaultIdentifier: string,
    amount: string,
    to: string,
    child: string
  ) {
    const code = decodeCadence(
      'aW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweE1ldGFkYXRhVmlld3MKCnRyYW5zYWN0aW9uKHZhdWx0SWRlbnRpZmllcjpTdHJpbmcsIGFtb3VudDogVUZpeDY0LCB0bzogQWRkcmVzcywgY2hpbGQ6IEFkZHJlc3MpIHsKICAvLyBUaGUgVmF1bHQgcmVzb3VyY2UgdGhhdCBob2xkcyB0aGUgdG9rZW5zIHRoYXQgYXJlIGJlaW5nIHRyYW5zZmVycmVkCiAgbGV0IHBheW1lbnRWYXVsdDogQHtGdW5naWJsZVRva2VuLlZhdWx0fQogIGxldCB2YXVsdERhdGE6IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhCgogIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UpICZBY2NvdW50KSB7CgogICAgbGV0IHR5cGUgPSBDb21wb3NpdGVUeXBlKHZhdWx0SWRlbnRpZmllcikKICAgIGxldCBpZGVudGlmaWVyU3BsaXQgPSB2YXVsdElkZW50aWZpZXIuc3BsaXQoc2VwYXJhdG9yOiAiLiIpCiAgICBsZXQgYWRkcmVzcyA9IEFkZHJlc3MuZnJvbVN0cmluZygiMHgiLmNvbmNhdChpZGVudGlmaWVyU3BsaXRbMV0pKSEKICAgIGxldCBuYW1lID0gaWRlbnRpZmllclNwbGl0WzJdIQoKICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KGFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiBuYW1lKQogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIEZ1bmdpYmxlVG9rZW4gY29udHJhY3QiKQogICAgLy8gc2lnbmVyIGlzIHRoZSBwYXJlbnQgYWNjb3VudAogICAgLy8gZ2V0IHRoZSBtYW5hZ2VyIHJlc291cmNlIGFuZCBib3Jyb3cgY2hpbGRBY2NvdW50CiAgICBsZXQgbSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZCkgPz8gcGFuaWMoImNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKICAgIAogICAgc2VsZi52YXVsdERhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldyhyZXNvdXJjZVR5cGU6IG5pbCwgdmlld1R5cGU6IFR5cGU8RnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE+KCkpIGFzISBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT8KICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgdGhlIHZhdWx0IGRhdGEgdmlldyBmb3IgRXhhbXBsZVRva2VuIikKCiAgICAvL2dldCBGdCBjYXAgZnJvbSBjaGlsZCBhY2NvdW50CiAgICBsZXQgY2FwVHlwZSA9IFR5cGU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCiAgICBsZXQgY29udHJvbGxlcklEID0gY2hpbGRBY2N0LmdldENvbnRyb2xsZXJJREZvclR5cGUodHlwZTogY2FwVHlwZSwgZm9yUGF0aDogc2VsZi52YXVsdERhdGEuc3RvcmFnZVBhdGgpCiAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIAogICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+CiAgICBhc3NlcnQocHJvdmlkZXJDYXAuY2hlY2soKSwgbWVzc2FnZTogImludmFsaWQgcHJvdmlkZXIgY2FwYWJpbGl0eSIpCiAgICAKICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgY2hpbGQncyBzdG9yZWQgdmF1bHQKICAgIGxldCB2YXVsdFJlZiA9IHByb3ZpZGVyQ2FwLmJvcnJvdygpIQoKICAgIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgIHNlbGYucGF5bWVudFZhdWx0IDwtIHZhdWx0UmVmLndpdGhkcmF3KGFtb3VudDogYW1vdW50KQogIH0KCiAgZXhlY3V0ZSB7CiAgICAvLyBHZXQgdGhlIHJlY2lwaWVudCdzIHB1YmxpYyBhY2NvdW50IG9iamVjdAogICAgbGV0IHJlY2lwaWVudCA9IGdldEFjY291bnQodG8pCgogICAgLy8gR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSByZWNpcGllbnQncyBSZWNlaXZlcgogICAgbGV0IHJlY2VpdmVyUmVmID0gcmVjaXBpZW50LmNhcGFiaWxpdGllcy5nZXQ8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4oc2VsZi52YXVsdERhdGEucmVjZWl2ZXJQYXRoKSEuYm9ycm93KCkKICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVjZWl2ZXIgcmVmZXJlbmNlIHRvIHRoZSByZWNpcGllbnQncyBWYXVsdCIpCgogICAgLy8gRGVwb3NpdCB0aGUgd2l0aGRyYXduIHRva2VucyBpbiB0aGUgcmVjaXBpZW50J3MgcmVjZWl2ZXIKICAgIHJlY2VpdmVyUmVmLmRlcG9zaXQoZnJvbTogPC1zZWxmLnBheW1lbnRWYXVsdCkKICB9Cn0KIA=='
    );
    let config = {
      cadence: code,
      name: 'sendChildFtWithParent',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(vaultIdentifier, t.String),
        arg(amount, t.UFix64),
        arg(to, t.Address),
        arg(child, t.Address),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async transferChildNft(identifier: string, address: string, id: number) {
    const code = decodeCadence(
      'aW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwoKdHJhbnNhY3Rpb24oaWRlbnRpZmllcjogU3RyaW5nLCBhZGRyZXNzOiBBZGRyZXNzLCBpZDogVUludDY0ICkgewoKICBwcmVwYXJlKHNpZ25lcjogYXV0aChTdG9yYWdlKSAmQWNjb3VudCkgewogICAgbGV0IHR5cGUgPSBDb21wb3NpdGVUeXBlKGlkZW50aWZpZXIpCiAgICBsZXQgaWRlbnRpZmllclNwbGl0ID0gaWRlbnRpZmllci5zcGxpdChzZXBhcmF0b3I6ICIuIikKICAgIGxldCBhZGRyZXNzID0gQWRkcmVzcy5mcm9tU3RyaW5nKCIweCIuY29uY2F0KGlkZW50aWZpZXJTcGxpdFsxXSkpIQogICAgbGV0IG5hbWUgPSBpZGVudGlmaWVyU3BsaXRbMl0hCgogICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQoYWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5hbWUpCiAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBORlQgY29udHJhY3QiKQogICAgLy8gc2lnbmVyIGlzIHRoZSBwYXJlbnQgYWNjb3VudAogICAgLy8gZ2V0IHRoZSBtYW5hZ2VyIHJlc291cmNlIGFuZCBib3Jyb3cgY2hpbGRBY2NvdW50CiAgICBsZXQgbSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKICAgICAgICA/PyBwYW5pYygibWFuYWdlciBkb2VzIG5vdCBleGlzdCIpCiAgICBsZXQgY2hpbGRBY2N0ID0gbS5ib3Jyb3dBY2NvdW50KGFkZHI6IGFkZHJlc3MpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAKICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KHJlc291cmNlVHlwZTogbmlsLCB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpKSBhcyEgTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT8KICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCB0aGUgdmF1bHQgZGF0YSB2aWV3IGZvciA8TkZUPiAiKQoKICAgIC8vZ2V0IEZ0IGNhcCBmcm9tIGNoaWxkIGFjY291bnQKICAgIGxldCBjYXBUeXBlID0gVHlwZTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KCkKICAgIGxldCBjb250cm9sbGVySUQgPSBjaGlsZEFjY3QuZ2V0Q29udHJvbGxlcklERm9yVHlwZSh0eXBlOiBjYXBUeXBlLCBmb3JQYXRoOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICA/PyBwYW5pYygibm8gY29udHJvbGxlciBmb3VuZCBmb3IgY2FwVHlwZSIpCiAgICAKICAgIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGNvbnRyb2xsZXJJRCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpCiAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PgogICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgCiAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIGNoaWxkJ3Mgc3RvcmVkIHZhdWx0CiAgICBsZXQgY29sbGVjdGlvblJlZiA9IHByb3ZpZGVyQ2FwLmJvcnJvdygpIQoKICAgIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgIGxldCBuZnQgPC0gY29sbGVjdGlvblJlZi53aXRoZHJhdyh3aXRoZHJhd0lEOiBpZCkKICAgIGxldCByZWNlaXZlclJlZiA9ICBzaWduZXIuY2FwYWJpbGl0aWVzLmdldDwme05vbkZ1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9Pihjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKSEuYm9ycm93KCkKICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlY2VpdmVyIHJlZmVyZW5jZSB0byB0aGUgcmVjaXBpZW50J3MgVmF1bHQiKQogICAgcmVjZWl2ZXJSZWYuZGVwb3NpdCh0b2tlbjogPC0gbmZ0KQogIH0KfQ=='
    );
    let config = {
      cadence: code,
      name: 'transferChildNft',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(identifier, t.String),
        arg(address, t.Address),
        arg(id, t.UInt64),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async bridgeChildFtFromEvm(vaultIdentifier: string, child: string, amount: string) {
    const code = decodeCadence(
      'aW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4RnVuZ2libGVUb2tlbgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhGbG93RVZNQnJpZGdlCgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCgppbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4SHlicmlkQ3VzdG9keQppbXBvcnQgQ2FwYWJpbGl0eUZpbHRlciBmcm9tIDB4SHlicmlkQ3VzdG9keQoKdHJhbnNhY3Rpb24odmF1bHRJZGVudGlmaWVyOiBTdHJpbmcsIGNoaWxkOiBBZGRyZXNzLCBhbW91bnQ6IFVJbnQyNTYpIHsKICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSwgQ29weVZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSwgVW5wdWJsaXNoQ2FwYWJpbGl0eSkgJkFjY291bnQpIHsKICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgQ09BCiAgICBsZXQgY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihmcm9tOiAvc3RvcmFnZS9ldm0pCiAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IENPQSBmcm9tIHByb3ZpZGVkIGdhdGV3YXkgYWRkcmVzcyIpCiAgICBsZXQgdmF1bHRUeXBlID0gQ29tcG9zaXRlVHlwZSh2YXVsdElkZW50aWZpZXIpCiAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IFZhdWx0IHR5cGUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpKQogICAgLy8gUGFyc2UgdGhlIFZhdWx0IGlkZW50aWZpZXIgaW50byBpdHMgY29tcG9uZW50cwogICAgbGV0IHRva2VuQ29udHJhY3RBZGRyZXNzID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0QWRkcmVzcyhmcm9tVHlwZTogdmF1bHRUeXBlKQogICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBhZGRyZXNzIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQodmF1bHRJZGVudGlmaWVyKSkKICAgIGxldCB0b2tlbkNvbnRyYWN0TmFtZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdE5hbWUoZnJvbVR5cGU6IHZhdWx0VHlwZSkKICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgbmFtZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KHZhdWx0SWRlbnRpZmllcikpCgogICAgLyogLS0tIFJldHJpZXZlIHRoZSBmdW5kcyAtLS0gKi8KICAgIC8vCiAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIEZ1bmdpYmxlVG9rZW4gVmF1bHQKICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KHRva2VuQ29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogdG9rZW5Db250cmFjdE5hbWUpCiAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIEZ1bmdpYmxlVG9rZW4gY29udHJhY3QiKQogICAgbGV0IHZhdWx0RGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICByZXNvdXJjZVR5cGU6IG5pbCwKICAgICAgdmlld1R5cGU6IFR5cGU8RnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE+KCkKICAgICkgYXMhIEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgRlRWYXVsdERhdGEgdmlldyIpCgogICAgLy8gc2lnbmVyIGlzIHRoZSBwYXJlbnQgYWNjb3VudAogICAgLy8gZ2V0IHRoZSBtYW5hZ2VyIHJlc291cmNlIGFuZCBib3Jyb3cgY2hpbGRBY2NvdW50CiAgICBsZXQgbSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZCkgPz8gcGFuaWMoImNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKICAgIAogICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgbGV0IGNhcFR5cGUgPSBUeXBlPCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KCkKICAgIGxldCBjb250cm9sbGVySUQgPSBjaGlsZEFjY3QuZ2V0Q29udHJvbGxlcklERm9yVHlwZSh0eXBlOiBjYXBUeXBlLCBmb3JQYXRoOiB2YXVsdERhdGEuc3RvcmFnZVBhdGgpCiAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIAogICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9PgogICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgCiAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIGNoaWxkJ3Mgc3RvcmVkIHZhdWx0CiAgICBsZXQgdmF1bHRSZWYgPSBwcm92aWRlckNhcC5ib3Jyb3coKSEKCiAgICBsZXQgYXBwcm94RmVlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmNhbGN1bGF0ZUJyaWRnZUZlZShieXRlczogNDAwXzAwMCkKICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgLy8KICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICkKICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICB9CiAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgZnJvbTogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aAogICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihhcHByb3hGZWUpCiAgICBsZXQgc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgcHJvdmlkZXI6IHByb3ZpZGVyQ2FwQ29weSwKICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICkKCiAgICBsZXQgdmF1bHQ6IEB7RnVuZ2libGVUb2tlbi5WYXVsdH0gPC0gY29hLndpdGhkcmF3VG9rZW5zKAogICAgICB0eXBlOiB2YXVsdFR5cGUsCiAgICAgIGFtb3VudDogYW1vdW50LAogICAgICBmZWVQcm92aWRlcjogJnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgKQoKICAgIHZhdWx0UmVmLmRlcG9zaXQoZnJvbTogPC0gdmF1bHQpCiAgICBkZXN0cm95IHNjb3BlZFByb3ZpZGVyCiAgfQp9CiA='
    );
    let config = {
      cadence: code,
      name: 'bridgeChildFtFromEvm',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(vaultIdentifier, t.String),
        arg(child, t.Address),
        arg(amount, t.UInt256),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async bridgeChildNftFromEvm(nftIdentifier: string, child: string, id: string) {
    const code = decodeCadence(
      'aW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4RnVuZ2libGVUb2tlbgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhGbG93RVZNQnJpZGdlCgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhIeWJyaWRDdXN0b2R5Cgp0cmFuc2FjdGlvbihuZnRJZGVudGlmaWVyOiBTdHJpbmcsIGNoaWxkOiBBZGRyZXNzLCBpZDogVUludDI1NikgewogIAogIHByZXBhcmUoc2lnbmVyOiBhdXRoKEJvcnJvd1ZhbHVlLCBDb3B5VmFsdWUsIElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBQdWJsaXNoQ2FwYWJpbGl0eSwgU2F2ZVZhbHVlLCBVbnB1Ymxpc2hDYXBhYmlsaXR5KSAmQWNjb3VudCkgewogICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgQ2FkZW5jZU93bmVkQWNjb3VudCAtLS0gKi8KICAgIC8vCiAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIHNpZ25lcidzIENPQQogICAgbGV0IGNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKQogICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBDT0EgZnJvbSBwcm92aWRlZCBnYXRld2F5IGFkZHJlc3MiKQogICAgCiAgICAvLyBDb25zdHJ1Y3QgdGhlIE5GVCB0eXBlIGZyb20gdGhlIHByb3ZpZGVkIGlkZW50aWZpZXIKICAgIGxldCBuZnRUeXBlID0gQ29tcG9zaXRlVHlwZShuZnRJZGVudGlmaWVyKQogICAgICA/PyBwYW5pYygiQ291bGQgbm90IGNvbnN0cnVjdCBORlQgdHlwZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQogICAgbGV0IG5mdENvbnRyYWN0QWRkcmVzcyA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdEFkZHJlc3MoZnJvbVR5cGU6IG5mdFR5cGUpCiAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IGFkZHJlc3MgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKICAgIGxldCBuZnRDb250cmFjdE5hbWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3ROYW1lKGZyb21UeXBlOiBuZnRUeXBlKQogICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBuYW1lIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCgogICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgID8/IHBhbmljKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGQpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAgICAgCiAgICAgICAKICAgIC8qIC0tLSBSZXRyaWV2ZSB0aGUgTkZUIC0tLSAqLwogICAgLy8KICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgTkZUIGNvbGxlY3Rpb24sIGNvbmZpZ3VyaW5nIGlmIG5lY2Vzc2FyeQogICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQobmZ0Q29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogbmZ0Q29udHJhY3ROYW1lKQogICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBORlQgY29udHJhY3QiKQogICAgbGV0IGNvbGxlY3Rpb25EYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpCiAgICApIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgTkZUQ29sbGVjdGlvbkRhdGEgdmlldyIpCiAgICAgICAgCiAgICAgICAgLy8gbGV0IHJlY2VpdmVyID0gZ2V0QWNjb3VudChjaGlsZCkuY2FwYWJpbGl0aWVzLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9Pihjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKQogICAgICAgIC8vICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBSZWNlaXZlciBmcm9tIHJlY2lwaWVudCdzIHB1YmxpYyBjYXBhYmlsaXR5IHBhdGgiKQoKCgogICAgbGV0IGNhcFR5cGUgPSBUeXBlPCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4oKQogICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICA/PyBwYW5pYygibm8gY29udHJvbGxlciBmb3VuZCBmb3IgY2FwVHlwZSIpCiAgICAKICAgIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGNvbnRyb2xsZXJJRCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpCiAgICBsZXQgcHVibGljQ2FwID0gY2FwIGFzISBDYXBhYmlsaXR5PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4KICAgIGFzc2VydChwdWJsaWNDYXAuY2hlY2soKSwgbWVzc2FnZTogImludmFsaWQgcHVibGljIGNhcGFiaWxpdHkiKQogICAgCiAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIGNoaWxkJ3Mgc3RvcmVkIHZhdWx0CiAgICBsZXQgY29sbGVjdGlvblJlZiA9IHB1YmxpY0NhcC5ib3Jyb3coKSEKCiAgICAgIAogICAgLy8gLy8gV2l0aGRyYXcgdG9rZW5zIGZyb20gdGhlIHNpZ25lcidzIHN0b3JlZCB2YXVsdAogICAgbGV0IGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoYnl0ZXM6IDQwMF8wMDApCgogICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAvLwogICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgKQogICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgIH0KICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgIGxldCBzY29wZWRQcm92aWRlciA8LSBTY29wZWRGVFByb3ZpZGVycy5jcmVhdGVTY29wZWRGVFByb3ZpZGVyKAogICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgIGV4cGlyYXRpb246IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCArIDEuMAogICAgKQoKICAgIGxldCBuZnQ6IEB7Tm9uRnVuZ2libGVUb2tlbi5ORlR9IDwtIGNvYS53aXRoZHJhd05GVCgKICAgICAgdHlwZTogbmZ0VHlwZSwKICAgICAgaWQ6IGlkLAogICAgICBmZWVQcm92aWRlcjogJnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgKQoKICAgIGFzc2VydCgKICAgICAgbmZ0LmdldFR5cGUoKSA9PSBuZnRUeXBlLAogICAgICBtZXNzYWdlOiAiQnJpZGdlZCBuZnQgdHlwZSBtaXNtYXRjaCAtIHJlcXVlc3d0ZWQ6ICIuY29uY2F0KG5mdFR5cGUuaWRlbnRpZmllcikKICAgICAgICAuY29uY2F0KCIsIHJlY2VpdmVkOiAiKS5jb25jYXQobmZ0LmdldFR5cGUoKS5pZGVudGlmaWVyKQogICAgKQoKICAgIGNvbGxlY3Rpb25SZWYuZGVwb3NpdCh0b2tlbjogPC0gbmZ0KQogICAgLy8gRGVzdHJveSB0aGUgU2NvcGVkRlRQcm92aWRlcgogICAgZGVzdHJveSBzY29wZWRQcm92aWRlcgogICAgfQp9Cg=='
    );
    let config = {
      cadence: code,
      name: 'bridgeChildNftFromEvm',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(nftIdentifier, t.String),
        arg(child, t.Address),
        arg(id, t.UInt256),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async bridgeChildNftToEvm(nftIdentifier: string, id: number, child: string) {
    const code = decodeCadence(
      'aW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4RnVuZ2libGVUb2tlbgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhGbG93RVZNQnJpZGdlCgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhDYXBhYmlsaXR5RmlsdGVyCgoKCnRyYW5zYWN0aW9uKG5mdElkZW50aWZpZXI6IFN0cmluZywgaWQ6IFVJbnQ2NCwgY2hpbGQ6IEFkZHJlc3MpIHsKICAKICBsZXQgbmZ0OiBAe05vbkZ1bmdpYmxlVG9rZW4uTkZUfQogIGxldCBjb2E6IGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50CiAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgogIAogIHByZXBhcmUoc2lnbmVyOiBhdXRoKENvcHlWYWx1ZSwgQm9ycm93VmFsdWUsIElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBQdWJsaXNoQ2FwYWJpbGl0eSwgU2F2ZVZhbHVlKSAmQWNjb3VudCkgewogICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgQ2FkZW5jZU93bmVkQWNjb3VudCAtLS0gKi8KICAgIC8vCiAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIHNpZ25lcidzIENPQQogICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgQ09BIGZyb20gcHJvdmlkZWQgZ2F0ZXdheSBhZGRyZXNzIikKICAgIAogICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgID8/IHBhbmljKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGQpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAKICAgIC8vIENvbnN0cnVjdCB0aGUgTkZUIHR5cGUgZnJvbSB0aGUgcHJvdmlkZWQgaWRlbnRpZmllcgogICAgbGV0IG5mdFR5cGUgPSBDb21wb3NpdGVUeXBlKG5mdElkZW50aWZpZXIpCiAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IE5GVCB0eXBlIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCiAgICBsZXQgbmZ0Q29udHJhY3RBZGRyZXNzID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0QWRkcmVzcyhmcm9tVHlwZTogbmZ0VHlwZSkKICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgYWRkcmVzcyBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQogICAgbGV0IG5mdENvbnRyYWN0TmFtZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdE5hbWUoZnJvbVR5cGU6IG5mdFR5cGUpCiAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IG5hbWUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKCiAgICAKICAgIC8qIC0tLSBSZXRyaWV2ZSB0aGUgTkZUIC0tLSAqLwogICAgLy8KICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgTkZUIGNvbGxlY3Rpb24sIGNvbmZpZ3VyaW5nIGlmIG5lY2Vzc2FyeQogICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQobmZ0Q29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogbmZ0Q29udHJhY3ROYW1lKQogICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBORlQgY29udHJhY3QiKQogICAgbGV0IGNvbGxlY3Rpb25EYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpCiAgICApIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgTkZUQ29sbGVjdGlvbkRhdGEgdmlldyIpCiAgICBsZXQgY29sbGVjdGlvbiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oCiAgICAgIGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoCiAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYWNjZXNzIHNpZ25lcidzIE5GVCBDb2xsZWN0aW9uIikKCgogICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICA/PyBwYW5pYygibm8gY29udHJvbGxlciBmb3VuZCBmb3IgY2FwVHlwZSIpCiAgICAKICAgIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGNvbnRyb2xsZXJJRCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpCiAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PgogICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgCiAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIGNoaWxkJ3Mgc3RvcmVkIHZhdWx0CiAgICBsZXQgY29sbGVjdGlvblJlZiA9IHByb3ZpZGVyQ2FwLmJvcnJvdygpIQogICAgbGV0IGNoaWxkTmZ0IDwtIGNvbGxlY3Rpb25SZWYud2l0aGRyYXcod2l0aGRyYXdJRDogaWQpCiAgICBjb2xsZWN0aW9uLmRlcG9zaXQodG9rZW46IDwtY2hpbGROZnQpCiAgICAvLyAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICBsZXQgY3VycmVudFN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgIHNlbGYubmZ0IDwtIGNvbGxlY3Rpb24ud2l0aGRyYXcod2l0aGRyYXdJRDogaWQpCiAgICBsZXQgd2l0aGRyYXduU3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgbGV0IGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoCiAgICAgIGJ5dGVzOiA0MDBfMDAwCiAgICApCiAgIAogICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAvLwogICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgKQogICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgIH0KICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgcHJvdmlkZXI6IHByb3ZpZGVyQ2FwQ29weSwKICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgIC8vIEV4ZWN1dGUgdGhlIGJyaWRnZQogICAgc2VsZi5jb2EuZGVwb3NpdE5GVCgKICAgICAgbmZ0OiA8LXNlbGYubmZ0LAogICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICApCiAgICAvLyBEZXN0cm95IHRoZSBTY29wZWRGVFByb3ZpZGVyCiAgICBkZXN0cm95IHNlbGYuc2NvcGVkUHJvdmlkZXIKICB9Cn0K'
    );
    let config = {
      cadence: code,
      name: 'bridgeChildNftToEvm',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(nftIdentifier, t.String),
        arg(id, t.UInt64),
        arg(child, t.Address),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async transferNftToChild(identifier: string, childAddr: string, id: number) {
    const code = decodeCadence(
      'aW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwoKdHJhbnNhY3Rpb24oaWRlbnRpZmllcjogU3RyaW5nLCBjaGlsZEFkZHI6IEFkZHJlc3MsIGlkOiBVSW50NjQpIHsKICBwcmVwYXJlKHNpZ25lcjogYXV0aChTdG9yYWdlKSAmQWNjb3VudCkgewogICAgbGV0IHR5cGUgPSBDb21wb3NpdGVUeXBlKGlkZW50aWZpZXIpCiAgICBsZXQgaWRlbnRpZmllclNwbGl0ID0gaWRlbnRpZmllci5zcGxpdChzZXBhcmF0b3I6ICIuIikKICAgIGxldCBhZGRyZXNzID0gQWRkcmVzcy5mcm9tU3RyaW5nKCIweCIuY29uY2F0KGlkZW50aWZpZXJTcGxpdFsxXSkpIQogICAgbGV0IG5hbWUgPSBpZGVudGlmaWVyU3BsaXRbMl0hCgogICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQoYWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5hbWUpCiAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBORlQgY29udHJhY3QiKQogICAgLy8gc2lnbmVyIGlzIHRoZSBwYXJlbnQgYWNjb3VudAogICAgLy8gZ2V0IHRoZSBtYW5hZ2VyIHJlc291cmNlIGFuZCBib3Jyb3cgY2hpbGRBY2NvdW50CiAgICBsZXQgbSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKICAgICAgICA/PyBwYW5pYygibWFuYWdlciBkb2VzIG5vdCBleGlzdCIpCiAgICBsZXQgY2hpbGRBY2N0ID0gbS5ib3Jyb3dBY2NvdW50KGFkZHI6IGNoaWxkQWRkcikgPz8gcGFuaWMoImNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKICAgIAogICAgbGV0IGNvbGxlY3Rpb25EYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkpIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPwogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IHRoZSB2YXVsdCBkYXRhIHZpZXcgZm9yIDxORlQ+ICIpCgogICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIAogICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgIGxldCBjaGlsZENhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+CiAgICBhc3NlcnQoY2hpbGRDYXAuY2hlY2soKSwgbWVzc2FnZTogImludmFsaWQgcHJvdmlkZXIgY2FwYWJpbGl0eSIpCiAgICAKICAgIGxldCBwYXJlbnRSZWYgPSAgc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oZnJvbSA6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKSEKICAgIGxldCBjaGlsZFJlZiA9IGNoaWxkQ2FwLmJvcnJvdygpIQogICAgLy8gV2l0aGRyYXcgdG9rZW5zIGZyb20gdGhlIHNpZ25lcidzIHN0b3JlZCB2YXVsdAogICAgbGV0IG5mdCA8LSBwYXJlbnRSZWYhLndpdGhkcmF3KHdpdGhkcmF3SUQ6IGlkKSEKICAgIAogICAgY2hpbGRSZWYuZGVwb3NpdCh0b2tlbjogPC0gbmZ0KQogIH0KfQ=='
    );
    let config = {
      cadence: code,
      name: 'transferNftToChild',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(identifier, t.String),
        arg(childAddr, t.Address),
        arg(id, t.UInt64),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async batchBridgeChildNftToEvmAddress(
    nftIdentifier: string,
    child: string,
    ids: number[],
    recipient: string
  ) {
    const code = decodeCadence(
      'aW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4RnVuZ2libGVUb2tlbgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhGbG93RVZNQnJpZGdlCgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhDYXBhYmlsaXR5RmlsdGVyCgoKCnRyYW5zYWN0aW9uKG5mdElkZW50aWZpZXI6IFN0cmluZywgY2hpbGQ6IEFkZHJlc3MsIGlkczogW1VJbnQ2NF0sIHJlY2lwaWVudDpTdHJpbmcpIHsKICBwcmVwYXJlKHNpZ25lcjogYXV0aChDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKICAgIC8qIC0tLSBSZWZlcmVuY2UgdGhlIHNpZ25lcidzIENhZGVuY2VPd25lZEFjY291bnQgLS0tICovCiAgICAvLwogICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EKICAgIC8vIGxldCBjb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgIC8vICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBDT0EgZnJvbSBwcm92aWRlZCBnYXRld2F5IGFkZHJlc3MiKQogICAgCiAgICBsZXQgbSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZCkgPz8gcGFuaWMoImNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKICAgIAogICAgLy8gQ29uc3RydWN0IHRoZSBORlQgdHlwZSBmcm9tIHRoZSBwcm92aWRlZCBpZGVudGlmaWVyCiAgICBsZXQgbmZ0VHlwZSA9IENvbXBvc2l0ZVR5cGUobmZ0SWRlbnRpZmllcikKICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBjb25zdHJ1Y3QgTkZUIHR5cGUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKICAgIGxldCBuZnRDb250cmFjdEFkZHJlc3MgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3RBZGRyZXNzKGZyb21UeXBlOiBuZnRUeXBlKQogICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBhZGRyZXNzIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCiAgICBsZXQgbmZ0Q29udHJhY3ROYW1lID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0TmFtZShmcm9tVHlwZTogbmZ0VHlwZSkKICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgbmFtZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQoKICAgIAogICAgLyogLS0tIFJldHJpZXZlIHRoZSBORlQgLS0tICovCiAgICAvLwogICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBORlQgY29sbGVjdGlvbiwgY29uZmlndXJpbmcgaWYgbmVjZXNzYXJ5CiAgICBsZXQgdmlld1Jlc29sdmVyID0gZ2V0QWNjb3VudChuZnRDb250cmFjdEFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiBuZnRDb250cmFjdE5hbWUpCiAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIE5GVCBjb250cmFjdCIpCiAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICByZXNvdXJjZVR5cGU6IG5pbCwKICAgICAgICB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpCiAgICAgICkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBORlRDb2xsZWN0aW9uRGF0YSB2aWV3IikKICAgIGxldCBjb2xsZWN0aW9uID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259PigKICAgICAgICBmcm9tOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aAogICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYWNjZXNzIHNpZ25lcidzIE5GVCBDb2xsZWN0aW9uIikKCgogICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICA/PyBwYW5pYygibm8gY29udHJvbGxlciBmb3VuZCBmb3IgY2FwVHlwZSIpCiAgICAKICAgIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGNvbnRyb2xsZXJJRCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpCiAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PgogICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgCiAgICBsZXQgaWQgPSBpZHNbMF0KICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgY2hpbGQncyBzdG9yZWQgdmF1bHQKICAgIGxldCBjb2xsZWN0aW9uUmVmID0gcHJvdmlkZXJDYXAuYm9ycm93KCkhCiAgICBsZXQgY2hpbGROZnQgPC0gY29sbGVjdGlvblJlZi53aXRoZHJhdyh3aXRoZHJhd0lEOiBpZCkKICAgIGNvbGxlY3Rpb24uZGVwb3NpdCh0b2tlbjogPC1jaGlsZE5mdCkKICAgIC8vIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgIGxldCBjdXJyZW50U3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgbGV0IG5mdCA8LSBjb2xsZWN0aW9uLndpdGhkcmF3KHdpdGhkcmF3SUQ6IGlkKQogICAgbGV0IHdpdGhkcmF3blN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgIGxldCBhcHByb3hGZWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuY2FsY3VsYXRlQnJpZGdlRmVlKAogICAgICAgIGJ5dGVzOiA0MDBfMDAwCiAgICAgICkgKyAoRmxvd0VWTUJyaWRnZUNvbmZpZy5iYXNlRmVlICogVUZpeDY0KGlkcy5sZW5ndGgpKQogICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAvLwogICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgKQogICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgIH0KICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgIGxldCBzY29wZWRQcm92aWRlciA8LSBTY29wZWRGVFByb3ZpZGVycy5jcmVhdGVTY29wZWRGVFByb3ZpZGVyKAogICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgIGV4cGlyYXRpb246IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCArIDEuMAogICAgICApCiAgICAgICAgCiAgICBsZXQgcmVjaXBpZW50RVZNQWRkcmVzcyA9IEVWTS5hZGRyZXNzRnJvbVN0cmluZyhyZWNpcGllbnQpCgogICAgRmxvd0VWTUJyaWRnZS5icmlkZ2VORlRUb0VWTSgKICAgICAgdG9rZW46IDwtIG5mdCwKICAgICAgdG86IHJlY2lwaWVudEVWTUFkZHJlc3MsCiAgICAgIGZlZVByb3ZpZGVyOiAmc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICApCiAgICB2YXIgaWR4ID0gMAogICAgZm9yIG5mdElkIGluIGlkcyB7CiAgICAgIGlmIGlkeCA9PSAwIHsKICAgICAgICBpZHggPSBpZHggKyAxCiAgICAgICAgY29udGludWUKICAgICAgfQoKICAgICAgRmxvd0VWTUJyaWRnZS5icmlkZ2VORlRUb0VWTSgKICAgICAgICB0b2tlbjogPC0gY29sbGVjdGlvblJlZi53aXRoZHJhdyh3aXRoZHJhd0lEOiBuZnRJZCksCiAgICAgICAgdG86IHJlY2lwaWVudEVWTUFkZHJlc3MsCiAgICAgICAgZmVlUHJvdmlkZXI6ICZzY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgKQogICAgICBpZHggPSBpZHggKyAxCiAgICB9CiAgICAvLyBEZXN0cm95IHRoZSBTY29wZWRGVFByb3ZpZGVyCiAgICBkZXN0cm95IHNjb3BlZFByb3ZpZGVyCiAgfQoKfQo='
    );
    let config = {
      cadence: code,
      name: 'batchBridgeChildNftToEvmAddress',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(nftIdentifier, t.String),
        arg(child, t.Address),
        arg(ids, t.Array(t.UInt64)),
        arg(recipient, t.String),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async bridgeChildNftToEvmAddress(
    nftIdentifier: string,
    child: string,
    id: number,
    recipient: string
  ) {
    const code = decodeCadence(
      'aW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4RnVuZ2libGVUb2tlbgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhGbG93RVZNQnJpZGdlCgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhDYXBhYmlsaXR5RmlsdGVyCgoKCnRyYW5zYWN0aW9uKG5mdElkZW50aWZpZXI6IFN0cmluZywgY2hpbGQ6IEFkZHJlc3MsIGlkOiBVSW50NjQsIHJlY2lwaWVudDpTdHJpbmcpIHsKICAKICBsZXQgbmZ0OiBAe05vbkZ1bmdpYmxlVG9rZW4uTkZUfQogIC8vIGxldCBjb2E6IGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50CiAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgogIAogIHByZXBhcmUoc2lnbmVyOiBhdXRoKENvcHlWYWx1ZSwgQm9ycm93VmFsdWUsIElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBQdWJsaXNoQ2FwYWJpbGl0eSwgU2F2ZVZhbHVlKSAmQWNjb3VudCkgewogICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgQ2FkZW5jZU93bmVkQWNjb3VudCAtLS0gKi8KICAgIC8vCiAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIHNpZ25lcidzIENPQQogICAgLy8gc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgIC8vICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgQ09BIGZyb20gcHJvdmlkZWQgZ2F0ZXdheSBhZGRyZXNzIikKICAgIAogICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgID8/IHBhbmljKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGQpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAKICAgIC8vIENvbnN0cnVjdCB0aGUgTkZUIHR5cGUgZnJvbSB0aGUgcHJvdmlkZWQgaWRlbnRpZmllcgogICAgbGV0IG5mdFR5cGUgPSBDb21wb3NpdGVUeXBlKG5mdElkZW50aWZpZXIpCiAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IE5GVCB0eXBlIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCiAgICBsZXQgbmZ0Q29udHJhY3RBZGRyZXNzID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0QWRkcmVzcyhmcm9tVHlwZTogbmZ0VHlwZSkKICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgYWRkcmVzcyBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQogICAgbGV0IG5mdENvbnRyYWN0TmFtZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdE5hbWUoZnJvbVR5cGU6IG5mdFR5cGUpCiAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IG5hbWUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKCiAgICAKICAgIC8qIC0tLSBSZXRyaWV2ZSB0aGUgTkZUIC0tLSAqLwogICAgLy8KICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgTkZUIGNvbGxlY3Rpb24sIGNvbmZpZ3VyaW5nIGlmIG5lY2Vzc2FyeQogICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQobmZ0Q29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogbmZ0Q29udHJhY3ROYW1lKQogICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBORlQgY29udHJhY3QiKQogICAgbGV0IGNvbGxlY3Rpb25EYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpCiAgICApIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgTkZUQ29sbGVjdGlvbkRhdGEgdmlldyIpCiAgICBsZXQgY29sbGVjdGlvbiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oCiAgICAgIGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoCiAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYWNjZXNzIHNpZ25lcidzIE5GVCBDb2xsZWN0aW9uIikKCgogICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICA/PyBwYW5pYygibm8gY29udHJvbGxlciBmb3VuZCBmb3IgY2FwVHlwZSIpCiAgICAKICAgIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGNvbnRyb2xsZXJJRCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpCiAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PgogICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgCiAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIGNoaWxkJ3Mgc3RvcmVkIHZhdWx0CiAgICBsZXQgY29sbGVjdGlvblJlZiA9IHByb3ZpZGVyQ2FwLmJvcnJvdygpIQogICAgbGV0IGNoaWxkTmZ0IDwtIGNvbGxlY3Rpb25SZWYud2l0aGRyYXcod2l0aGRyYXdJRDogaWQpCiAgICBjb2xsZWN0aW9uLmRlcG9zaXQodG9rZW46IDwtY2hpbGROZnQpCiAgICAvLyAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICBsZXQgY3VycmVudFN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgIHNlbGYubmZ0IDwtIGNvbGxlY3Rpb24ud2l0aGRyYXcod2l0aGRyYXdJRDogaWQpCiAgICBsZXQgd2l0aGRyYXduU3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgbGV0IGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoCiAgICAgIGJ5dGVzOiA0MDBfMDAwCiAgICApCiAgIAogICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAvLwogICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgKQogICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgIH0KICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgcHJvdmlkZXI6IHByb3ZpZGVyQ2FwQ29weSwKICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICkKICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgLy8gRXhlY3V0ZSB0aGUgYnJpZGdlCiAgICAgICAgLy8gc2VsZi5jb2EuZGVwb3NpdE5GVCgKICAgICAgICAvLyAgICAgbmZ0OiA8LXNlbGYubmZ0LAogICAgICAgIC8vICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgLy8gKQogICAgICAgIGxldCByZWNpcGllbnRFVk1BZGRyZXNzID0gRVZNLmFkZHJlc3NGcm9tU3RyaW5nKHJlY2lwaWVudCkKICAgICAgICBGbG93RVZNQnJpZGdlLmJyaWRnZU5GVFRvRVZNKAogICAgICAgICAgICB0b2tlbjogPC1zZWxmLm5mdCwKICAgICAgICAgICAgdG86IHJlY2lwaWVudEVWTUFkZHJlc3MsCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCiAgICAgICAgLy8gRGVzdHJveSB0aGUgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGRlc3Ryb3kgc2VsZi5zY29wZWRQcm92aWRlcgogICAgfQp9Cg=='
    );
    let config = {
      cadence: code,
      name: 'bridgeChildNftToEvmAddress',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(nftIdentifier, t.String),
        arg(child, t.Address),
        arg(id, t.UInt64),
        arg(recipient, t.String),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async sendChildNft(identifier: string, childAddr: string, receiver: string, id: number) {
    const code = decodeCadence(
      'aW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwoKCgp0cmFuc2FjdGlvbihpZGVudGlmaWVyOiBTdHJpbmcsIGNoaWxkQWRkcjogQWRkcmVzcywgcmVjZWl2ZXI6IEFkZHJlc3MsIGlkOiBVSW50NjQpIHsKICBwcmVwYXJlKHNpZ25lcjogYXV0aChTdG9yYWdlKSAmQWNjb3VudCkgewogICAgbGV0IHR5cGUgPSBDb21wb3NpdGVUeXBlKGlkZW50aWZpZXIpCiAgICBsZXQgaWRlbnRpZmllclNwbGl0ID0gaWRlbnRpZmllci5zcGxpdChzZXBhcmF0b3I6ICIuIikKICAgIGxldCBhZGRyZXNzID0gQWRkcmVzcy5mcm9tU3RyaW5nKCIweCIuY29uY2F0KGlkZW50aWZpZXJTcGxpdFsxXSkpIQogICAgbGV0IG5hbWUgPSBpZGVudGlmaWVyU3BsaXRbMl0hCiAgICBsZXQgdmlld1Jlc29sdmVyID0gZ2V0QWNjb3VudChhZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogbmFtZSkKICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBORlQgY29udHJhY3QiKQogICAgLy8gc2lnbmVyIGlzIHRoZSBwYXJlbnQgYWNjb3VudAogICAgLy8gZ2V0IHRoZSBtYW5hZ2VyIHJlc291cmNlIGFuZCBib3Jyb3cgY2hpbGRBY2NvdW50CiAgICBsZXQgbSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKICAgICAgICA/PyBwYW5pYygibWFuYWdlciBkb2VzIG5vdCBleGlzdCIpCiAgICBsZXQgY2hpbGRBY2N0ID0gbS5ib3Jyb3dBY2NvdW50KGFkZHI6IGNoaWxkQWRkcikgPz8gcGFuaWMoImNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKICAgIAogICAgbGV0IGNvbGxlY3Rpb25EYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkpIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPwogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IHRoZSB2YXVsdCBkYXRhIHZpZXcgZm9yIDxORlQ+ICIpCgogICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIAogICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+CiAgICBhc3NlcnQocHJvdmlkZXJDYXAuY2hlY2soKSwgbWVzc2FnZTogImludmFsaWQgcHJvdmlkZXIgY2FwYWJpbGl0eSIpCiAgICAKICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgY2hpbGQncyBzdG9yZWQgdmF1bHQKICAgIGxldCBjb2xsZWN0aW9uUmVmID0gcHJvdmlkZXJDYXAuYm9ycm93KCkhCgogICAgLy8gV2l0aGRyYXcgdG9rZW5zIGZyb20gdGhlIHNpZ25lcidzIHN0b3JlZCB2YXVsdAogICAgbGV0IG5mdCA8LSBjb2xsZWN0aW9uUmVmLndpdGhkcmF3KHdpdGhkcmF3SUQ6IGlkKQogICAgbGV0IHJlY2VpdmVyQWNjID0gZ2V0QWNjb3VudChyZWNlaXZlcikKICAgIGxldCByZWNlaXZlclJlZiA9ICByZWNlaXZlckFjYy5jYXBhYmlsaXRpZXMuZ2V0PCZ7Tm9uRnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KGNvbGxlY3Rpb25EYXRhLnB1YmxpY1BhdGgpIS5ib3Jyb3coKQogICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVjZWl2ZXIgcmVmZXJlbmNlIHRvIHRoZSByZWNpcGllbnQncyBWYXVsdCIpCiAgICAKICAgIHJlY2VpdmVyUmVmLmRlcG9zaXQodG9rZW46IDwtIG5mdCkKICB9Cn0='
    );
    let config = {
      cadence: code,
      name: 'sendChildNft',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(identifier, t.String),
        arg(childAddr, t.Address),
        arg(receiver, t.Address),
        arg(id, t.UInt64),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async batchBridgeChildNftFromEvm(nftIdentifier: string, child: string, ids: string[]) {
    const code = decodeCadence(
      'aW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4RnVuZ2libGVUb2tlbgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhGbG93RVZNQnJpZGdlCgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhDYXBhYmlsaXR5RmlsdGVyCgoKdHJhbnNhY3Rpb24obmZ0SWRlbnRpZmllcjogU3RyaW5nLCBjaGlsZDogQWRkcmVzcywgaWRzOiBbVUludDI1Nl0pIHsKICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSwgQ29weVZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSwgVW5wdWJsaXNoQ2FwYWJpbGl0eSkgJkFjY291bnQpIHsKICAgIC8qIC0tLSBSZWZlcmVuY2UgdGhlIHNpZ25lcidzIENhZGVuY2VPd25lZEFjY291bnQgLS0tICovCiAgICAvLwogICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EKICAgIGxldCBjb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgQ09BIGZyb20gcHJvdmlkZWQgZ2F0ZXdheSBhZGRyZXNzIikKICAgIAogICAgLy8gQ29uc3RydWN0IHRoZSBORlQgdHlwZSBmcm9tIHRoZSBwcm92aWRlZCBpZGVudGlmaWVyCiAgICBsZXQgbmZ0VHlwZSA9IENvbXBvc2l0ZVR5cGUobmZ0SWRlbnRpZmllcikKICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBjb25zdHJ1Y3QgTkZUIHR5cGUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKICAgIGxldCBuZnRDb250cmFjdEFkZHJlc3MgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3RBZGRyZXNzKGZyb21UeXBlOiBuZnRUeXBlKQogICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBhZGRyZXNzIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCiAgICBsZXQgbmZ0Q29udHJhY3ROYW1lID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0TmFtZShmcm9tVHlwZTogbmZ0VHlwZSkKICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgbmFtZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQoKICAgIGxldCBtID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICA/PyBwYW5pYygibWFuYWdlciBkb2VzIG5vdCBleGlzdCIpCiAgICBsZXQgY2hpbGRBY2N0ID0gbS5ib3Jyb3dBY2NvdW50KGFkZHI6IGNoaWxkKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgCiAgIAogICAgLyogLS0tIFJldHJpZXZlIHRoZSBORlQgLS0tICovCiAgICAvLwogICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBORlQgY29sbGVjdGlvbiwgY29uZmlndXJpbmcgaWYgbmVjZXNzYXJ5CiAgICBsZXQgdmlld1Jlc29sdmVyID0gZ2V0QWNjb3VudChuZnRDb250cmFjdEFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiBuZnRDb250cmFjdE5hbWUpCiAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIE5GVCBjb250cmFjdCIpCiAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICByZXNvdXJjZVR5cGU6IG5pbCwKICAgICAgICB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpCiAgICAgICkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBORlRDb2xsZWN0aW9uRGF0YSB2aWV3IikKICAgIAogICAgLy8gbGV0IHJlY2VpdmVyID0gZ2V0QWNjb3VudChjaGlsZCkuY2FwYWJpbGl0aWVzLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9Pihjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKQogICAgLy8gICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFJlY2VpdmVyIGZyb20gcmVjaXBpZW50J3MgcHVibGljIGNhcGFiaWxpdHkgcGF0aCIpCgoKCiAgICBsZXQgY2FwVHlwZSA9IFR5cGU8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9PigpCiAgICBsZXQgY29udHJvbGxlcklEID0gY2hpbGRBY2N0LmdldENvbnRyb2xsZXJJREZvclR5cGUodHlwZTogY2FwVHlwZSwgZm9yUGF0aDogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIAogICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgIGxldCBwdWJsaWNDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9PgogICAgYXNzZXJ0KHB1YmxpY0NhcC5jaGVjaygpLCBtZXNzYWdlOiAiaW52YWxpZCBwdWJsaWMgY2FwYWJpbGl0eSIpCiAgICAKICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgY2hpbGQncyBzdG9yZWQgdmF1bHQKICAgIGxldCBjb2xsZWN0aW9uUmVmID0gcHVibGljQ2FwLmJvcnJvdygpIQoKICAKICAgIC8vIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgIGxldCBhcHByb3hGZWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuY2FsY3VsYXRlQnJpZGdlRmVlKGJ5dGVzOiA0MDBfMDAwKSArIChGbG93RVZNQnJpZGdlQ29uZmlnLmJhc2VGZWUgKiBVRml4NjQoaWRzLmxlbmd0aCkpCgogICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAvLwogICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgKQogICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgIH0KICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihhcHByb3hGZWUpCiAgICBsZXQgc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgIGZpbHRlcnM6IFsgcHJvdmlkZXJGaWx0ZXIgXSwKICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgKQoKICAgIGZvciBpZCBpbiBpZHMgewogICAgICBsZXQgbmZ0OiBAe05vbkZ1bmdpYmxlVG9rZW4uTkZUfSA8LSBjb2Eud2l0aGRyYXdORlQoCiAgICAgICAgdHlwZTogbmZ0VHlwZSwKICAgICAgICBpZDogaWQsCiAgICAgICAgZmVlUHJvdmlkZXI6ICZzY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgKQoKICAgICAgYXNzZXJ0KAogICAgICAgIG5mdC5nZXRUeXBlKCkgPT0gbmZ0VHlwZSwKICAgICAgICBtZXNzYWdlOiAiQnJpZGdlZCBuZnQgdHlwZSBtaXNtYXRjaCAtIHJlcXVlc3d0ZWQ6ICIuY29uY2F0KG5mdFR5cGUuaWRlbnRpZmllcikKICAgICAgICAgIC5jb25jYXQoIiwgcmVjZWl2ZWQ6ICIpLmNvbmNhdChuZnQuZ2V0VHlwZSgpLmlkZW50aWZpZXIpCiAgICAgICkKCiAgICAgIGNvbGxlY3Rpb25SZWYuZGVwb3NpdCh0b2tlbjogPC0gbmZ0KQogICAgfQogIAoKICAgIAogICAgLy8gRGVzdHJveSB0aGUgU2NvcGVkRlRQcm92aWRlcgogICAgZGVzdHJveSBzY29wZWRQcm92aWRlcgogIH0KfQo='
    );
    let config = {
      cadence: code,
      name: 'batchBridgeChildNftFromEvm',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(nftIdentifier, t.String),
        arg(child, t.Address),
        arg(ids, t.Array(t.UInt256)),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async sendChildNftToChild(
    identifier: string,
    childAddr: string,
    receiver: string,
    id: number
  ) {
    const code = decodeCadence(
      'aW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwoKdHJhbnNhY3Rpb24oaWRlbnRpZmllcjogU3RyaW5nLCBjaGlsZEFkZHI6IEFkZHJlc3MsIHJlY2VpdmVyOiBBZGRyZXNzLCBpZDogVUludDY0KSB7CiAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKICAgIGxldCB0eXBlID0gQ29tcG9zaXRlVHlwZShpZGVudGlmaWVyKQogICAgbGV0IGlkZW50aWZpZXJTcGxpdCA9IGlkZW50aWZpZXIuc3BsaXQoc2VwYXJhdG9yOiAiLiIpCiAgICBsZXQgYWRkcmVzcyA9IEFkZHJlc3MuZnJvbVN0cmluZygiMHgiLmNvbmNhdChpZGVudGlmaWVyU3BsaXRbMV0pKSEKICAgIGxldCBuYW1lID0gaWRlbnRpZmllclNwbGl0WzJdIQogICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQoYWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5hbWUpCiAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gTkZUIGNvbnRyYWN0IikKICAgIC8vIHNpZ25lciBpcyB0aGUgcGFyZW50IGFjY291bnQKICAgIC8vIGdldCB0aGUgbWFuYWdlciByZXNvdXJjZSBhbmQgYm9ycm93IGNoaWxkQWNjb3VudAogICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZEFkZHIpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAKICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KHJlc291cmNlVHlwZTogbmlsLCB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpKSBhcyEgTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT8KICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCB0aGUgdmF1bHQgZGF0YSB2aWV3IGZvciA8TkZUPiAiKQoKICAgIC8vZ2V0IEZ0IGNhcCBmcm9tIGNoaWxkIGFjY291bnQKICAgIGxldCBjYXBUeXBlID0gVHlwZTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KCkKICAgIGxldCBjb250cm9sbGVySUQgPSBjaGlsZEFjY3QuZ2V0Q29udHJvbGxlcklERm9yVHlwZSh0eXBlOiBjYXBUeXBlLCBmb3JQYXRoOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICA/PyBwYW5pYygibm8gY29udHJvbGxlciBmb3VuZCBmb3IgY2FwVHlwZSIpCiAgICAKICAgIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGNvbnRyb2xsZXJJRCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpCiAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PgogICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgbGV0IGNvbGxlY3Rpb25SZWYgPSBwcm92aWRlckNhcC5ib3Jyb3coKSEKCgogICAgbGV0IHJlY2VpdmVyQ2hpbGRBY2N0ID0gbS5ib3Jyb3dBY2NvdW50KGFkZHI6IHJlY2VpdmVyKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgbGV0IHJlY2VpdmVyQ29udHJvbGxlcklkID0gcmVjZWl2ZXJDaGlsZEFjY3QuZ2V0Q29udHJvbGxlcklERm9yVHlwZSh0eXBlOiBjYXBUeXBlLCBmb3JQYXRoOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICA/PyBwYW5pYygibm8gY29udHJvbGxlciBmb3VuZCBmb3IgY2FwVHlwZSIpCiAgICBsZXQgcmVjZWl2ZXJDYXAgPSByZWNlaXZlckNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogcmVjZWl2ZXJDb250cm9sbGVySWQsIHR5cGU6IGNhcFR5cGUpID8/IHBhbmljKCJubyBjYXAgZm91bmQiKSAKICAgIGxldCBwdWJsaWNDYXAgPSByZWNlaXZlckNhcCBhcyEgQ2FwYWJpbGl0eTwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+CiAgICBsZXQgcmVjZWl2ZXJSZWYgPSAgcHVibGljQ2FwLmJvcnJvdygpIQoKICAgIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgIGxldCBuZnQgPC0gY29sbGVjdGlvblJlZi53aXRoZHJhdyh3aXRoZHJhd0lEOiBpZCkKICAgIAogICAgcmVjZWl2ZXJSZWYuZGVwb3NpdCh0b2tlbjogPC0gbmZ0KQogIH0KfQ=='
    );
    let config = {
      cadence: code,
      name: 'sendChildNftToChild',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(identifier, t.String),
        arg(childAddr, t.Address),
        arg(receiver, t.Address),
        arg(id, t.UInt64),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async transferChildFt(vaultIdentifier: string, sender: string, amount: string) {
    const code = decodeCadence(
      'aW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKCi8vIEhDLW93bmVkIGltcG9ydHMKaW1wb3J0IENhcGFiaWxpdHlGYWN0b3J5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhIeWJyaWRDdXN0b2R5CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4RnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MKCgoKdHJhbnNhY3Rpb24odmF1bHRJZGVudGlmaWVyOlN0cmluZywgc2VuZGVyOiBBZGRyZXNzLCBhbW91bnQ6IFVGaXg2NCApIHsKCiAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKICAgIGxldCB0eXBlID0gQ29tcG9zaXRlVHlwZSh2YXVsdElkZW50aWZpZXIpCiAgICBsZXQgaWRlbnRpZmllclNwbGl0ID0gdmF1bHRJZGVudGlmaWVyLnNwbGl0KHNlcGFyYXRvcjogIi4iKQogICAgbGV0IGFkZHJlc3MgPSBBZGRyZXNzLmZyb21TdHJpbmcoIjB4Ii5jb25jYXQoaWRlbnRpZmllclNwbGl0WzFdKSkhCiAgICBsZXQgbmFtZSA9IGlkZW50aWZpZXJTcGxpdFsyXSEKCiAgICBsZXQgdmlld1Jlc29sdmVyID0gZ2V0QWNjb3VudChhZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogbmFtZSkKICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBGdW5naWJsZVRva2VuIGNvbnRyYWN0IikKICAgIC8vIHNpZ25lciBpcyB0aGUgcGFyZW50IGFjY291bnQKICAgIC8vIGdldCB0aGUgbWFuYWdlciByZXNvdXJjZSBhbmQgYm9ycm93IGNoaWxkQWNjb3VudAogICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBzZW5kZXIpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAKICAgIGxldCB2YXVsdERhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldyhyZXNvdXJjZVR5cGU6IG5pbCwgdmlld1R5cGU6IFR5cGU8RnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE+KCkpIGFzISBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT8KICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCB0aGUgdmF1bHQgZGF0YSB2aWV3IGZvciA8VG9rZW4+ICIpCgogICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IHZhdWx0RGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICA/PyBwYW5pYygibm8gY29udHJvbGxlciBmb3VuZCBmb3IgY2FwVHlwZSIpCiAgICAKICAgIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGNvbnRyb2xsZXJJRCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpCiAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PgogICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgCiAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIGNoaWxkJ3Mgc3RvcmVkIHZhdWx0CiAgICBsZXQgdmF1bHRSZWYgPSBwcm92aWRlckNhcC5ib3Jyb3coKSEKCiAgICAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICBsZXQgcGF5bWVudFZhdWx0IDwtIHZhdWx0UmVmLndpdGhkcmF3KGFtb3VudDogYW1vdW50KQogICAgbGV0IHJlY2VpdmVyUmVmID0gIHNpZ25lci5jYXBhYmlsaXRpZXMuZ2V0PCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KHZhdWx0RGF0YS5yZWNlaXZlclBhdGgpIS5ib3Jyb3coKQogICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVjZWl2ZXIgcmVmZXJlbmNlIHRvIHRoZSByZWNpcGllbnQncyBWYXVsdCIpCiAgICByZWNlaXZlclJlZi5kZXBvc2l0KGZyb206IDwtcGF5bWVudFZhdWx0KQogIH0KfQ=='
    );
    let config = {
      cadence: code,
      name: 'transferChildFt',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(vaultIdentifier, t.String),
        arg(sender, t.Address),
        arg(amount, t.UFix64),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async batchBridgeChildNftToEvm(nftIdentifier: string, child: string, ids: number[]) {
    const code = decodeCadence(
      'aW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4RnVuZ2libGVUb2tlbgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhGbG93RVZNQnJpZGdlCgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhDYXBhYmlsaXR5RmlsdGVyCgp0cmFuc2FjdGlvbihuZnRJZGVudGlmaWVyOiBTdHJpbmcsIGNoaWxkOiBBZGRyZXNzLCBpZHM6IFtVSW50NjRdKSB7CiAgcHJlcGFyZShzaWduZXI6IGF1dGgoQ29weVZhbHVlLCBCb3Jyb3dWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUpICZBY2NvdW50KSB7CiAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBDYWRlbmNlT3duZWRBY2NvdW50IC0tLSAqLwogICAgLy8KICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgQ09BCiAgICBsZXQgY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihmcm9tOiAvc3RvcmFnZS9ldm0pCiAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IENPQSBmcm9tIHByb3ZpZGVkIGdhdGV3YXkgYWRkcmVzcyIpCiAgICAKICAgIGxldCBtID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICA/PyBwYW5pYygibWFuYWdlciBkb2VzIG5vdCBleGlzdCIpCiAgICBsZXQgY2hpbGRBY2N0ID0gbS5ib3Jyb3dBY2NvdW50KGFkZHI6IGNoaWxkKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgCiAgICAvLyBDb25zdHJ1Y3QgdGhlIE5GVCB0eXBlIGZyb20gdGhlIHByb3ZpZGVkIGlkZW50aWZpZXIKICAgIGxldCBuZnRUeXBlID0gQ29tcG9zaXRlVHlwZShuZnRJZGVudGlmaWVyKQogICAgICA/PyBwYW5pYygiQ291bGQgbm90IGNvbnN0cnVjdCBORlQgdHlwZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQogICAgbGV0IG5mdENvbnRyYWN0QWRkcmVzcyA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdEFkZHJlc3MoZnJvbVR5cGU6IG5mdFR5cGUpCiAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IGFkZHJlc3MgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKICAgIGxldCBuZnRDb250cmFjdE5hbWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3ROYW1lKGZyb21UeXBlOiBuZnRUeXBlKQogICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBuYW1lIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCgogICAgCiAgICAvKiAtLS0gUmV0cmlldmUgdGhlIE5GVCAtLS0gKi8KICAgIC8vCiAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIE5GVCBjb2xsZWN0aW9uLCBjb25maWd1cmluZyBpZiBuZWNlc3NhcnkKICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KG5mdENvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5mdENvbnRyYWN0TmFtZSkKICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gTkZUIGNvbnRyYWN0IikKICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICAgIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkKICAgICAgKSBhcyEgTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIE5GVENvbGxlY3Rpb25EYXRhIHZpZXciKQogICAgbGV0IGNvbGxlY3Rpb24gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KAogICAgICAgIGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoCiAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBhY2Nlc3Mgc2lnbmVyJ3MgTkZUIENvbGxlY3Rpb24iKQoKCiAgICBsZXQgY2FwVHlwZSA9IFR5cGU8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCiAgICBsZXQgY29udHJvbGxlcklEID0gY2hpbGRBY2N0LmdldENvbnRyb2xsZXJJREZvclR5cGUodHlwZTogY2FwVHlwZSwgZm9yUGF0aDogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIAogICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+CiAgICBhc3NlcnQocHJvdmlkZXJDYXAuY2hlY2soKSwgbWVzc2FnZTogImludmFsaWQgcHJvdmlkZXIgY2FwYWJpbGl0eSIpCiAgICAKICAgIGxldCBpZCA9IGlkc1swXQogICAgLy8gR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSBjaGlsZCdzIHN0b3JlZCB2YXVsdAogICAgbGV0IGNvbGxlY3Rpb25SZWYgPSBwcm92aWRlckNhcC5ib3Jyb3coKSEKICAgIGxldCBjaGlsZE5mdCA8LSBjb2xsZWN0aW9uUmVmLndpdGhkcmF3KHdpdGhkcmF3SUQ6IGlkKQogICAgY29sbGVjdGlvbi5kZXBvc2l0KHRva2VuOiA8LWNoaWxkTmZ0KQogICAgLy8gLy8gV2l0aGRyYXcgdG9rZW5zIGZyb20gdGhlIHNpZ25lcidzIHN0b3JlZCB2YXVsdAogICAgbGV0IGN1cnJlbnRTdG9yYWdlVXNhZ2UgPSBzaWduZXIuc3RvcmFnZS51c2VkCiAgICBsZXQgbmZ0IDwtIGNvbGxlY3Rpb24ud2l0aGRyYXcod2l0aGRyYXdJRDogaWQpCiAgICBsZXQgd2l0aGRyYXduU3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgbGV0IGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoCiAgICAgICAgYnl0ZXM6IDQwMF8wMDAKICAgICAgKSArIChGbG93RVZNQnJpZGdlQ29uZmlnLmJhc2VGZWUgKiBVRml4NjQoaWRzLmxlbmd0aCkpCiAgIAogICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAvLwogICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgKQogICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgIH0KICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgIGxldCBzY29wZWRQcm92aWRlciA8LSBTY29wZWRGVFByb3ZpZGVycy5jcmVhdGVTY29wZWRGVFByb3ZpZGVyKAogICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgIGV4cGlyYXRpb246IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCArIDEuMAogICAgICApCgogICAgLy8gRXhlY3V0ZSB0aGUgYnJpZGdlCiAgICBjb2EuZGVwb3NpdE5GVCgKICAgICAgbmZ0OiA8LSBuZnQsCiAgICAgIGZlZVByb3ZpZGVyOiAmc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICApCiAgICB2YXIgaWR4ID0gMAogICAgZm9yIG5mdElkIGluIGlkcyB7CiAgICAgIGlmIGlkeCA9PSAwIHsKICAgICAgICBpZHggPSBpZHggKyAxCiAgICAgICAgY29udGludWUKICAgICAgfQoKICAgICAgbGV0IG5mdCA8LSBjb2xsZWN0aW9uUmVmLndpdGhkcmF3KHdpdGhkcmF3SUQ6IG5mdElkKQogICAgICBjb2EuZGVwb3NpdE5GVCgKICAgICAgICBuZnQ6IDwtIG5mdCwKICAgICAgICBmZWVQcm92aWRlcjogJnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICApCiAgICAgIGlkeCA9IGlkeCArIDEKICAgIH0KICAgIC8vIERlc3Ryb3kgdGhlIFNjb3BlZEZUUHJvdmlkZXIKICAgIGRlc3Ryb3kgc2NvcGVkUHJvdmlkZXIKICB9Cgp9Cg=='
    );
    let config = {
      cadence: code,
      name: 'batchBridgeChildNftToEvm',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(nftIdentifier, t.String),
        arg(child, t.Address),
        arg(ids, t.Array(t.UInt64)),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async batchTransferChildNft(identifier: string, childAddr: string, ids: number[]) {
    const code = decodeCadence(
      'aW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwoKCnRyYW5zYWN0aW9uKGlkZW50aWZpZXI6IFN0cmluZywgY2hpbGRBZGRyOiBBZGRyZXNzLCBpZHM6IFtVSW50NjRdICkgewoKICBwcmVwYXJlKHNpZ25lcjogYXV0aChTdG9yYWdlKSAmQWNjb3VudCkgewogICAgbGV0IHR5cGUgPSBDb21wb3NpdGVUeXBlKGlkZW50aWZpZXIpCiAgICBsZXQgaWRlbnRpZmllclNwbGl0ID0gaWRlbnRpZmllci5zcGxpdChzZXBhcmF0b3I6ICIuIikKICAgIGxldCBhZGRyZXNzID0gQWRkcmVzcy5mcm9tU3RyaW5nKCIweCIuY29uY2F0KGlkZW50aWZpZXJTcGxpdFsxXSkpIQogICAgbGV0IG5hbWUgPSBpZGVudGlmaWVyU3BsaXRbMl0hCgogICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQoYWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5hbWUpCiAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBORlQgY29udHJhY3QiKQogICAgLy8gc2lnbmVyIGlzIHRoZSBwYXJlbnQgYWNjb3VudAogICAgLy8gZ2V0IHRoZSBtYW5hZ2VyIHJlc291cmNlIGFuZCBib3Jyb3cgY2hpbGRBY2NvdW50CiAgICBsZXQgbSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKICAgICAgICA/PyBwYW5pYygibWFuYWdlciBkb2VzIG5vdCBleGlzdCIpCiAgICBsZXQgY2hpbGRBY2N0ID0gbS5ib3Jyb3dBY2NvdW50KGFkZHI6IGNoaWxkQWRkcikgPz8gcGFuaWMoImNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKICAgIAogICAgbGV0IGNvbGxlY3Rpb25EYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkpIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPwogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IHRoZSB2YXVsdCBkYXRhIHZpZXcgZm9yIDxORlQ+ICIpCgogICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIAogICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+CiAgICBhc3NlcnQocHJvdmlkZXJDYXAuY2hlY2soKSwgbWVzc2FnZTogImludmFsaWQgcHJvdmlkZXIgY2FwYWJpbGl0eSIpCiAgICAKICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgY2hpbGQncyBzdG9yZWQgdmF1bHQKICAgIGxldCBjb2xsZWN0aW9uUmVmID0gcHJvdmlkZXJDYXAuYm9ycm93KCkhCiAgICBsZXQgcmVjZWl2ZXJSZWYgPSAgc2lnbmVyLmNhcGFiaWxpdGllcy5nZXQ8JntOb25GdW5naWJsZVRva2VuLlJlY2VpdmVyfT4oY29sbGVjdGlvbkRhdGEucHVibGljUGF0aCkhLmJvcnJvdygpCiAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWNlaXZlciByZWZlcmVuY2UgdG8gdGhlIHJlY2lwaWVudCdzIFZhdWx0IikKCiAgICBmb3IgaWQgaW4gaWRzIHsgICAgIAogICAgICAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICAgIGxldCBuZnQgPC0gY29sbGVjdGlvblJlZi53aXRoZHJhdyh3aXRoZHJhd0lEOiBpZCkKICAgICAgcmVjZWl2ZXJSZWYuZGVwb3NpdCh0b2tlbjogPC0gbmZ0KQogICAgfQogIH0KfQ=='
    );
    let config = {
      cadence: code,
      name: 'batchTransferChildNft',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(identifier, t.String),
        arg(childAddr, t.Address),
        arg(ids, t.Array(t.UInt64)),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async sendChildFtToChild(
    vaultIdentifier: string,
    sender: string,
    receiver: string,
    amount: string
  ) {
    const code = decodeCadence(
      'aW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKCi8vIEhDLW93bmVkIGltcG9ydHMKaW1wb3J0IENhcGFiaWxpdHlGYWN0b3J5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhIeWJyaWRDdXN0b2R5CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4RnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MKCgoKdHJhbnNhY3Rpb24odmF1bHRJZGVudGlmaWVyOlN0cmluZywgc2VuZGVyOiBBZGRyZXNzLCByZWNlaXZlcjogQWRkcmVzcywgYW1vdW50OiBVRml4NjQgKSB7CiAgLy8gVGhlIFZhdWx0IHJlc291cmNlIHRoYXQgaG9sZHMgdGhlIHRva2VucyB0aGF0IGFyZSBiZWluZyB0cmFuc2ZlcnJlZAogIGxldCBwYXltZW50VmF1bHQ6IEB7RnVuZ2libGVUb2tlbi5WYXVsdH0KICBsZXQgdmF1bHREYXRhOiBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YQoKICBwcmVwYXJlKHNpZ25lcjogYXV0aChTdG9yYWdlKSAmQWNjb3VudCkgewogICAgbGV0IHR5cGUgPSBDb21wb3NpdGVUeXBlKHZhdWx0SWRlbnRpZmllcikKICAgIGxldCBpZGVudGlmaWVyU3BsaXQgPSB2YXVsdElkZW50aWZpZXIuc3BsaXQoc2VwYXJhdG9yOiAiLiIpCiAgICBsZXQgYWRkcmVzcyA9IEFkZHJlc3MuZnJvbVN0cmluZygiMHgiLmNvbmNhdChpZGVudGlmaWVyU3BsaXRbMV0pKSEKICAgIGxldCBuYW1lID0gaWRlbnRpZmllclNwbGl0WzJdIQoKICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KGFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiBuYW1lKQogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIEZ1bmdpYmxlVG9rZW4gY29udHJhY3QiKQogICAgLy8gc2lnbmVyIGlzIHRoZSBwYXJlbnQgYWNjb3VudAogICAgLy8gZ2V0IHRoZSBtYW5hZ2VyIHJlc291cmNlIGFuZCBib3Jyb3cgY2hpbGRBY2NvdW50CiAgICBsZXQgbSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBzZW5kZXIpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAgCiAgICBzZWxmLnZhdWx0RGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiB0eXBlLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8RnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE+KCkKICAgICAgICAgICAgKSBhcyEgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBGVFZhdWx0RGF0YSB2aWV3IikKCiAgICAvL2dldCBGdCBjYXAgZnJvbSBjaGlsZCBhY2NvdW50CiAgICBsZXQgY2FwVHlwZSA9IFR5cGU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCiAgICBsZXQgY29udHJvbGxlcklEID0gY2hpbGRBY2N0LmdldENvbnRyb2xsZXJJREZvclR5cGUodHlwZTogY2FwVHlwZSwgZm9yUGF0aDogc2VsZi52YXVsdERhdGEuc3RvcmFnZVBhdGgpCiAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIAogICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+CiAgICBhc3NlcnQocHJvdmlkZXJDYXAuY2hlY2soKSwgbWVzc2FnZTogImludmFsaWQgcHJvdmlkZXIgY2FwYWJpbGl0eSIpCiAgICAKICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgY2hpbGQncyBzdG9yZWQgdmF1bHQKICAgIGxldCB2YXVsdFJlZiA9IHByb3ZpZGVyQ2FwLmJvcnJvdygpIQoKICAgIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgIHNlbGYucGF5bWVudFZhdWx0IDwtIHZhdWx0UmVmLndpdGhkcmF3KGFtb3VudDogYW1vdW50KQogIH0KCiAgZXhlY3V0ZSB7CiAgICAvLyBHZXQgdGhlIHJlY2lwaWVudCdzIHB1YmxpYyBhY2NvdW50IG9iamVjdAogICAgbGV0IHJlY2lwaWVudCA9IGdldEFjY291bnQocmVjZWl2ZXIpCgogICAgLy8gR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSByZWNpcGllbnQncyBSZWNlaXZlcgogICAgbGV0IHJlY2VpdmVyUmVmID0gcmVjaXBpZW50LmNhcGFiaWxpdGllcy5nZXQ8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4oc2VsZi52YXVsdERhdGEucmVjZWl2ZXJQYXRoKSEuYm9ycm93KCkKICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVjZWl2ZXIgcmVmZXJlbmNlIHRvIHRoZSByZWNpcGllbnQncyBWYXVsdCIpCgogICAgLy8gRGVwb3NpdCB0aGUgd2l0aGRyYXduIHRva2VucyBpbiB0aGUgcmVjaXBpZW50J3MgcmVjZWl2ZXIKICAgIHJlY2VpdmVyUmVmLmRlcG9zaXQoZnJvbTogPC1zZWxmLnBheW1lbnRWYXVsdCkKICB9Cn0KIA=='
    );
    let config = {
      cadence: code,
      name: 'sendChildFtToChild',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(vaultIdentifier, t.String),
        arg(sender, t.Address),
        arg(receiver, t.Address),
        arg(amount, t.UFix64),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async batchSendChildNftToChild(
    identifier: string,
    childAddr: string,
    receiver: string,
    ids: number[]
  ) {
    const code = decodeCadence(
      'aW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwoKCnRyYW5zYWN0aW9uKGlkZW50aWZpZXI6IFN0cmluZyxjaGlsZEFkZHI6IEFkZHJlc3MsIHJlY2VpdmVyOiBBZGRyZXNzLCBpZHM6IFtVSW50NjRdKSB7CiAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKICAgIGxldCB0eXBlID0gQ29tcG9zaXRlVHlwZShpZGVudGlmaWVyKQogICAgbGV0IGlkZW50aWZpZXJTcGxpdCA9IGlkZW50aWZpZXIuc3BsaXQoc2VwYXJhdG9yOiAiLiIpCiAgICBsZXQgYWRkcmVzcyA9IEFkZHJlc3MuZnJvbVN0cmluZygiMHgiLmNvbmNhdChpZGVudGlmaWVyU3BsaXRbMV0pKSEKICAgIGxldCBuYW1lID0gaWRlbnRpZmllclNwbGl0WzJdIQogICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQoYWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5hbWUpCiAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gTkZUIGNvbnRyYWN0IikKICAgIC8vIHNpZ25lciBpcyB0aGUgcGFyZW50IGFjY291bnQKICAgIC8vIGdldCB0aGUgbWFuYWdlciByZXNvdXJjZSBhbmQgYm9ycm93IGNoaWxkQWNjb3VudAogICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZEFkZHIpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAKICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KHJlc291cmNlVHlwZTogbmlsLCB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpKSBhcyEgTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT8KICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCB0aGUgdmF1bHQgZGF0YSB2aWV3IGZvciA8TkZUPiAiKQoKICAgIC8vZ2V0IEZ0IGNhcCBmcm9tIGNoaWxkIGFjY291bnQKICAgIGxldCBjYXBUeXBlID0gVHlwZTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KCkKICAgIGxldCBjb250cm9sbGVySUQgPSBjaGlsZEFjY3QuZ2V0Q29udHJvbGxlcklERm9yVHlwZSh0eXBlOiBjYXBUeXBlLCBmb3JQYXRoOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICA/PyBwYW5pYygibm8gY29udHJvbGxlciBmb3VuZCBmb3IgY2FwVHlwZSIpCiAgICAKICAgIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGNvbnRyb2xsZXJJRCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpCiAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PgogICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgbGV0IGNvbGxlY3Rpb25SZWYgPSBwcm92aWRlckNhcC5ib3Jyb3coKSEKCgogICAgbGV0IHJlY2VpdmVyQ2hpbGRBY2N0ID0gbS5ib3Jyb3dBY2NvdW50KGFkZHI6IHJlY2VpdmVyKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgbGV0IHJlY2VpdmVyQ29udHJvbGxlcklkID0gcmVjZWl2ZXJDaGlsZEFjY3QuZ2V0Q29udHJvbGxlcklERm9yVHlwZSh0eXBlOiBjYXBUeXBlLCBmb3JQYXRoOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICA/PyBwYW5pYygibm8gY29udHJvbGxlciBmb3VuZCBmb3IgY2FwVHlwZSIpCiAgICBsZXQgcmVjZWl2ZXJDYXAgPSByZWNlaXZlckNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogcmVjZWl2ZXJDb250cm9sbGVySWQsIHR5cGU6IGNhcFR5cGUpID8/IHBhbmljKCJubyBjYXAgZm91bmQiKSAKICAgIGxldCBwdWJsaWNDYXAgPSByZWNlaXZlckNhcCBhcyEgQ2FwYWJpbGl0eTwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+CiAgICBsZXQgcmVjZWl2ZXJSZWYgPSAgcHVibGljQ2FwLmJvcnJvdygpIQoKICAgIGZvciBpZCBpbiBpZHMgewogICAgICBsZXQgbmZ0IDwtIGNvbGxlY3Rpb25SZWYud2l0aGRyYXcod2l0aGRyYXdJRDogaWQpCiAgICAgIHJlY2VpdmVyUmVmLmRlcG9zaXQodG9rZW46IDwtIG5mdCkKICAgIH0KICB9Cn0='
    );
    let config = {
      cadence: code,
      name: 'batchSendChildNftToChild',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(identifier, t.String),
        arg(childAddr, t.Address),
        arg(receiver, t.Address),
        arg(ids, t.Array(t.UInt64)),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async enableTokenStorageV2(vaultIdentifier: string) {
    const code = decodeCadence(
      'aW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweE1ldGFkYXRhVmlld3MKCgp0cmFuc2FjdGlvbih2YXVsdElkZW50aWZpZXI6IFN0cmluZykgewoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQpIHsKCiAgICAgICAKICAgICAgICBsZXQgdHlwZSA9IENvbXBvc2l0ZVR5cGUodmF1bHRJZGVudGlmaWVyKQogICAgICAgIGxldCBpZGVudGlmaWVyU3BsaXQgPSB2YXVsdElkZW50aWZpZXIuc3BsaXQoc2VwYXJhdG9yOiAiLiIpCiAgICAgICAgbGV0IGFkZHJlc3MgPSBBZGRyZXNzLmZyb21TdHJpbmcoIjB4Ii5jb25jYXQoaWRlbnRpZmllclNwbGl0WzFdKSkhCiAgICAgICAgbGV0IG5hbWUgPSBpZGVudGlmaWVyU3BsaXRbMl0hCgogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KGFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiBuYW1lKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBGdW5naWJsZVRva2VuIGNvbnRyYWN0IikKICAgICAgICBsZXQgdmF1bHREYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgICAgICAgICAgICByZXNvdXJjZVR5cGU6IHR5cGUsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT4oKQogICAgICAgICAgICApIGFzISBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIEZUVmF1bHREYXRhIHZpZXciKQoKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8JntGdW5naWJsZVRva2VuLlZhdWx0fT4oZnJvbTogdmF1bHREYXRhLnN0b3JhZ2VQYXRoICkgPT0gbmlsIHsKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZSg8LSB2YXVsdERhdGEuY3JlYXRlRW1wdHlWYXVsdCgpLCB0bzp2YXVsdERhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgfQoKICAgICAgICBpZiBzaWduZXIuY2FwYWJpbGl0aWVzLmV4aXN0cyh2YXVsdERhdGEucmVjZWl2ZXJQYXRoKSA9PSBmYWxzZSB7CiAgICAgICAgICAgIGxldCByZWNlaXZlckNhcGFiaWxpdHkgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JntGdW5naWJsZVRva2VuLlZhdWx0fT4odmF1bHREYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnB1Ymxpc2gocmVjZWl2ZXJDYXBhYmlsaXR5LCBhdDogdmF1bHREYXRhLnJlY2VpdmVyUGF0aCkKICAgICAgICB9CiAgICAgICAKICAgICAgICBpZiBzaWduZXIuY2FwYWJpbGl0aWVzLmV4aXN0cyh2YXVsdERhdGEubWV0YWRhdGFQYXRoKSA9PSBmYWxzZSB7CiAgICAgICAgICAgIGxldCBiYWxhbmNlQ2FwYWJpbGl0eSA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme0Z1bmdpYmxlVG9rZW4uVmF1bHR9Pih2YXVsdERhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMucHVibGlzaChiYWxhbmNlQ2FwYWJpbGl0eSwgYXQ6IHZhdWx0RGF0YS5tZXRhZGF0YVBhdGgpCiAgICAgICAgfQogICAgCiAgICB9Cn0='
    );
    let config = {
      cadence: code,
      name: 'enableTokenStorageV2',
      type: 'transaction',
      args: (arg: any, t: any) => [arg(vaultIdentifier, t.String)],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async transferTokensV3(vaultIdentifier: string, recipient: string, amount: string) {
    const code = decodeCadence(
      'aW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IFN0b3JhZ2VSZW50IGZyb20gMHhTdG9yYWdlUmVudAppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4RnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MKCgp0cmFuc2FjdGlvbih2YXVsdElkZW50aWZpZXI6U3RyaW5nLCByZWNpcGllbnQ6IEFkZHJlc3MsIGFtb3VudDogVUZpeDY0KSB7CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSwgQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CgogICAgICAgIGxldCB0eXBlID0gQ29tcG9zaXRlVHlwZSh2YXVsdElkZW50aWZpZXIpCiAgICAgICAgbGV0IGlkZW50aWZpZXJTcGxpdCA9IHZhdWx0SWRlbnRpZmllci5zcGxpdChzZXBhcmF0b3I6ICIuIikKICAgICAgICBsZXQgYWRkcmVzcyA9IEFkZHJlc3MuZnJvbVN0cmluZygiMHgiLmNvbmNhdChpZGVudGlmaWVyU3BsaXRbMV0pKSEKICAgICAgICBsZXQgbmFtZSA9IGlkZW50aWZpZXJTcGxpdFsyXSEKCiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQoYWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5hbWUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIEZ1bmdpYmxlVG9rZW4gY29udHJhY3QiKQogICAgICAgIGxldCB2YXVsdERhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogdHlwZSwKICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPigpCiAgICAgICAgICAgICkgYXMhIEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgRlRWYXVsdERhdGEgdmlldyIpCgogICAgICAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIHNpZ25lcidzIHN0b3JlZCB2YXVsdAogICAgICAgIGxldCB2YXVsdFJlZiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5WYXVsdH0+KGZyb206IHZhdWx0RGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVmZXJlbmNlIHRvIHRoZSBvd25lcidzIFZhdWx0ISIpCgoKICAgICAgICAgICAvLyBHZXQgdGhlIHJlY2lwaWVudCdzIHB1YmxpYyBhY2NvdW50IG9iamVjdAogICAgICAgIGxldCByZWNpcGllbnRBY2NvdW50ID0gZ2V0QWNjb3VudChyZWNpcGllbnQpCgogICAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgcmVjaXBpZW50J3MgUmVjZWl2ZXIKICAgICAgICBsZXQgcmVjZWl2ZXJSZWYgPSByZWNpcGllbnRBY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntGdW5naWJsZVRva2VuLlZhdWx0fT4odmF1bHREYXRhLnJlY2VpdmVyUGF0aCkhCiAgICAgICAgICAgIAogICAgICAgIC8vIERlcG9zaXQgdGhlIHdpdGhkcmF3biB0b2tlbnMgaW4gdGhlIHJlY2lwaWVudCdzIHJlY2VpdmVyCiAgICAgICAgcmVjZWl2ZXJSZWYuZGVwb3NpdChmcm9tOiA8LSB2YXVsdFJlZi53aXRoZHJhdyhhbW91bnQ6IGFtb3VudCkpCiAgICAgICAgU3RvcmFnZVJlbnQudHJ5UmVmaWxsKHJlY2lwaWVudCkKICAgIH0KCn0='
    );
    let config = {
      cadence: code,
      name: 'transferTokensV3',
      type: 'transaction',
      args: (arg: any, t: any) => [
        arg(vaultIdentifier, t.String),
        arg(recipient, t.Address),
        arg(amount, t.UFix64),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let txId = await fcl.mutate(config);
    txId = await this.runResponseInterceptors(txId);
    return txId;
  }

  public async getChildAccountAllowTypes(
    addr: string,
    child: string
  ): Promise<string[] | undefined> {
    const code = decodeCadence(
      'aW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KCi8vIFRoaXMgc2NyaXB0IGl0ZXJhdGVzIHRocm91Z2ggYSBwYXJlbnQncyBjaGlsZCBhY2NvdW50cywgCi8vIGlkZW50aWZpZXMgcHJpdmF0ZSBwYXRocyB3aXRoIGFuIGFjY2Vzc2libGUgTm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlciwgYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgdHlwZUlkcwphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyOiBBZGRyZXNzLCBjaGlsZDogQWRkcmVzcyk6IFtTdHJpbmddPyB7CiAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UpICZBY2NvdW50PihhZGRyKQogIGxldCBtYW5hZ2VyID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlKSAmQWNjb3VudD4oYWRkcikuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpID8/IHBhbmljICgibWFuYWdlciBkb2VzIG5vdCBleGlzdCIpCgoKICAKICBsZXQgbmZ0UHJvdmlkZXJUeXBlID0gVHlwZTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KCkKICBsZXQgZnRQcm92aWRlclR5cGUgPSBUeXBlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQoKICAvLyBJdGVyYXRlIHRocm91Z2ggY2hpbGQgYWNjb3VudHMKICBsZXQgYWRkciA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudD4oY2hpbGQpCiAgbGV0IGZvdW5kVHlwZXM6IFtTdHJpbmddID0gW10KICBsZXQgY2hpbGRBY2N0ID0gbWFuYWdlci5ib3Jyb3dBY2NvdW50KGFkZHI6IGNoaWxkKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogIC8vIGdldCBhbGwgcHJpdmF0ZSBwYXRocwoKICBmb3IgcyBpbiBhZGRyLnN0b3JhZ2Uuc3RvcmFnZVBhdGhzIHsKICAgIGxldCBjb250cm9sbGVycyA9IGFkZHIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuZ2V0Q29udHJvbGxlcnMoZm9yUGF0aDogcykKICAgIGZvciBjIGluIGNvbnRyb2xsZXJzIHsKICAgICAgLy8gaWYgIWMuYm9ycm93VHlwZS5pc1N1YnR5cGUob2Y6IHByb3ZpZGVyVHlwZSkgewogICAgICAvLyAgIGNvbnRpbnVlCiAgICAgIC8vIH0KCiAgICAgIGlmIGxldCBuZnRDYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGMuY2FwYWJpbGl0eUlELCB0eXBlOiBuZnRQcm92aWRlclR5cGUpIHsKICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBuZnRDYXAgYXMhIENhcGFiaWxpdHk8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PiAKCiAgICAgICAgaWYgIXByb3ZpZGVyQ2FwLmNoZWNrKCl7CiAgICAgICAgICBjb250aW51ZQogICAgICAgIH0KCiAgICAgICAgZm91bmRUeXBlcy5hcHBlbmQobmZ0Q2FwLmJvcnJvdzwmQW55UmVzb3VyY2U+KCkhLmdldFR5cGUoKS5pZGVudGlmaWVyKQogICAgICAgIGJyZWFrCiAgICAgIH0KICAgICAgaWYgbGV0IGZ0Q2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjLmNhcGFiaWxpdHlJRCwgdHlwZTogZnRQcm92aWRlclR5cGUpIHsKICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBmdENhcCBhcyEgQ2FwYWJpbGl0eTwme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PiAKCiAgICAgICAgaWYgIXByb3ZpZGVyQ2FwLmNoZWNrKCl7CiAgICAgICAgICBjb250aW51ZQogICAgICAgIH0KCiAgICAgICAgZm91bmRUeXBlcy5hcHBlbmQoZnRDYXAuYm9ycm93PCZBbnlSZXNvdXJjZT4oKSEuZ2V0VHlwZSgpLmlkZW50aWZpZXIpCiAgICAgICAgYnJlYWsKICAgICAgfQogICAgfQogIH0KCiAgcmV0dXJuIGZvdW5kVHlwZXMKfQ=='
    );
    let config = {
      cadence: code,
      name: 'getChildAccountAllowTypes',
      type: 'script',
      args: (arg: any, t: any) => [arg(addr, t.Address), arg(child, t.Address)],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let result = await fcl.query(config);
    result = await this.runResponseInterceptors(result);
    return result;
  }

  public async getChildAccountMeta(parent: string): Promise<Record<string, any>> {
    const code = decodeCadence(
      'aW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKCmFjY2VzcyhhbGwpIGZ1biBtYWluKHBhcmVudDogQWRkcmVzcyk6IHtBZGRyZXNzOiBBbnlTdHJ1Y3R9IHsKICBsZXQgYWNjdCA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSkgJkFjY291bnQ+KHBhcmVudCkKICBsZXQgbSA9IGFjY3Quc3RvcmFnZS5ib3Jyb3c8Jkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCgogIGlmIG0gPT0gbmlsIHsKICAgIHJldHVybiB7fQogIH0gZWxzZSB7CiAgICB2YXIgZGF0YToge0FkZHJlc3M6IEFueVN0cnVjdH0gPSB7fQogICAgZm9yIGFkZHJlc3MgaW4gbT8uZ2V0Q2hpbGRBZGRyZXNzZXMoKSEgewogICAgICBsZXQgYyA9IG0/LmdldENoaWxkQWNjb3VudERpc3BsYXkoYWRkcmVzczogYWRkcmVzcykgCiAgICAgIGRhdGEuaW5zZXJ0KGtleTogYWRkcmVzcywgYykKICAgIH0KICAgIHJldHVybiBkYXRhCiAgfQp9'
    );
    let config = {
      cadence: code,
      name: 'getChildAccountMeta',
      type: 'script',
      args: (arg: any, t: any) => [arg(parent, t.Address)],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let result = await fcl.query(config);
    result = await this.runResponseInterceptors(result);
    return result;
  }

  public async getAccessibleChildAccountNfts(addr: string): Promise<any> {
    const code = decodeCadence(
      'aW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwoKCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHI6IEFkZHJlc3MpOiBBbnlTdHJ1Y3QgewogIGxldCBtYW5hZ2VyID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlKSAmQWNjb3VudD4oYWRkcikuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpID8/IHBhbmljICgibWFuYWdlciBkb2VzIG5vdCBleGlzdCIpCgogIHZhciB0eXBlSWRzV2l0aFByb3ZpZGVyID0ge30gYXMge0FkZHJlc3M6IFtTdHJpbmddfQoKICAvLyBBZGRyZXNzIC0+IG5mdCBVVUlEIC0+IERpc3BsYXkKICB2YXIgbmZ0Vmlld3MgPSB7fSBhcyB7QWRkcmVzczoge1N0cmluZzogW1VJbnQ2NF19fSAKCiAgCiAgbGV0IHByb3ZpZGVyVHlwZSA9IFR5cGU8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCiAgbGV0IGNvbGxlY3Rpb25UeXBlOiBUeXBlID0gVHlwZTxAe05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KCkKCiAgLy8gSXRlcmF0ZSB0aHJvdWdoIGNoaWxkIGFjY291bnRzCiAgZm9yIGFkZHJlc3MgaW4gbWFuYWdlci5nZXRDaGlsZEFkZHJlc3NlcygpIHsKICAgIGxldCBhY2N0ID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlLCBDYXBhYmlsaXRpZXMpICZBY2NvdW50PihhZGRyZXNzKQogICAgbGV0IGZvdW5kVHlwZXM6IFtTdHJpbmddID0gW10KICAgIGxldCB2aWV3czoge1N0cmluZzogW1VJbnQ2NF19ID0ge30KICAgIGxldCBjaGlsZEFjY3QgPSBtYW5hZ2VyLmJvcnJvd0FjY291bnQoYWRkcjogYWRkcmVzcykgPz8gcGFuaWMoImNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKICAgICAKICAgIC8vIHR5cGVJZHNXaXRoUHJvdmlkZXJbYWRkcmVzc10gPSBmb3VuZFR5cGVzCgogICAgYWNjdC5zdG9yYWdlLmZvckVhY2hTdG9yZWQoZnVuIChwYXRoOiBTdG9yYWdlUGF0aCwgdHlwZTogVHlwZSk6IEJvb2wgewoKICAgICAgbGV0IGNvbnRyb2xsZXJzID0gYWNjdC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5nZXRDb250cm9sbGVycyhmb3JQYXRoOiBwYXRoISkKICAgICAgZm9yIGMgaW4gY29udHJvbGxlcnMgewogICAgICAgIGlmICFjLmJvcnJvd1R5cGUuaXNTdWJ0eXBlKG9mOiBwcm92aWRlclR5cGUpIHsKICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgfQoKICAgICAgICBpZiBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjLmNhcGFiaWxpdHlJRCwgdHlwZTogcHJvdmlkZXJUeXBlKSB7CiAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8JntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4gCgogICAgICAgICAgaWYgIXByb3ZpZGVyQ2FwLmNoZWNrKCl7CiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICB9CiAgICAgICAgICBmb3VuZFR5cGVzLmFwcGVuZChjYXAuYm9ycm93PCZBbnlSZXNvdXJjZT4oKSEuZ2V0VHlwZSgpLmlkZW50aWZpZXIpCiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiB0cnVlCiAgICB9KQoKICAgIHR5cGVJZHNXaXRoUHJvdmlkZXJbYWRkcmVzc10gPSBmb3VuZFR5cGVzCiAgICAKCiAgICAvLyBpdGVyYXRlIHN0b3JhZ2UsIGNoZWNrIGlmIHR5cGVJZHNXaXRoUHJvdmlkZXIgY29udGFpbnMgdGhlIHR5cGVJZCwgaWYgc28sIGFkZCB0byB2aWV3cwogICAgYWNjdC5zdG9yYWdlLmZvckVhY2hTdG9yZWQoZnVuIChwYXRoOiBTdG9yYWdlUGF0aCwgdHlwZTogVHlwZSk6IEJvb2wgewogICAgICAKICAgICAgaWYgdHlwZUlkc1dpdGhQcm92aWRlclthZGRyZXNzXSA9PSBuaWwgewogICAgICAgIHJldHVybiB0cnVlCiAgICAgIH0KCiAgICAgIGZvciBrZXkgaW4gdHlwZUlkc1dpdGhQcm92aWRlci5rZXlzIHsKICAgICAgICBmb3IgaWR4LCB2YWx1ZSBpbiB0eXBlSWRzV2l0aFByb3ZpZGVyW2tleV0hIHsKICAgICAgICAgIGxldCB2YWx1ZSA9IHR5cGVJZHNXaXRoUHJvdmlkZXJba2V5XSEKCiAgICAgICAgICBpZiB2YWx1ZVtpZHhdICE9IHR5cGUuaWRlbnRpZmllciB7CiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiB0eXBlLmlzSW5zdGFuY2UoY29sbGVjdGlvblR5cGUpIHsKICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIGxldCBjb2xsZWN0aW9uID0gYWNjdC5zdG9yYWdlLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpYywgVmlld1Jlc29sdmVyLlJlc29sdmVyQ29sbGVjdGlvbn0+KGZyb206IHBhdGgpIHsgCiAgICAgICAgICAgICAgLy8gSXRlcmF0ZSBvdmVyIElEcyAmIHJlc29sdmUgdGhlIHZpZXcKICAgICAgICAgICAgIAogICAgICAgICAgICAgIGZvciBpZCBpbiBjb2xsZWN0aW9uLmdldElEcygpIHsKICAgICAgICAgICAgICAgIGxldCBuZnQgPSBjb2xsZWN0aW9uLmJvcnJvd05GVChpZCkhCgogICAgICAgICAgICAgICAgdmlld3NbbmZ0LmdldFR5cGUoKS5pZGVudGlmaWVyXSA9IGNvbGxlY3Rpb24uZ2V0SURzKCkKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gdHJ1ZQogICAgfSkKICAgIG5mdFZpZXdzW2FkZHJlc3NdID0gdmlld3MKICB9CiAgcmV0dXJuIG5mdFZpZXdzCn0='
    );
    let config = {
      cadence: code,
      name: 'getAccessibleChildAccountNfts',
      type: 'script',
      args: (arg: any, t: any) => [arg(addr, t.Address)],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let result = await fcl.query(config);
    result = await this.runResponseInterceptors(result);
    return result;
  }

  public async getChildAddresses(parent: string): Promise<string[]> {
    const code = decodeCadence(
      'aW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKCmFjY2VzcyhhbGwpIGZ1biBtYWluKHBhcmVudDogQWRkcmVzcyk6IFtBZGRyZXNzXSB7CiAgbGV0IGFjY3QgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UpICZBY2NvdW50PihwYXJlbnQpCiAgbGV0IG1hbmFnZXIgPSBhY2N0LnN0b3JhZ2UuYm9ycm93PCZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgPz8gcGFuaWMoIm1hbmFnZXIgbm90IGZvdW5kIikKICByZXR1cm4gIG1hbmFnZXIuZ2V0Q2hpbGRBZGRyZXNzZXMoKQp9'
    );
    let config = {
      cadence: code,
      name: 'getChildAddresses',
      type: 'script',
      args: (arg: any, t: any) => [arg(parent, t.Address)],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let result = await fcl.query(config);
    result = await this.runResponseInterceptors(result);
    return result;
  }

  public async getChildAccountFtCapabilities(addr: string): Promise<any> {
    const code = decodeCadence(
      'aW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyOiBBZGRyZXNzKTpBbnlTdHJ1Y3QgewogIGxldCBhY2NvdW50ID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlKSAmQWNjb3VudD4oYWRkcikKICBsZXQgbWFuYWdlciA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSkgJkFjY291bnQ+KGFkZHIpLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgPz8gcGFuaWMgKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKCiAgdmFyIHR5cGVJZHNXaXRoUHJvdmlkZXI6IHtBZGRyZXNzOiBbU3RyaW5nXX0gPSB7fQogIAogIGxldCBwcm92aWRlclR5cGUgPSBUeXBlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQoKICAvLyBJdGVyYXRlIHRocm91Z2ggY2hpbGQgYWNjb3VudHMKICBmb3IgYWRkcmVzcyBpbiBtYW5hZ2VyLmdldENoaWxkQWRkcmVzc2VzKCkgewogICAgbGV0IGFkZHIgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQ+KGFkZHJlc3MpCiAgICBsZXQgZm91bmRUeXBlczogW1N0cmluZ10gPSBbXQogICAgbGV0IGNoaWxkQWNjdCA9IG1hbmFnZXIuYm9ycm93QWNjb3VudChhZGRyOiBhZGRyZXNzKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgLy8gZ2V0IGFsbCBwcml2YXRlIHBhdGhzCgogICAgZm9yIHMgaW4gYWRkci5zdG9yYWdlLnN0b3JhZ2VQYXRocyB7CiAgICAgIGZvciBjIGluIGFkZHIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuZ2V0Q29udHJvbGxlcnMoZm9yUGF0aDogcykgewogICAgICAgIGlmICFjLmJvcnJvd1R5cGUuaXNTdWJ0eXBlKG9mOiBwcm92aWRlclR5cGUpewogICAgICAgICAgY29udGludWUKICAgICAgICB9CgogICAgICAgIGlmIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGMuY2FwYWJpbGl0eUlELCB0eXBlOiBwcm92aWRlclR5cGUpIHsKICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTwme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PiAKCiAgICAgICAgICBpZiAhcHJvdmlkZXJDYXAuY2hlY2soKXsKICAgICAgICAgICAgY29udGludWUKICAgICAgICAgIH0KCiAgICAgICAgICBmb3VuZFR5cGVzLmFwcGVuZChjYXAuYm9ycm93PCZBbnlSZXNvdXJjZT4oKSEuZ2V0VHlwZSgpLmlkZW50aWZpZXIpCiAgICAgICAgICB0eXBlSWRzV2l0aFByb3ZpZGVyW2FkZHJlc3NdID0gZm91bmRUeXBlcwogICAgICAgICAgYnJlYWsKICAgICAgICB9CiAgICAgIH0KICAgIH0gICAgICAKICB9CgogIHJldHVybiB0eXBlSWRzV2l0aFByb3ZpZGVyCn0KIA=='
    );
    let config = {
      cadence: code,
      name: 'getChildAccountFtCapabilities',
      type: 'script',
      args: (arg: any, t: any) => [arg(addr, t.Address)],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let result = await fcl.query(config);
    result = await this.runResponseInterceptors(result);
    return result;
  }

  public async checkChildRecieveVaults(
    parent: string,
    child: string,
    path: string
  ): Promise<boolean> {
    const code = decodeCadence(
      'aW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KCmFjY2VzcyhhbGwpIGZ1biBtYWluKHBhcmVudDogQWRkcmVzcywgY2hpbGQ6IEFkZHJlc3MsIHBhdGg6IFN0cmluZyk6IEJvb2wgewogIGxldCBhY2NvdW50ID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlKSAmQWNjb3VudD4ocGFyZW50KQogIGxldCBtYW5hZ2VyID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlKSAmQWNjb3VudD4ocGFyZW50KS5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkgPz8gcGFuaWMgKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKICAKICBsZXQgcmVjZWl2ZXJUeXBlID0gVHlwZTwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9PigpCgogIGxldCBhZGRyID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlLCBDYXBhYmlsaXRpZXMpICZBY2NvdW50PihjaGlsZCkKICAKICBsZXQgY2hpbGRBY2N0ID0gbWFuYWdlci5ib3Jyb3dBY2NvdW50KGFkZHI6IGNoaWxkKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQoKICBsZXQgY29udHJvbGxlcnMgPSBhZGRyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmdldENvbnRyb2xsZXJzKGZvclBhdGg6IFN0b3JhZ2VQYXRoKGlkZW50aWZpZXI6IHBhdGgpISkKICB2YXIgZmxhZyA9IGZhbHNlCgogIGZvciBjIGluIGNvbnRyb2xsZXJzIHsKICAgIGlmICFjLmJvcnJvd1R5cGUuaXNTdWJ0eXBlKG9mOiByZWNlaXZlclR5cGUpIHsKICAgICAgY29udGludWUKICAgIH0KCiAgICBpZiBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjLmNhcGFiaWxpdHlJRCwgdHlwZTogcmVjZWl2ZXJUeXBlKSB7CiAgICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9PiAKCiAgICAgIGlmICFwcm92aWRlckNhcC5jaGVjaygpewogICAgICAgIGNvbnRpbnVlCiAgICAgIH0KCiAgICAgIGZsYWcgPSB0cnVlCiAgICAgIGJyZWFrCiAgICB9CiAgfQoKICByZXR1cm4gZmxhZwp9IAogICAg'
    );
    let config = {
      cadence: code,
      name: 'checkChildRecieveVaults',
      type: 'script',
      args: (arg: any, t: any) => [
        arg(parent, t.Address),
        arg(child, t.Address),
        arg(path, t.String),
      ],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let result = await fcl.query(config);
    result = await this.runResponseInterceptors(result);
    return result;
  }

  public async getAccessibleCoinInfo(parent: string, childAddress: string): Promise<TokenInfo[]> {
    const code = decodeCadence(
      'aW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KCmFjY2VzcyhhbGwpIHN0cnVjdCBUb2tlbkluZm8gewogIGFjY2VzcyhhbGwpIGxldCBpZDogU3RyaW5nCiAgYWNjZXNzKGFsbCkgbGV0IGJhbGFuY2U6IFVGaXg2NAoKICBpbml0KGlkOiBTdHJpbmcsIGJhbGFuY2U6IFVGaXg2NCkgewogICAgc2VsZi5pZCA9IGlkCiAgICBzZWxmLmJhbGFuY2UgPSBiYWxhbmNlCiAgfQp9CgphY2Nlc3MoYWxsKSBmdW4gbWFpbihwYXJlbnQ6IEFkZHJlc3MsIGNoaWxkQWRkcmVzczogQWRkcmVzcyk6IFtUb2tlbkluZm9dIHsKICBsZXQgbWFuYWdlciA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSkgJkFjY291bnQ+KHBhcmVudCkuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpID8/IHBhbmljICgibWFuYWdlciBkb2VzIG5vdCBleGlzdCIpCgogIHZhciB0eXBlSWRzV2l0aFByb3ZpZGVyOiB7QWRkcmVzczogW1N0cmluZ119ID0ge30KCiAgdmFyIGNvaW5JbmZvTGlzdDogW1Rva2VuSW5mb10gPSBbXQogIGxldCBwcm92aWRlclR5cGUgPSBUeXBlPENhcGFiaWxpdHk8JntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KCkgCiAgbGV0IHZhdWx0VHlwZTogVHlwZSA9IFR5cGU8QHtGdW5naWJsZVRva2VuLlZhdWx0fT4oKQoKICAvLyBJdGVyYXRlIHRocm91Z2ggY2hpbGQgYWNjb3VudHMKICBsZXQgYWNjdCA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudD4gKGNoaWxkQWRkcmVzcykKICBsZXQgZm91bmRUeXBlczogW1N0cmluZ10gPSBbXQogIGxldCB2YXVsdEJhbGFuY2VzOiB7U3RyaW5nOiBVRml4NjR9ID0ge30KICBsZXQgY2hpbGRBY2N0ID0gbWFuYWdlci5ib3Jyb3dBY2NvdW50KGFkZHI6IGNoaWxkQWRkcmVzcykgPz8gcGFuaWMoImNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKICAKICAvLyBnZXQgYWxsIHByaXZhdGUgcGF0aHMKICBhY2N0LnN0b3JhZ2UuZm9yRWFjaFN0b3JlZChmdW4gKHBhdGg6IFN0b3JhZ2VQYXRoLCB0eXBlOiBUeXBlKTogQm9vbCB7CiAgICAvLyBDaGVjayB3aGljaCBwcml2YXRlIHBhdGhzIGhhdmUgTkZUIFByb3ZpZGVyIEFORCBjYW4gYmUgYm9ycm93ZWQKICAgIGlmICF0eXBlLmlzU3VidHlwZShvZjogcHJvdmlkZXJUeXBlKXsKICAgICAgcmV0dXJuIHRydWUKICAgIH0KCiAgICBsZXQgY29udHJvbGxlcnMgPSBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmdldENvbnRyb2xsZXJzKGZvclBhdGg6IHBhdGgpCgogICAgZm9yIGMgaW4gY29udHJvbGxlcnMgewogICAgICBpZiAhYy5ib3Jyb3dUeXBlLmlzU3VidHlwZShvZjogcHJvdmlkZXJUeXBlKSB7CiAgICAgICAgY29udGludWUKICAgICAgfQoKICAgICAgaWYgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogYy5jYXBhYmlsaXR5SUQsIHR5cGU6IHByb3ZpZGVyVHlwZSkgewogICAgICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTwme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PiAKCiAgICAgICAgaWYgIXByb3ZpZGVyQ2FwLmNoZWNrKCl7CiAgICAgICAgICBjb250aW51ZQogICAgICAgIH0KICAgICAgICBmb3VuZFR5cGVzLmFwcGVuZChjYXAuYm9ycm93PCZBbnlSZXNvdXJjZT4oKSEuZ2V0VHlwZSgpLmlkZW50aWZpZXIpCiAgICAgIH0KICAgIH0KICAgIHJldHVybiB0cnVlCiAgfSkKICB0eXBlSWRzV2l0aFByb3ZpZGVyW2NoaWxkQWRkcmVzc10gPSBmb3VuZFR5cGVzCgogIGFjY3Quc3RvcmFnZS5mb3JFYWNoU3RvcmVkKGZ1biAocGF0aDogU3RvcmFnZVBhdGgsIHR5cGU6IFR5cGUpOiBCb29sIHsKICAgIGlmIHR5cGVJZHNXaXRoUHJvdmlkZXJbY2hpbGRBZGRyZXNzXSA9PSBuaWwgewogICAgICByZXR1cm4gdHJ1ZQogICAgfQoKICAgIGZvciBrZXkgaW4gdHlwZUlkc1dpdGhQcm92aWRlci5rZXlzIHsKICAgICAgZm9yIGlkeCwgdmFsdWUgaW4gdHlwZUlkc1dpdGhQcm92aWRlcltrZXldISB7CiAgICAgICAgbGV0IHZhbHVlID0gdHlwZUlkc1dpdGhQcm92aWRlcltrZXldIQoKICAgICAgICBpZiB2YWx1ZVtpZHhdICE9IHR5cGUuaWRlbnRpZmllciB7CiAgICAgICAgICBjb250aW51ZQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiB0eXBlLmlzSW5zdGFuY2UodmF1bHRUeXBlKSB7CiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICB9CiAgICAgICAgICBpZiBsZXQgdmF1bHQgPSBhY2N0LnN0b3JhZ2UuYm9ycm93PCZ7RnVuZ2libGVUb2tlbi5CYWxhbmNlfT4oZnJvbTogcGF0aCkgeyAKICAgICAgICAgICAgLy8gSXRlcmF0ZSBvdmVyIElEcyAmIHJlc29sdmUgdGhlIHZpZXcKICAgICAgICAgICAgY29pbkluZm9MaXN0LmFwcGVuZCgKICAgICAgICAgICAgICBUb2tlbkluZm8oaWQ6IHR5cGUuaWRlbnRpZmllciwgYmFsYW5jZTogdmF1bHQuYmFsYW5jZSkKICAgICAgICAgICAgKQogICAgICAgICAgfQogICAgICAgICAgY29udGludWUKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIHJldHVybiB0cnVlCiAgfSkKCiAgcmV0dXJuIGNvaW5JbmZvTGlzdAp9'
    );
    let config = {
      cadence: code,
      name: 'getAccessibleCoinInfo',
      type: 'script',
      args: (arg: any, t: any) => [arg(parent, t.Address), arg(childAddress, t.Address)],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let result = await fcl.query(config);
    result = await this.runResponseInterceptors(result);
    return result;
  }

  public async getDelegator(address: string): Promise<DelegatorInfo[] | undefined> {
    const code = decodeCadence(
      'aW1wb3J0IEZsb3dTdGFraW5nQ29sbGVjdGlvbiBmcm9tIDB4Rmxvd1N0YWtpbmdDb2xsZWN0aW9uCmltcG9ydCBGbG93SURUYWJsZVN0YWtpbmcgZnJvbSAweEZsb3dJRFRhYmxlU3Rha2luZwppbXBvcnQgTG9ja2VkVG9rZW5zIGZyb20gMHhMb2NrZWRUb2tlbnMKCiBhY2Nlc3MoYWxsKSBzdHJ1Y3QgRGVsZWdhdG9ySW5mbyB7CiAgICBhY2Nlc3MoYWxsKSBsZXQgaWQ6IFVJbnQzMgogICAgYWNjZXNzKGFsbCkgbGV0IG5vZGVJRDogU3RyaW5nCiAgICBhY2Nlc3MoYWxsKSBsZXQgdG9rZW5zQ29tbWl0dGVkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIGxldCB0b2tlbnNTdGFrZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgbGV0IHRva2Vuc1Vuc3Rha2luZzogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSBsZXQgdG9rZW5zUmV3YXJkZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgbGV0IHRva2Vuc1Vuc3Rha2VkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIGxldCB0b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2U6IFVGaXg2NAp9CgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzKTogW0RlbGVnYXRvckluZm9dPyB7CiAgICB2YXIgcmVzOiBbRGVsZWdhdG9ySW5mb10/ID0gbmlsCgogICAgbGV0IGluaXRlZCA9IEZsb3dTdGFraW5nQ29sbGVjdGlvbi5kb2VzQWNjb3VudEhhdmVTdGFraW5nQ29sbGVjdGlvbihhZGRyZXNzOiBhZGRyZXNzKQoKICAgIGlmIGluaXRlZCB7CiAgICAgICAgbGV0IHJlc3VsdCA9IEZsb3dTdGFraW5nQ29sbGVjdGlvbi5nZXRBbGxEZWxlZ2F0b3JJbmZvKGFkZHJlc3M6IGFkZHJlc3MpCiAgICAgICAgZm9yIGluZm8gaW4gcmVzdWx0IHsKICAgICAgICAgICAgcmVzLmFwcGVuZChEZWxlZ2F0b3JJbmZvKGlkOiBpbmZvLmlkLCBub2RlSUQ6IGluZm8ubm9kZUlELCB0b2tlbnNDb21taXR0ZWQ6IGluZm8udG9rZW5zQ29tbWl0dGVkLCB0b2tlbnNTdGFrZWQ6IGluZm8udG9rZW5zU3Rha2VkLCB0b2tlbnNVbnN0YWtpbmc6IGluZm8udG9rZW5zVW5zdGFraW5nLCB0b2tlbnNSZXdhcmRlZDogaW5mby50b2tlbnNSZXdhcmRlZCwgdG9rZW5zVW5zdGFrZWQ6IGluZm8udG9rZW5zVW5zdGFrZWQsIHRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZTogaW5mby50b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UpKQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiByZXMKfQo='
    );
    let config = {
      cadence: code,
      name: 'getDelegator',
      type: 'script',
      args: (arg: any, t: any) => [arg(address, t.Address)],
      limit: 9999,
    };
    config = await this.runRequestInterceptors(config);
    let result = await fcl.query(config);
    result = await this.runResponseInterceptors(result);
    return result;
  }
}
