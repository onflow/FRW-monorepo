import { type Meta, type StoryObj } from '@storybook/react-webpack5';
import React from 'react';
import { fn } from 'storybook/test';

import PriceCard from '@/ui/components/TokenLists/PriceCard';
import { useWallet as useWalletMock } from '@/ui/hooks/use-wallet.mock';

const meta: Meta<typeof PriceCard> = {
  title: 'Components/TokenLists/PriceCard',
  tags: ['autodocs'],
  component: PriceCard,
  decorators: [
    (Story) => {
      useWalletMock.mockReset();
      const memoizedImplementation = React.useMemo(
        () => ({
          getCurrentAccount: fn().mockResolvedValue(null),
          getTokenPrice: fn().mockResolvedValue({
            price: {
              change: {
                percentage: -0.031799163179916226,
              },
              last: 0.3471,
            },
          }),
          getTokenPriceHistory: fn().mockResolvedValue(
            [
              [1749704400, 0.3762, 0.3768, 0.3762, 0.3768, 0.3764, 236.34, 7],
              [1749706200, 0.3764, 0.3774, 0.3764, 0.3774, 0.3764, 1280.55629816, 10],
              [1749708000, 0.3756, 0.3756, 0.3756, 0.3756, 0.3756, 8284.02468943, 3],
              [1749709800, 0.3756, 0.3773, 0.3752, 0.3773, 0.3757, 2610.78665571, 16],
              [1749711600, 0.3772, 0.3772, 0.3772, 0.3772, 0.3772, 7.36846, 1],
              [1749713400, 0.3756, 0.3756, 0.3749, 0.3751, 0.3755, 1138.38638461, 4],
              [1749715200, 0.373, 0.3742, 0.373, 0.3742, 0.3732, 2266.69, 6],
              [1749717000, 0.3726, 0.3737, 0.3726, 0.3737, 0.373, 170.89746809, 9],
              [1749718800, 0.3739, 0.3739, 0.3732, 0.3738, 0.3735, 133.68731541, 7],
              [1749720600, 0.3732, 0.3746, 0.3732, 0.3737, 0.3737, 893.50645245, 16],
              [1749722400, 0.373, 0.373, 0.3711, 0.3721, 0.3728, 1530.24447721, 7],
              [1749724200, 0.37, 0.3711, 0.3698, 0.3711, 0.37, 683.28924193, 7],
              [1749726000, 0.3702, 0.3702, 0.3698, 0.3698, 0.3699, 311.38141205, 2],
              [1749727800, 0.3679, 0.369, 0.3679, 0.3687, 0.3686, 2954.41524227, 14],
              [1749729600, 0.3682, 0.3695, 0.3682, 0.3695, 0.3685, 1745.1866229, 9],
              [1749731400, 0.3694, 0.3726, 0.3694, 0.3726, 0.3698, 2454.68627238, 20],
              [1749733200, 0.3727, 0.373, 0.3726, 0.3726, 0.3727, 293.61582082, 6],
              [1749735000, 0.3727, 0.3735, 0.3723, 0.3731, 0.3723, 3802.26105371, 18],
              [1749736800, 0.3732, 0.3741, 0.3729, 0.3736, 0.3735, 1996.14969966, 12],
              [1749738600, 0.3732, 0.3741, 0.3732, 0.3741, 0.3737, 260.62494797, 10],
              [1749740400, 0.3741, 0.3741, 0.3741, 0.3741, 0.3741, 25.896337, 1],
              [1749742200, 0.3709, 0.3715, 0.3706, 0.3706, 0.3707, 207.85304426, 7],
              [1749744000, 0.3709, 0.3712, 0.3709, 0.3712, 0.371, 108.98, 3],
              [1749745800, 0.3702, 0.3712, 0.3702, 0.3712, 0.3707, 407.85065658, 12],
              [1749747600, 0.3719, 0.3733, 0.3719, 0.3733, 0.3726, 522.85107, 7],
              [1749749400, 0.3728, 0.3735, 0.3728, 0.3734, 0.3732, 560.14023393, 8],
              [1749751200, 0.3709, 0.3709, 0.3689, 0.3689, 0.3693, 8.221205, 2],
              [1749753000, 0.3691, 0.3696, 0.3691, 0.3696, 0.3693, 116.04, 3],
              [1749754800, 0.3696, 0.3696, 0.3696, 0.3696, 0, 0, 0],
              [1749756600, 0.3683, 0.3683, 0.3629, 0.3648, 0.364, 6700.7565486, 15],
              [1749758400, 0.3644, 0.3653, 0.3641, 0.3653, 0.3645, 602.74036845, 11],
              [1749760200, 0.3643, 0.3643, 0.361, 0.361, 0.3613, 1021.94677335, 3],
              [1749762000, 0.3613, 0.363, 0.3613, 0.363, 0.3621, 483.71, 11],
              [1749763800, 0.3626, 0.3628, 0.3626, 0.3628, 0.3627, 98.7785014, 2],
              [1749765600, 0.3615, 0.362, 0.3615, 0.362, 0.3616, 219.618891, 5],
              [1749767400, 0.3606, 0.3616, 0.3605, 0.3609, 0.3606, 1798.15483815, 16],
              [1749769200, 0.3605, 0.3626, 0.3602, 0.3626, 0.3604, 5035.70038213, 20],
              [1749771000, 0.3619, 0.3624, 0.3619, 0.3624, 0.3622, 628.32339785, 4],
              [1749772800, 0.3585, 0.3585, 0.35, 0.3508, 0.3541, 7426.62677323, 34],
              [1749774600, 0.3476, 0.3486, 0.3437, 0.3473, 0.3461, 10076.07485931, 35],
              [1749776400, 0.346, 0.346, 0.3401, 0.3419, 0.3423, 9062.47920273, 35],
              [1749778200, 0.3414, 0.3444, 0.3411, 0.3437, 0.3415, 2321.53445946, 19],
              [1749780000, 0.3435, 0.3435, 0.342, 0.3425, 0.3422, 162.03041095, 4],
              [1749781800, 0.3427, 0.3435, 0.3417, 0.3431, 0.3425, 2156.68923253, 16],
              [1749783600, 0.3426, 0.3461, 0.3426, 0.3461, 0.3442, 4112.17076201, 84],
              [1749785400, 0.3462, 0.3496, 0.3462, 0.3496, 0.3471, 839.74240325, 34],
              [1749787200, 0.3456, 0.3463, 0.3456, 0.3461, 0.3457, 2951.30319006, 10],
              [1749789000, 0.3462, 0.3471, 0.3461, 0.3471, 0.3461, 4767.79262348, 14],
            ].map((item) => ({
              closeTime: item[0],
              openPrice: item[1],
              highPrice: item[2],
              lowPrice: item[3],
              price: item[4],
              volume: item[5],
              quoteVolume: item[6],
            }))
          ),
        }),
        []
      );
      useWalletMock.mockImplementation(() => memoizedImplementation);
      return <Story />;
    },
  ],
};

type Story = StoryObj<typeof PriceCard>;

export default meta;
export const Default: Story = {
  name: 'Default State',
  args: {
    token: 'flow',
  },
};
